<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: symfony | Elcodi blog]]></title>
  <link href="http://elcodi-blog.github.io/blog/categories/symfony/atom.xml" rel="self"/>
  <link href="http://elcodi-blog.github.io/"/>
  <updated>2014-08-12T10:16:21+02:00</updated>
  <id>http://elcodi-blog.github.io/</id>
  <author>
    <name><![CDATA[Elcodi Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Our roadmap]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/12/our-roadmap/"/>
    <updated>2014-08-12T09:55:48+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/12/our-roadmap</id>
    <content type="html"><![CDATA[<h5>This is the second part of a <a href="/blog/2014/08/11/a-short-break-for-meditation/">previous post</a></h5>

<p>We can proudly state we have a lot to do in the following months.</p>

<p>Question is, what now? Maybe we are 1% done along our path, although &ldquo;done&rdquo; in our world sounds a bit odd since there is always room for improvement.
As long as our issue tracker list gets fed, we will stay hungry for enhancing our code.</p>

<h3>GeoBundle</h3>

<p>One of the most recurring challenges in e-commerce development is the modeling of geographic and administrative divisions. We will put our efforts in designing a simple yet extensible set of entities and relations as well as strategies to implement custom tree structures.</p>

<h3>Rule management</h3>

<p>Rule-based decision logic is ubiquitous in e-commerce applications. A few examples:</p>

<ul>
<li>Which discount coupon can be automatically applied upon entering the checkout process?</li>
<li>Can a particular discount code be applied?</li>
<li>Can two specific products be added to the same cart?</li>
<li>Can a specific product combination trigger a discount, an up-sell or a different offer?</li>
<li>When is it possible to use a specific carrier or payment method?</li>
</ul>


<p>Elcodi <a href="https://github.com/elcodi/rulebundle">RuleBundle</a> aims at solving these kinds of issue.</p>

<h3>Ports and Adapters</h3>

<p>We surely want to promote high-cohesion, loose-coupled software components. Right now we are halfway, as described in the <a href="/blog/2014/08/11/a-short-break-for-meditation/">previous post</a>, but we want to keep improving. A typical usage of P&amp;A would be to decouple Symfony bundles from other significant objects in the domain, or to be able to use Elcodi Cart component without depending on the CustomerBundle.</p>

<h3>Tests</h3>

<p>A great deal of credibility for an open source project is earned by instilling a thorough and sound test methodology. We assume that we&rsquo;ve been lacking on this specific subject, doing our homeworks halfway. This will be addressed both for Elcodi core repository and web applications (<a href="https://github.com/elcodi/bamboo-store">BambooStore</a> and <a href="https://github.com/elcodi/bamboo-admin">BambooAdmin</a>) by raising the coverage of unit and functional tests and start working with acceptance tests for the web apps.</p>

<p>We have not decided yet which toolset we will be using, surely one between <a href="http://docs.behat.org/">Behat3</a> and <a href="http://www.phpspec.net/">PHPSpec2</a>. As always, suggestions are more than welcome!</p>

<h3>PaymentSuite</h3>

<p>The <a href="http://github.com/PaymentSuite">PaymentSuite</a> was conceived and grown inside Elcodi.</p>

<p>It is a payment processing suite developed in Symfony2 which follows our vision of extensibility using adapters and dispatched events to give maximum flexibility to implementers and to decouple specific <code>Cart</code> or <code>Order</code> implementations. It promotes easy and sensible defaults for configurations.</p>

<p>We will take care of the project and will evolve it as the default payment platform. The <a href="http://bamboo.elcodi.com">BambooStore</a> is already using a dummy <a href="https://github.com/PaymentSuite/FreePaymentBundle">free payment</a> method.</p>

<h3>ShippingSuite</h3>

<p>We would like to follow a similar path as the PaymentSuite: a separated and parallel project that does not depend on Elcodi and that can be easy integrated in web applications. Same vision, same resilience philosophy: work with <code>Order</code> or <code>Carrier</code> as <em>adaptees</em>.</p>

<h3>Documentation</h3>

<p>Akin to the phisolophers' stone, sibling of the Holy Grail, the documentation is the most precious gemstone that an open source project should strive to shape. As Symfony2 author <a href="https://twitter.com/fabpot">@fabpot</a> once said, it is the most challenging part of any project.</p>

<p>We are working on the foundation of an <a href="http://elcodi.readthedocs.org">english documentation</a>, localized and translated version will follow later on. This is a list of topics that we will elaborate further:</p>

<ul>
<li>Implementation guidelines. General vision and coding philosophy, style and everything needed for developers wishing to contribute.</li>
<li>Customizations. Craft a project using only Elcodi core. Architectural constraints to keep in mind. Recipes and examples.</li>
<li>Core bundles documentation, including

<ul>
<li>Provisioned Model</li>
<li>Event system rationale and taxonomies</li>
<li>Services</li>
<li>Configuration</li>
<li>Controllers and extensions, where it may apply</li>
</ul>
</li>
<li><a href="https://github.com/elcodi/bamboo-store">Bamboo</a> <a href="https://github.com/elcodi/bamboo-admin">web applications</a> documentation for Symfony and front-end developers: the starting point to develop your e-commerce site.</li>
</ul>


<p>This is going to be an epic effort and the real main entrance to the project for the community. No matter the size of your codebase is, documentation is a key measure of a project success.</p>

<h2>Community</h2>

<p>If documentation should be our <em>diamond</em>, the community should be our <em>propellant</em>. A good community makes a project good.</p>

<p>We started as a small project and we know how demanding it can be to get involved and contribute to the development of an open source based product.</p>

<p>We will take special care of this particular topic, since motivating people and get them involved is essential for our vision: Elcodi was never mean to be a mere code repository, it is a group of visionary people with a clear view in their minds, working together to work out a specific problem.</p>

<p>Taking care of the code means caring for the people that make it possible for the code to be crafted. We are especially interested in helping those who want to learn, so we will soon arrange training and learning mechanisms, both for Symfony and Elcodi.</p>

<p>Get ready to be effective!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A short break for meditation]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/11/a-short-break-for-meditation/"/>
    <updated>2014-08-11T09:05:38+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/11/a-short-break-for-meditation</id>
    <content type="html"><![CDATA[<h5>Puedes encontrar la versi√≥n en castellano de este post <a href="/blog/2014/08/04/un-momento-para-reflexionar/">aqui</a>.</h5>

<p>Some of you already know Elcodi, a suite of components built on Symfony2 and Doctrine, aiming to provide maximum flexibility and soundness to e-commerce projects.</p>

<p>We believe that coding should always be entertaining and fun.</p>

<p>This has been our main mission since the beginning and as every ambitious goal you cannot forget that along the journey you might discover an equally important path.</p>

<p>I think that we reached the point where it is important to take a breath, so that in the following days we will publish some posts regarding our views and what we&rsquo;ve been learning, where we will talk about what we have developed so far, our expectations and how we would like to drive the development of each part of the project in the following months.</p>

<h1>The path so far</h1>

<p>Elcodi was born a few months ago in a nice workplace located in Barcelona, Spain. We started designing the platform at the beginning of the year, developed and refactored the pieces up the present day where in my opinion we reached a fairly good balanced point, which is the growing seed of our natural direction.</p>

<h3>ProductBundle, AttributeBundle</h3>

<p>Those components are the home for everything regarding products, categories, manufacturers. Product attribute and options were added in a separate bundle and are the dimensions for working in the product variants space, which is one of the latest features developed and is a required trait for almost every e-commerce software implementation.</p>

<p>Multi-category is also supported for products.</p>

<h3>UserBundle</h3>

<p>Contains the models and tools necessary for working with front-end customers or back-end administrators. A basic authentication &amp; authorization definition was also added, exploiting Symfony Security component.</p>

<h3>CartBundle</h3>

<p>It handles the purchase process, carts and orders. Undoubtedly one of the core pillars of any e-commerce, it has been designed to be simple to get a grasp of and to be overridden almost completely by custom logic. You can read about its internal in the <a href="http://elcodi.readthedocs.org/en/latest/bundles/CartBundle/index.html">official documentation</a>.
Point-in-time snapshots of order states or cart to order transitions are examples of what is provided in CartBundle core services default implementation.</p>

<h3>GeoBundle</h3>

<p>Basic building block for a complete hierarchical aggregation of administrative entities. Due to lack of time, at the present day only <code>Country</code> is modeled as a mapped class, leaving <code>State</code>, <code>Province</code> or <code>City</code> as text fields.</p>

<h3>MediaBundle</h3>

<p>Allows the storage-agnostic handling of media files, such as images. It also controls image resizing and consolidates HTTP headers for media files.</p>

<p>Other bundles are:</p>

<ul>
<li>BannerBundle</li>
<li>LanguageBundle</li>
<li>CurrencyBundle</li>
<li>MenuBundle</li>
<li>NewsletterBundle</li>
<li>ReferralProgramBundle</li>
<li>RuleBundle</li>
</ul>


<h3>BambooStore</h3>

<p>We developed a prototype of a front-end store, the <a href="http://bamboo.elcodi.com/">Bamboo</a>. It is a showcase of Elcodi core features and uses <a href="https://github.com/PaymentSuite">PaymentSuite</a> <a href="https://github.com/PaymentSuite/FreePaymentBundle">FreePaymentBundle</a> as payment method.</p>

<h3>BambooAdmin</h3>

<p>Something we just published. An initial release of a <a href="https://github.com/elcodi/bamboo-admin">backoffice application</a>, providing basic features yet usable. Likewise Elcodi core and the Bamboo frontend, it will be in constant development. Versions and releases of the three projects will stay synchronized, not to break dependencies.</p>

<h3>Implementation</h3>

<p>We know that unfortunately, at least at this stage, our design choices and implementation cannot satisfy everyone. Trying to do it would require a massive effort and can lead to a loss of focus and direction. We prefer stick with our vision despite the errors we would make.</p>

<p>A question we are frequently asked is why we are coupling with Symfony and Doctrine: this is a trade-off we had to settle for trying to maximize acceptance from both developers and end users by enforcing clean, coherent, structured and documented code.</p>

<p>Right now we don&rsquo;t think it is feasable to assemble more layers of indirection to achieve this decoupling. The goal is to involve the Symfony community and work on the feedbacks we will receive from developers who want to build applications with Elcodi. Mind you that Symfony decoupling <em>is</em> possible, since we are trying to follow the <strong>SOLID</strong> path, but the eternal struggle between being different and effective flows to a point of balance that surely will benefit both the project and our users.</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objetivos]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/06/objetivos/"/>
    <updated>2014-08-06T12:12:19+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/06/objetivos</id>
    <content type="html"><![CDATA[<h2>Este post es la continuaci√≥n de dos posts anteriores</h2>

<ul>
<li><a href="/blog/2014/08/04/un-momento-para-reflexionar/">Un momento para reflexionar</a>.</li>
<li><a href="/blog/2014/08/05/nuestro-roadmap/">Nuestro roadmap</a>.</li>
</ul>


<p>A corto plazo, queremos llegar a una primera versi√≥n estable para la comunidad.
Esta semana hemos puesto la primera piedra de muchas, pero es importante
establecer reglas y procedimientos cuando pondremos las siguientes.</p>

<p>Tenemos un peque√±o set de <a href="https://github.com/elcodi/elcodi/milestones">milestones</a>
para tener una peque√±a gu√≠a de acci√≥n (como veis, esta semana tenemos la release
de la versi√≥n 0.3)</p>

<p>```
Version 0.3</p>

<pre><code>- Closed 3 days ago
- 100% complete  0 open  11 closed
</code></pre>

<p>Version 0.4</p>

<pre><code>- Due by August 15, 2014
- 0% complete  0 open  0 closed
</code></pre>

<p>Version 0.5</p>

<pre><code>- Due by August 29, 2014
- 17% complete  5 open  1 closed
</code></pre>

<p>Version 0.6</p>

<pre><code>- Due by September 11, 2014
- 0% complete  2 open  0 closed
</code></pre>

<p>```</p>

<p>Esto significa que vamos a trabajar en mejorar lo que tenemos, sin desarrollar
m√°s l√≥gica de negocio hasta que no tengamos algo un poco m√°s estable, as√≠ como
la comunicaci√≥n para que la gente interesada tenga claro los timings y tengan
m√°s visibilidad a la hora de implementar con Elcodi.</p>

<p>Por ahora nos nos vamos a preocupar demasiado de los BC Breaks. Hay una
<a href="https://github.com/elcodi/elcodi/issues/34">issue</a> abierta para cerrar API,
pero como bien dice <a href="">@hacfi</a> no es especialmente importante en este intervalo
tan enfocado al desarrollo de nuevas funcionalidades. Creemos que cumplir con
un semantic version ahora mismo solo limitar√≠a la arquitectura en muchos
aspectos.</p>

<p>Hasta la versi√≥n 1.0 no habr√° <em>semantic version</em>.</p>

<p>Otro objetivo es, una vez llegado a la primera versi√≥n estable, abrir ya el
market. Dado que a medida que pasa el tiempo la api va cambiando menos, creemos
que no falta demasiado para poder llegar a este punto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nuestro roadmap]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/05/nuestro-roadmap/"/>
    <updated>2014-08-05T12:46:22+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/05/nuestro-roadmap</id>
    <content type="html"><![CDATA[<h5>Este post es la continuaci√≥n de <a href="/blog/2014/08/04/un-momento-para-reflexionar/">uno anterior</a>.</h5>

<p>Podemos decir con orgullos que tenemos proyecto por mucho tiempo.</p>

<p>La pregunta es&hellip; ¬øy ahora qu√©? Pues bueno, ahora solo hemos andado un uno por
ciento del camino al completo (Creo que la palabra &ldquo;completo&rdquo; es algo
inexistente en nuestro √°mbito&hellip; siempre hay cosas que hacer y mejorar&hellip;).
Almenos, y mientras nuestra lista de Issues y Features no est√© vac√≠a, tenemos
ganas de mejorar nuestro repositorio. Aqu√≠ algunas cosas importantes.</p>

<h3>GeoBundle</h3>

<p>Consideramos que es uno de los problemas m√°s trabajados en todas las empresas
ecommerce, tener un buen sistema geogr√°fico. Tenerlo implica poder segmentar
mucho mejor y cotejar los datos, para sacar buenas m√©tricas y as√≠ mejorar la
experiencia de usuario.</p>

<p>Queremos trabajar en un completo sistema relacional de entidades, de tal forma
que, con comandos simples se puedan customizar y poblar tablas enteras.</p>

<h3>Gesti√≥n de Reglas</h3>

<p>Una parte interesante del proyecto es la utilizaci√≥n de reglas en todo el
modelo. Por ejemplo.</p>

<ul>
<li>¬øCuando se aplica un cup√≥n autom√°tico de cart?</li>
<li>¬øCuando es posible aplicar un cup√≥n cuando se aplica?</li>
<li>¬øCuando es posible mezclar dos productos?</li>
<li>¬øCuando se puede utilizar un Carrier o un m√©todo de pago?</li>
</ul>


<p>Podemos solucionar de una forma muy natural y intruitiva todas estas necesidades
con un buen sistema de reglas.</p>

<h3>Ports and Adapters</h3>

<p>Una de las cosas que mas nos preocupa es el poder trabajar con los componentes
de forma desacoplada. Creo que estamos enmedio del camino, por lo que queremos
aprender como hacerlo mejor. Los &ldquo;Ports and Adapters&rdquo; es una forma de trabajar
con implementaciones propias del componente, implementando adapters para las
implementaciones externas. De esta forma, podemos decir que un Cart tiene un
Customer, sin tener la necesidad de trabajar con CustomerBundle.</p>

<p>Trabajaremos en ello. Seguro.</p>

<h3>Tests</h3>

<p>Hemos hecho los deberes a medias, lo reconocemos, y dado que sabemos que parte
de la confianza de un proyecto open source se genera con la cantidad y,
importante, la calidad de sus tests, vamos a trabajar para que ambas cosas
crezcan a la vez, tanto en los bundles de Elcodi como en los proyectos
BambooStore y BambooAdmin.</p>

<p>Trabajaremos en las bater√≠as de Tests unitarios y funcionales, como hemos hecho
hasta ahora, incluso incrementando notablemente el nivel, y en las baterias
de tests de comportamiento en las Bamboo.</p>

<p>No tenemos muy claro que proyectos utilizar para tales fines. Tenemos en mente
Behat3 y PHPSPec2, as√≠ que toda opini√≥n sobre el tema ser√°s m√°s que bienvenida!</p>

<h3>PaymentSuite</h3>

<p>El proyecto <a href="http://github.com/PaymentSuite">PaymentSuite</a> naci√≥ dentro de
Elcodi.</p>

<p>Es un repositorio de pagos implementado en Symfony2, preparado para trabajar
100% sobre una capa de eventos. Esta capa te permite poder abstraer la
implementaci√≥n del Cart o del Order, as√≠ como la implementaci√≥n del m√©todo de
pago, por lo que la activaci√≥n o desactivaci√≥n de los m√©todos de pago se hacen
triviales, solo activando y configurando.</p>

<p>Desde Elcodi vamos a trabajar en el proyecto.</p>

<h3>ShippingSuite</h3>

<p>Queremos hacer lo mismo que con PaymentSuite. Un proyecto que trabaje sobre la
capa de eventos de Symfony y abstraiga, tanto el Order como la implementaci√≥n
del Carrier.</p>

<p>Con los pagos nos ha funcionado a la perfecci√≥n, as√≠ que seguro que vamos a
seguir el mismo camino para esta necesidad.</p>

<h3>Documentaci√≥n</h3>

<p>El diamante que buscar, encontrar, limpiar y tallar. La famosa documentaci√≥n.
Consideramos que es la verdadera joya de la corona, como dijo una vez @fabpot,
la documentaci√≥n es la parte m√°s complicada del proyecto, y lo sabemos.</p>

<p>Vamos a trabajar para hacer una buena documentaci√≥n en ingl√©s, as√≠ como la
traducci√≥n en el m√°ximo de idiomas posibles.</p>

<ul>
<li>Documentaci√≥n de implementaci√≥n. Estilos que hemos seguido, as√≠ como puntos
importantes a conocer para los contribuidores.</li>
<li>Documentaci√≥n de customizaci√≥n. En realidad consistir√° m√°s en un conjunto de
recetas.</li>
<li>Patrones que hemos utilizado y sus razones de ser</li>
<li>Documentaci√≥n por Bundle.</li>
<li>Modelo</li>
<li>Capa de eventos (dispatchers y listeners)</li>
<li>Capa de servicio</li>
<li>Capa de extensiones de Twig</li>
<li>Capa de configuraci√≥n</li>
<li>Capa de controlador (en el caso de las implementaciones de front y back)</li>
<li>Documentaci√≥n de front. Que necesita un frontend para realizar
implementaciones propias de frontal</li>
</ul>


<p>Sabemos que no ser√° tarea f√°cil, pero al menos estamos seguros que parte del
√©xito de cualquier proyecto, por peque√±o que sea, es la capacidad de documentar
que pueda llegar a tener, as√≠ como lo acogedor que pueda llegar a ser el entorno
del proyecto.</p>

<h3>Comunidad</h3>

<p>Si la documentaci√≥n es nuestro diamante, la comunidad es nuestro carburante. Una
buena comunidad hace el buen proyecto.</p>

<p>Nacimos como un peque√±o proyecto en Symfony y sabemos lo complicado y agresivo
que puede llegar a ser, para una persona no acostumbrada a estar en entornos
tan estrictos, el hecho de participar y involucrarse en el desarrollo de una
tecnolog√≠a.</p>

<p>Pues bien, como lo hemos vivido y sabemos que es, en parte, la clave de nuestro
√©xito, vamos a tratar este punto con especial inter√©s y cari√±o. Elcodi no es tan
solo un c√≥digo en un repositorio, es un conjunto de personas con una idea clara
en la cabeza y con la ilusi√≥n de trabajar juntas para solucionar un problema.</p>

<p>Es por esto que si queremos cuidar el c√≥digo al m√°ximo, debemos cuidar a las
personas que hacen posible que el c√≥digo exista. Tenemos mucho inter√©s en que la
gente que quiera aprender, lo haga, as√≠ que vamos a dise√±ar sistemas de learning
y de formaci√≥n, tanto en Symfony como en Elcodi, para que la gente que quiera
participar con nosotros, lo pueda hacer con el m√°ximo nivel posible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un momento para reflexionar]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/04/un-momento-para-reflexionar/"/>
    <updated>2014-08-04T13:53:28+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/04/un-momento-para-reflexionar</id>
    <content type="html"><![CDATA[<h5>You can find the english version of this post on <a href="/blog/2014/08/11/a-short-break-for-meditation/">A short break for meditation</a>.</h5>

<p>Algunos de vosotros ya conoc√©is Elcodi. Una serie de componentes hechos desde 0
con componentes de Symfony2 y Doctrine2, especialmente dise√±ados para
proporcionar el m√°ximo de flexibilidad y de robustez a los proyectos Ecommerce.</p>

<p>Programar debe ser siempre un placer.</p>

<p>Este es nuestro objetivo desde el principio, y como todos los objetivos, no hay
eue olvidar que, hasta llegar a ellos, hay un camino no menos importante.</p>

<p>Creo que hemos llegado a un punto de inflexi√≥n donde es importante detenerse,
as√≠ que durante los pr√≥ximos dias vamos a sacar una serie de posts referentes a
nuestra reflexiones donde pondremos sobre la mesa temas importantes como lo que
tenemos hecho hasta ahora, nuestra espectativas, y como vamos a hacer cada
trozo del proyecto durante los pr√≥ximos meses.</p>

<h1>El camino hasta ahora</h1>

<p>Elcodi empez√≥ hace unos meses en una bonita oficina de Barcelona. Nuestro
departamento t√©cnico empez√≥ a dise√±ar el proyecto a principios de a√±o y hasta
ahora, y entre unos cuantos ref√°ctorings interesantes, llegamos a un punto de
equilibrio, en mi opini√≥n, bastante bueno, semilla de nuestra direcci√≥n actual.</p>

<p>Hasta ahora hemos trabajado sobretodo en funcionalidades b√°sicas de inter√©s
com√∫n en cuanto a ecommerce se refiere.</p>

<h3>ProductBundle, AttributeBundle</h3>

<p>Todo lo referente al Producto, Categor√≠a y Marca. El Bundle tiene definido tanto
el modelo como una serie de herramientas para trabajar con √©l. Una de las
√∫ltimas incorporacion ha sido la implementaci√≥n de multiproducto, muy √∫til en
la mayor√≠a de sites ecommerce de hoy en d√≠a.</p>

<p>Tambi√©n soporta multicategor√≠a.</p>

<h3>UserBundle</h3>

<p>Modelo y herramientas para trabajar tanto con Customer como con Administradores
para el Backoffice. Tambi√©n se ha creado una definici√≥n b√°sica de autenticaci√≥n
y de autentificaci√≥n utilizando el ya conocido Secure de Symfony.</p>

<h3>CartBundle</h3>

<p>Gestor de Carts y Orders. Una de las partes troncales de todo ecommerce viene
en un formato bastante sencillo, dise√±ado para poder ser sobreescrito
practicamente en su totalidad. Se ha implementado seguimiento de Orders mediante
hist√≥rico de estados, as√≠ las herramientas de transformaci√≥n de Cart a Order.</p>

<h3>CouponBundle</h3>

<p>Definici√≥n del modelo de cup√≥n. Este bundle est√° particularmente desacoplado de
todos los dem√°s, por lo que solo tiene dependencia con <code>core-bundle</code> y con
<code>currency-bundle</code>. Si se quiere trabajar con el CartBundle de Elcodi, tambi√©n
se ha creado CartCouponBundle, un <strong>nexo</strong> entre ambos modelos que, a partir
de los eventos del EventDispatcher, se encarga del comportamiento asociado a los
cupones del cart.</p>

<h3>GeoBundle</h3>

<p>Semilla para toda la definici√≥n y gesti√≥n de un modelo geogr√°fico completo. Por
ahora, y dado que no hemos dedicado demasiado tiempo a esta parte, solo tenemos
Country como entidad, dejando como campos abiertos los dem√°s campos como
<code>Region</code>, <code>City</code> y <code>Postalcode</code></p>

<p>Otros Bundles m√°s son</p>

<ul>
<li>BannerBundle</li>
<li>LanguageBundle</li>
<li>CurrencyBundle</li>
<li>MediaBundle</li>
<li>MenuBundle</li>
<li>NewsletterBundle</li>
<li>ReferralProgramBundle</li>
<li>RuleBundle</li>
</ul>


<h3>BambooStore</h3>

<p>Hemos desarrollado una primera fase de un Store. Por ahora con camisetas muy
chulas y utilizando el
<a href="https://github.com/PaymentSuite/FreePaymentBundle">FreePaymentBundle</a> de
PaymentSuite.</p>

<p>Es una versi√≥n muy simple, pero seguro muy √∫til como punto de partida para
muchos departamentos t√©cnicos</p>

<h3>BambooAdmin</h3>

<p>Algo nuevo. Hemos estado trabajando el √∫ltimo mes en una base (muy simple y algo
incompleta) de un administrador. Estar√° en constrante desarrollo (junto con
el store y el core, yendo de la mano en cuanto a versiones).</p>

<h3>Implementaci√≥n</h3>

<p>Sabemos que nuestra implementaci√≥n no dejar√° a todo el mundo contento, y la
verdad no queremos que sea as√≠. Consideramos que dejar a todos el mundo contento
es algo imposible, y lo que terminas teniendo es un producto sin ning√∫n tipo de
identidad, por lo que nosotros preferimos definir bien nuestra direcci√≥n, y
desarrollar a pesar de los errores que podamos cometer.</p>

<p>Hemos recibido preguntas muy positivas del porqu√© estamos acopl√°ndonos al
framework Symfony y al ORM de Doctrine2. Pues bien, lo hacemos porque nuestro
objetivo es realmente llegar a ser lo m√°ximo √∫tiles posible, tanto para el
desarrollador como para el usuario final, y la √∫nica forma de que sea as√≠ es
tratar con c√≥digo mantenible, comprensible, documentado y estructurado.</p>

<p>En esta fase del proyecto no creemos que valga la pena a√±adir mas capas de
indirecci√≥n para realizar esta desvinculaci√≥n. El objetivo ahora mismo es
intentar involucrar la comunidad Symfony y recibir feedback de desarrolladores
que intenten montar algo con Elcodi.</p>

<p>En la busca de un tradeoff entre hacer las cosas lo m√°ximo de bien posible, y
tratar de ser algo diferentes a los dem√°s, hemos consideramos que ambas
relaciones son y ser√°n buenas para el proyecto, as√≠ como para los
desarrolladores que decidan trabajar sobre √©l.</p>
]]></content>
  </entry>
  
</feed>
