<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: symfony | Elcodi blog]]></title>
  <link href="http://elcodi-blog.github.io/blog/categories/symfony/atom.xml" rel="self"/>
  <link href="http://elcodi-blog.github.io/"/>
  <updated>2014-08-05T12:59:01+02:00</updated>
  <id>http://elcodi-blog.github.io/</id>
  <author>
    <name><![CDATA[Elcodi Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nuestro roadmap]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/05/nuestro-roadmap/"/>
    <updated>2014-08-05T12:46:22+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/05/nuestro-roadmap</id>
    <content type="html"><![CDATA[<h5>Este post es la continuación de <a href="/blog/2014/08/04/un-momento-para-reflexionar/">uno anterior</a>.</h5>

<p>Podemos decir con orgullos que tenemos proyecto por mucho tiempo.</p>

<p>La pregunta es&hellip; ¿y ahora qué? Pues bueno, ahora solo hemos andado un uno por
ciento del camino al completo (Creo que la palabra &ldquo;completo&rdquo; es algo
inexistente en nuestro ámbito&hellip; siempre hay cosas que hacer y mejorar&hellip;).
Almenos, y mientras nuestra lista de Issues y Features no esté vacía, tenemos
ganas de mejorar nuestro repositorio. Aquí algunas cosas importantes.</p>

<h3>GeoBundle</h3>

<p>Consideramos que es uno de los problemas más trabajados en todas las empresas
ecommerce, tener un buen sistema geográfico. Tenerlo implica poder segmentar
mucho mejor y cotejar los datos, para sacar buenas métricas y así mejorar la
experiencia de usuario.</p>

<p>Queremos trabajar en un completo sistema relacional de entidades, de tal forma
que, con comandos simples se puedan customizar y poblar tablas enteras.</p>

<h3>Gestión de Reglas</h3>

<p>Una parte interesante del proyecto es la utilización de reglas en todo el
modelo. Por ejemplo.</p>

<ul>
<li>¿Cuando se aplica un cupón automático de cart?</li>
<li>¿Cuando es posible aplicar un cupón cuando se aplica?</li>
<li>¿Cuando es posible mezclar dos productos?</li>
<li>¿Cuando se puede utilizar un Carrier o un método de pago?</li>
</ul>


<p>Podemos solucionar de una forma muy natural y intruitiva todas estas necesidades
con un buen sistema de reglas.</p>

<h3>Ports and Adapters</h3>

<p>Una de las cosas que mas nos preocupa es el poder trabajar con los componentes
de forma desacoplada. Creo que estamos enmedio del camino, por lo que queremos
aprender como hacerlo mejor. Los &ldquo;Ports and Adapters&rdquo; es una forma de trabajar
con implementaciones propias del componente, implementando adapters para las
implementaciones externas. De esta forma, podemos decir que un Cart tiene un
Customer, sin tener la necesidad de trabajar con CustomerBundle.</p>

<p>Trabajaremos en ello. Seguro.</p>

<h3>Tests</h3>

<p>Hemos hecho los deberes a medias, lo reconocemos, y dado que sabemos que parte
de la confianza de un proyecto open source se genera con la cantidad y,
importante, la calidad de sus tests, vamos a trabajar para que ambas cosas
crezcan a la vez, tanto en los bundles de Elcodi como en los proyectos
BambooStore y BambooAdmin.</p>

<p>Trabajaremos en las baterías de Tests unitarios y funcionales, como hemos hecho
hasta ahora, incluso incrementando notablemente el nivel, y en las baterias
de tests de comportamiento en las Bamboo.</p>

<p>No tenemos muy claro que proyectos utilizar para tales fines. Tenemos en mente
Behat3 y PHPSPec2, así que toda opinión sobre el tema serás más que bienvenida!</p>

<h3>PaymentSuite</h3>

<p>El proyecto <a href="http://github.com/PaymentSuite">PaymentSuite</a> nació dentro de
Elcodi.</p>

<p>Es un repositorio de pagos implementado en Symfony2, preparado para trabajar
100% sobre una capa de eventos. Esta capa te permite poder abstraer la
implementación del Cart o del Order, así como la implementación del método de
pago, por lo que la activación o desactivación de los métodos de pago se hacen
triviales, solo activando y configurando.</p>

<p>Desde Elcodi vamos a trabajar en el proyecto.</p>

<h3>ShippingSuite</h3>

<p>Queremos hacer lo mismo que con PaymentSuite. Un proyecto que trabaje sobre la
capa de eventos de Symfony y abstraiga, tanto el Order como la implementación
del Carrier.</p>

<p>Con los pagos nos ha funcionado a la perfección, así que seguro que vamos a
seguir el mismo camino para esta necesidad.</p>

<h3>Documentación</h3>

<p>El diamante que buscar, encontrar, limpiar y tallar. La famosa documentación.
Consideramos que es la verdadera joya de la corona, como dijo una vez @fabpot,
la documentación es la parte más complicada del proyecto, y lo sabemos.</p>

<p>Vamos a trabajar para hacer una buena documentación en inglés, así como la
traducción en el máximo de idiomas posibles.</p>

<ul>
<li>Documentación de implementación. Estilos que hemos seguido, así como puntos
importantes a conocer para los contribuidores.</li>
<li>Documentación de customización. En realidad consistirá más en un conjunto de
recetas.</li>
<li>Patrones que hemos utilizado y sus razones de ser</li>
<li>Documentación por Bundle.</li>
<li>Modelo</li>
<li>Capa de eventos (dispatchers y listeners)</li>
<li>Capa de servicio</li>
<li>Capa de extensiones de Twig</li>
<li>Capa de configuración</li>
<li>Capa de controlador (en el caso de las implementaciones de front y back)</li>
<li>Documentación de front. Que necesita un frontend para realizar
implementaciones propias de frontal</li>
</ul>


<p>Sabemos que no será tarea fácil, pero al menos estamos seguros que parte del
éxito de cualquier proyecto, por pequeño que sea, es la capacidad de documentar
que pueda llegar a tener, así como lo acogedor que pueda llegar a ser el entorno
del proyecto.</p>

<h3>Comunidad</h3>

<p>Si la documentación es nuestro diamante, la comunidad es nuestro carburante. Una
buena comunidad hace el buen proyecto.</p>

<p>Nacimos como un pequeño proyecto en Symfony y sabemos lo complicado y agresivo
que puede llegar a ser, para una persona no acostumbrada a estar en entornos
tan estrictos, el hecho de participar y involucrarse en el desarrollo de una
tecnología.</p>

<p>Pues bien, como lo hemos vivido y sabemos que es, en parte, la clave de nuestro
éxito, vamos a tratar este punto con especial interés y cariño. Elcodi no es tan
solo un código en un repositorio, es un conjunto de personas con una idea clara
en la cabeza y con la ilusión de trabajar juntas para solucionar un problema.</p>

<p>Es por esto que si queremos cuidar el código al máximo, debemos cuidar a las
personas que hacen posible que el código exista. Tenemos mucho interés en que la
gente que quiera aprender, lo haga, así que vamos a diseñar sistemas de learning
y de formación, tanto en Symfony como en Elcodi, para que la gente que quiera
participar con nosotros, lo pueda hacer con el máximo nivel posible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un momento para reflexionar]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/04/un-momento-para-reflexionar/"/>
    <updated>2014-08-04T13:53:28+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/04/un-momento-para-reflexionar</id>
    <content type="html"><![CDATA[<p>Algunos de vosotros ya conocéis Elcodi. Una serie de componentes hechos desde 0
con componentes de Symfony2 y Doctrine2, especialmente diseñados para
proporcionar el máximo de flexibilidad y de robustez a los proyectos Ecommerce.</p>

<p>Programar debe ser siempre un placer.</p>

<p>Este es nuestro objetivo desde el principio, y como todos los objetivos, no hay
eue olvidar que, hasta llegar a ellos, hay un camino no menos importante.</p>

<p>Creo que hemos llegado a un punto de inflexión donde es importante detenerse,
así que durante los próximos dias vamos a sacar una serie de posts referentes a
nuestra reflexiones donde pondremos sobre la mesa temas importantes como lo que
tenemos hecho hasta ahora, nuestra espectativas, y como vamos a hacer cada
trozo del proyecto durante los próximos meses.</p>

<h1>El camino hasta ahora</h1>

<p>Elcodi empezó hace unos meses en una bonita oficina de Barcelona. Nuestro
departamento técnico empezó a diseñar el proyecto a principios de año y hasta
ahora, y entre unos cuantos refáctorings interesantes, llegamos a un punto de
equilibrio, en mi opinión, bastante bueno, semilla de nuestra dirección actual.</p>

<p>Hasta ahora hemos trabajado sobretodo en funcionalidades básicas de interés
común en cuanto a ecommerce se refiere.</p>

<h3>ProductBundle, AttributeBundle</h3>

<p>Todo lo referente al Producto, Categoría y Marca. El Bundle tiene definido tanto
el modelo como una serie de herramientas para trabajar con él. Una de las
últimas incorporacion ha sido la implementación de multiproducto, muy útil en
la mayoría de sites ecommerce de hoy en día.</p>

<p>También soporta multicategoría.</p>

<h3>UserBundle</h3>

<p>Modelo y herramientas para trabajar tanto con Customer como con Administradores
para el Backoffice. También se ha creado una definición básica de autenticación
y de autentificación utilizando el ya conocido Secure de Symfony.</p>

<h3>CartBundle</h3>

<p>Gestor de Carts y Orders. Una de las partes troncales de todo ecommerce viene
en un formato bastante sencillo, diseñado para poder ser sobreescrito
practicamente en su totalidad. Se ha implementado seguimiento de Orders mediante
histórico de estados, así las herramientas de transformación de Cart a Order.</p>

<h3>CouponBundle</h3>

<p>Definición del modelo de cupón. Este bundle está particularmente desacoplado de
todos los demás, por lo que solo tiene dependencia con <code>core-bundle</code> y con
<code>currency-bundle</code>. Si se quiere trabajar con el CartBundle de Elcodi, también
se ha creado CartCouponBundle, un <strong>nexo</strong> entre ambos modelos que, a partir
de los eventos del EventDispatcher, se encarga del comportamiento asociado a los
cupones del cart.</p>

<h3>GeoBundle</h3>

<p>Semilla para toda la definición y gestión de un modelo geográfico completo. Por
ahora, y dado que no hemos dedicado demasiado tiempo a esta parte, solo tenemos
Country como entidad, dejando como campos abiertos los demás campos como
<code>Region</code>, <code>City</code> y <code>Postalcode</code></p>

<p>Otros Bundles más son</p>

<ul>
<li>BannerBundle</li>
<li>LanguageBundle</li>
<li>CurrencyBundle</li>
<li>MediaBundle</li>
<li>MenuBundle</li>
<li>NewsletterBundle</li>
<li>ReferralProgramBundle</li>
<li>RuleBundle</li>
</ul>


<h3>BambooStore</h3>

<p>Hemos desarrollado una primera fase de un Store. Por ahora con camisetas muy
chulas y utilizando el
<a href="https://github.com/PaymentSuite/FreePaymentBundle">FreePaymentBundle</a> de
PaymentSuite.</p>

<p>Es una versión muy simple, pero seguro muy útil como punto de partida para
muchos departamentos técnicos</p>

<h3>BambooAdmin</h3>

<p>Algo nuevo. Hemos estado trabajando el último mes en una base (muy simple y algo
incompleta) de un administrador. Estará en constrante desarrollo (junto con
el store y el core, yendo de la mano en cuanto a versiones).</p>

<h3>Implementación</h3>

<p>Sabemos que nuestra implementación no dejará a todo el mundo contento, y la
verdad no queremos que sea así. Consideramos que dejar a todos el mundo contento
es algo imposible, y lo que terminas teniendo es un producto sin ningún tipo de
identidad, por lo que nosotros preferimos definir bien nuestra dirección, y
desarrollar a pesar de los errores que podamos cometer.</p>

<p>Hemos recibido preguntas muy positivas del porqué estamos acoplándonos al
framework Symfony y al ORM de Doctrine2. Pues bien, lo hacemos porque nuestro
objetivo es realmente llegar a ser lo máximo útiles posible, tanto para el
desarrollador como para el usuario final, y la única forma de que sea así es
tratar con código mantenible, comprensible, documentado y estructurado.</p>

<p>En esta fase del proyecto no creemos que valga la pena añadir mas capas de
indirección para realizar esta desvinculación. El objetivo ahora mismo es
intentar involucrar la comunidad Symfony y recibir feedback de desarrolladores
que intenten montar algo con Elcodi.</p>

<p>En la busca de un tradeoff entre hacer las cosas lo máximo de bien posible, y
tratar de ser algo diferentes a los demás, hemos consideramos que ambas
relaciones son y serán buenas para el proyecto, así como para los
desarrolladores que decidan trabajar sobre él.</p>
]]></content>
  </entry>
  
</feed>
