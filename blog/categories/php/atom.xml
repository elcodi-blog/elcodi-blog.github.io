<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Elcodi blog]]></title>
  <link href="http://elcodi-blog.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://elcodi-blog.github.io/"/>
  <updated>2014-12-12T11:06:14+01:00</updated>
  <id>http://elcodi-blog.github.io/</id>
  <author>
    <name><![CDATA[Elcodi Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Playing with PHP-NG]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/12/playing-with-php-ng/"/>
    <updated>2014-08-12T18:02:14+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/12/playing-with-php-ng</id>
    <content type="html"><![CDATA[<p>There is a lot going on on the PHP community after Zeev Suraski published an <a href="http://zsuraski.blogspot.com.br/2014/07/benchmarking-phpng.html">article</a> where he ventured on assembling a performance comparison between <a href="https://wiki.php.net/rfc/phpng">PHPNG</a> and <a href="https://github.com/facebook/hhvm">hhvm</a>. Needles to say that the results are promising and the performace benefits of the soon-to-be next PHP major release look impressive.</p>

<p>For the sake of curiosity, we tried to run Elcodi <a href="https://github.com/elcodi/bamboo-store">frontend store</a> on PHPNG and see how a Symfony applicaction would fare.</p>

<p>The test was made on an Amazon <a href="http://aws.amazon.com/ec2/instance-types/#Compute_Optimized">c3.xlarge</a> EC2 instance (<a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/virtualization_types.html">HVM virtualization</a>) running <strong>Ubuntu Server 14.04 LTS</strong></p>

<h2>Installing PHPNG</h2>

<p>There are several options available for installing PHPNG binaries.</p>

<p>The first way is of course to follow the ninja path and <a href="https://wiki.php.net/phpng">compile it on your own</a>. Mind you that compiling PHPNG on an Ubuntu 14.04 is a source of headaches, since it requires <a href="http://www.gnu.org/software/bison/">Bison 2.7</a> but <code>trusty</code> official repositories provide it at version <code>3.0.2</code>, so you&rsquo;ll need to manually download and build it.</p>

<p>The easiest way is of course to add an <code>apt</code> repository providing the package. For the sake of simpliciy we can stuck with apprentice path, katanas can wait for the next bad guy.</p>

<p>Luckily Zend prepared <a href="http://repos.zend.com/zend-server/early-access/phpng/">an apt repo</a> for the <code>amd64</code> arch:</p>

<p>```bash</p>

<pre><code># Remember to run these commands as root, or use sudo
$ wget http://repos.zend.com/zend.key -O- 2&gt; /dev/null | apt-key add -
$ echo "deb [arch=amd64] http://repos.zend.com/zend-server/early-access/phpng/ trusty zend" &gt; /etc/apt/sources.list.d/phpng.list
$ apt-get update
$ apt-get install php5
</code></pre>

<p><code>``
This wil also install</code>apache2.2<code>and</code>libapache2-mod-php5`.</p>

<p>In order for a Symfony application to work, we will have to add at least the <a href="http://php.net/manual/en/book.intl.php">i18n</a> and the <a href="http://php.net/manual/en/book.mysqlnd.php">mysqlnd</a> extensions.
Elcodi will also need <a href="http://www.imagemagick.org/">imagemagik</a> as the default image resize adapter for the <a href="https://github.com/elcodi/MediaBundle">MediaBundle</a>. Since we will work with MySQL, we also need <code>mysql-server</code>.</p>

<p><strong>NO</strong> For this test, to speed up things a little, we also need <a href="https://github.com/krakjoe/apcu">APCu</a> since we will configure Doctrine <a href="http://docs.doctrine-project.org/en/2.0.x/reference/caching.html#metadata-cache">metadata</a> <a href="http://symfony.com/doc/current/reference/configuration/doctrine.html#configuration-overview">cache</a></p>

<p>Summing it up:</p>

<p>```bash</p>

<pre><code># As root user:
$ apt-get install php5-intl php5-mysqlnd mysql-server imagemagik
</code></pre>

<p>```</p>

<p>Before proceeding, we are making a few assumptions:</p>

<ul>
<li>we created an apache <code>VirtualHost</code> for <code>test.example.com</code>, or whatever domain we&rsquo;d like to use, in <code>/var/www/bamboo</code></li>
<li>/var/www/bamboo is <em>writable</em> for user www-data, which is the user running apache in ubuntu</li>
<li><a href="https://getcomposer.org/download/">composer.phar</a> is available and in PATH</li>
</ul>


<p>Now we can install Elcodi front store as follows:</p>

<p>```bash</p>

<pre><code># Run command as apache user, which in ubuntu is www-data
# We assume that /var/www/bamboo is *writable* for user www-data
$ cd /var/www/bamboo
$ git clone https://github.com/elcodi/bamboo-store.git .
$ composer.phar install -o --no-dev
# Follow parameters in app/config/parameters.yml to configure MySQL access
$ php app/console doctrine:database:create -e=prod
$ php app/console doctrine:schema:create
$ php app/console doctrine:fixtures:load --fixtures=vendor/elcodi/bamboo-fixtures/
$ php app/console assets:install web &amp;&amp; php app/console assetic:dump -e=prod --no-debug
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
