<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: elcodi | Elcodi blog]]></title>
  <link href="http://elcodi-blog.github.io/blog/categories/elcodi/atom.xml" rel="self"/>
  <link href="http://elcodi-blog.github.io/"/>
  <updated>2014-11-18T22:47:07+01:00</updated>
  <id>http://elcodi-blog.github.io/</id>
  <author>
    <name><![CDATA[Elcodi Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elcodi team]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/14/elcodi-team/"/>
    <updated>2014-08-14T10:28:08+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/14/elcodi-team</id>
    <content type="html"><![CDATA[<h5>This is the follow-up of a series of posts</h5>

<ul>
<li><a href="/blog/2014/08/11/a-short-break-for-meditation/">A short break for meditation</a></li>
<li><a href="/blog/2014/08/12/our-roadmap/">Our roadmap</a>.</li>
<li><a href="/blog/2014/08/13/our-goals/">Our goals</a></li>
</ul>


<p>As a final point for what we shared in previous posts, the last but definitely not least element to consider is the <em>team</em>.</p>

<p>Such an ambitious venture needs a committed and visionary crew, and obviously more <em>heads</em> and <em>hands</em>. This is why we are opening job positions for a couple of skilled software artisans willing to join the journey with us. We will soon post the complete description. The company is located in Barcelona, Spain.</p>

<p>We are looking for passionate and inspired artisans that love to craft products to be used by fellow developers and that believe in the potential of a community that grows around an <em>opensource</em> project.</p>

<h2>Community</h2>

<p>The final word is a big <strong>thank you</strong> to all the people that have been supporting us &ndash; by contributing in different forms &ndash; and to whom will do it someday.</p>

<p>We really seek to build something useful for the community and to receive the necessary feedback and support in order to speed up the development and deliver the sound, reliable, flexible product that we have in mind.</p>

<p>As for now, the Elcodi team hopes that you&rsquo;ll get involved with the project and wishes you a great summer break.</p>

<p>Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Our goals]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/13/our-goals/"/>
    <updated>2014-08-13T10:26:56+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/13/our-goals</id>
    <content type="html"><![CDATA[<h5>This is the follow-up of a series of posts</h5>

<ul>
<li><a href="/blog/2014/08/11/a-short-break-for-meditation/">A short break for meditation</a></li>
<li><a href="/blog/2014/08/12/our-roadmap/">Our roadmap</a>.</li>
</ul>


<p>In the folowing weeks we would like to get to a first community stable version. Though last week we placed the initial milestone it is important to define a release plan for the following steps.</p>

<p>We set up a list of <a href="https://github.com/elcodi/elcodi/milestones">milestones</a> to show a proposed roadmap:</p>

<p>```
Version 0.3</p>

<pre><code>- Closed 8 days ago
- 100% complete  0 open  11 closed
</code></pre>

<p>Version 0.4</p>

<pre><code>- Due by August 15, 2014
- 0% complete  0 open  0 closed
</code></pre>

<p>Version 0.5</p>

<pre><code>- Due by August 29, 2014
- 17% complete  5 open  1 closed
</code></pre>

<p>Version 0.6</p>

<pre><code>- Due by September 11, 2014
- 0% complete  2 open  0 closed
</code></pre>

<p>```</p>

<p>This means we will be working on fine-tune our general roadmap and on fixing and refining what we have &ndash; no new features will be developed until we improve stability &ndash; in the hope of clearing things up a bit for developers interested in working with Elcodi foundations.</p>

<p>At this stage, it is possible for new commits to introduce <em>BC breaks</em>. There is an open <a href="https://github.com/elcodi/elcodi/issues/34">issue</a> regarding <code>@api</code> tagging in phpdoc but as suggests in the discussion it is not really needed in the absence of a frozen stable release.</p>

<p>We won&rsquo;t be following strict <a href="http://semver.org/">semantic versioning</a> until we reach a stable release, though we are using <em>patch version</em> for small fixes that do not cause incompatibilities and <em>minor version</em> for changes that <em>could</em> cause BC.</p>

<p>Of course this will change once we approach <code>v1.0</code>, when we will <code>@api</code> freeze core components and enforce full semantic versioning.</p>

<p>Reaching the <code>stable</code> version also means we will release the <em>Market</em>, so that plugins and components can be developed with no fears of major version breaks.</p>

<p>We are on our way there, things look good!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with PHP-NG]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/12/playing-with-php-ng/"/>
    <updated>2014-08-12T18:02:14+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/12/playing-with-php-ng</id>
    <content type="html"><![CDATA[<p>There is a lot going on on the PHP community after Zeev Suraski published an <a href="http://zsuraski.blogspot.com.br/2014/07/benchmarking-phpng.html">article</a> where he ventured on assembling a performance comparison between <a href="https://wiki.php.net/rfc/phpng">PHPNG</a> and <a href="https://github.com/facebook/hhvm">hhvm</a>. Needles to say that the results are promising and the performace benefits of the soon-to-be next PHP major release look impressive.</p>

<p>For the sake of curiosity, we tried to run Elcodi <a href="https://github.com/elcodi/bamboo-store">frontend store</a> on PHPNG and see how a Symfony applicaction would fare.</p>

<p>The test was made on an Amazon <a href="http://aws.amazon.com/ec2/instance-types/#Compute_Optimized">c3.xlarge</a> EC2 instance (<a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/virtualization_types.html">HVM virtualization</a>) running <strong>Ubuntu Server 14.04 LTS</strong></p>

<h2>Installing PHPNG</h2>

<p>There are several options available for installing PHPNG binaries.</p>

<p>The first way is of course to follow the ninja path and <a href="https://wiki.php.net/phpng">compile it on your own</a>. Mind you that compiling PHPNG on an Ubuntu 14.04 is a source of headaches, since it requires <a href="http://www.gnu.org/software/bison/">Bison 2.7</a> but <code>trusty</code> official repositories provide it at version <code>3.0.2</code>, so you&rsquo;ll need to manually download and build it.</p>

<p>The easiest way is of course to add an <code>apt</code> repository providing the package. For the sake of simpliciy we can stuck with apprentice path, katanas can wait for the next bad guy.</p>

<p>Luckily Zend prepared <a href="http://repos.zend.com/zend-server/early-access/phpng/">an apt repo</a> for the <code>amd64</code> arch:</p>

<p>```bash</p>

<pre><code># Remember to run these commands as root, or use sudo
$ wget http://repos.zend.com/zend.key -O- 2&gt; /dev/null | apt-key add -
$ echo "deb [arch=amd64] http://repos.zend.com/zend-server/early-access/phpng/ trusty zend" &gt; /etc/apt/sources.list.d/phpng.list
$ apt-get update
$ apt-get install php5
</code></pre>

<p><code>``
This wil also install</code>apache2.2<code>and</code>libapache2-mod-php5`.</p>

<p>In order for a Symfony application to work, we will have to add at least the <a href="http://php.net/manual/en/book.intl.php">i18n</a> and the <a href="http://php.net/manual/en/book.mysqlnd.php">mysqlnd</a> extensions.
Elcodi will also need <a href="http://www.imagemagick.org/">imagemagik</a> as the default image resize adapter for the <a href="https://github.com/elcodi/MediaBundle">MediaBundle</a>. Since we will work with MySQL, we also need <code>mysql-server</code>.</p>

<p><strong>NO</strong> For this test, to speed up things a little, we also need <a href="https://github.com/krakjoe/apcu">APCu</a> since we will configure Doctrine <a href="http://docs.doctrine-project.org/en/2.0.x/reference/caching.html#metadata-cache">metadata</a> <a href="http://symfony.com/doc/current/reference/configuration/doctrine.html#configuration-overview">cache</a></p>

<p>Summing it up:</p>

<p>```bash</p>

<pre><code># As root user:
$ apt-get install php5-intl php5-mysqlnd mysql-server imagemagik
</code></pre>

<p>```</p>

<p>Before proceeding, we are making a few assumptions:</p>

<ul>
<li>we created an apache <code>VirtualHost</code> for <code>test.example.com</code>, or whatever domain we&rsquo;d like to use, in <code>/var/www/bamboo</code></li>
<li>/var/www/bamboo is <em>writable</em> for user www-data, which is the user running apache in ubuntu</li>
<li><a href="https://getcomposer.org/download/">composer.phar</a> is available and in PATH</li>
</ul>


<p>Now we can install Elcodi front store as follows:</p>

<p>```bash</p>

<pre><code># Run command as apache user, which in ubuntu is www-data
# We assume that /var/www/bamboo is *writable* for user www-data
$ cd /var/www/bamboo
$ git clone https://github.com/elcodi/bamboo-store.git .
$ composer.phar install -o --no-dev
# Follow parameters in app/config/parameters.yml to configure MySQL access
$ php app/console doctrine:database:create -e=prod
$ php app/console doctrine:schema:create
$ php app/console doctrine:fixtures:load --fixtures=vendor/elcodi/bamboo-fixtures/
$ php app/console assets:install web &amp;&amp; php app/console assetic:dump -e=prod --no-debug
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Our roadmap]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/12/our-roadmap/"/>
    <updated>2014-08-12T09:55:48+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/12/our-roadmap</id>
    <content type="html"><![CDATA[<h5>This is the second part of a <a href="/blog/2014/08/11/a-short-break-for-meditation/">previous post</a></h5>

<p>We can proudly state we have a lot to do in the following months.</p>

<p>Question is, what now? Maybe we are 1% done along our path, although &ldquo;done&rdquo; in our world sounds a bit odd since there is always room for improvement.
As long as our issue tracker list gets fed, we will stay hungry for enhancing our code.</p>

<h3>GeoBundle</h3>

<p>One of the most recurring challenges in e-commerce development is the modeling of geographic and administrative divisions. We will put our efforts in designing a simple yet extensible set of entities and relations as well as strategies to implement custom tree structures.</p>

<h3>Rule management</h3>

<p>Rule-based decision logic is ubiquitous in e-commerce applications. A few examples:</p>

<ul>
<li>Which discount coupon can be automatically applied upon entering the checkout process?</li>
<li>Can a particular discount code be applied?</li>
<li>Can two specific products be added to the same cart?</li>
<li>Can a specific product combination trigger a discount, an up-sell or a different offer?</li>
<li>When is it possible to use a specific carrier or payment method?</li>
</ul>


<p>Elcodi <a href="https://github.com/elcodi/rulebundle">RuleBundle</a> aims at solving these kinds of issue.</p>

<h3>Ports and Adapters</h3>

<p>We surely want to promote high-cohesion, loose-coupled software components. Right now we are halfway, as described in the <a href="/blog/2014/08/11/a-short-break-for-meditation/">previous post</a>, but we want to keep improving. A typical usage of P&amp;A would be to decouple Symfony bundles from other significant objects in the domain, or to be able to use Elcodi Cart component without depending on the CustomerBundle.</p>

<h3>Tests</h3>

<p>A great deal of credibility for an open source project is earned by instilling a thorough and sound test methodology. We assume that we&rsquo;ve been lacking on this specific subject, doing our homeworks halfway. This will be addressed both for Elcodi core repository and web applications (<a href="https://github.com/elcodi/bamboo-store">BambooStore</a> and <a href="https://github.com/elcodi/bamboo-admin">BambooAdmin</a>) by raising the coverage of unit and functional tests and start working with acceptance tests for the web apps.</p>

<p>We have not decided yet which toolset we will be using, surely one between <a href="http://docs.behat.org/">Behat3</a> and <a href="http://www.phpspec.net/">PHPSpec2</a>. As always, suggestions are more than welcome!</p>

<h3>PaymentSuite</h3>

<p>The <a href="http://github.com/PaymentSuite">PaymentSuite</a> was conceived and grown inside Elcodi.</p>

<p>It is a payment processing suite developed in Symfony2 which follows our vision of extensibility using adapters and dispatched events to give maximum flexibility to implementers and to decouple specific <code>Cart</code> or <code>Order</code> implementations. It promotes easy and sensible defaults for configurations.</p>

<p>We will take care of the project and will evolve it as the default payment platform. The <a href="http://bamboo.elcodi.com">BambooStore</a> is already using a dummy <a href="https://github.com/PaymentSuite/FreePaymentBundle">free payment</a> method.</p>

<h3>ShippingSuite</h3>

<p>We would like to follow a similar path as the PaymentSuite: a separated and parallel project that does not depend on Elcodi and that can be easy integrated in web applications. Same vision, same resilience philosophy: work with <code>Order</code> or <code>Carrier</code> as <em>adaptees</em>.</p>

<h3>Documentation</h3>

<p>Akin to the phisolophers' stone, sibling of the Holy Grail, the documentation is the most precious gemstone that an open source project should strive to shape. As Symfony2 author <a href="https://twitter.com/fabpot">@fabpot</a> once said, it is the most challenging part of any project.</p>

<p>We are working on the foundation of an <a href="http://elcodi.readthedocs.org">english documentation</a>, localized and translated version will follow later on. This is a list of topics that we will elaborate further:</p>

<ul>
<li>Implementation guidelines. General vision and coding philosophy, style and everything needed for developers wishing to contribute.</li>
<li>Customizations. Craft a project using only Elcodi core. Architectural constraints to keep in mind. Recipes and examples.</li>
<li>Core bundles documentation, including

<ul>
<li>Provisioned Model</li>
<li>Event system rationale and taxonomies</li>
<li>Services</li>
<li>Configuration</li>
<li>Controllers and extensions, where it may apply</li>
</ul>
</li>
<li><a href="https://github.com/elcodi/bamboo-store">Bamboo</a> <a href="https://github.com/elcodi/bamboo-admin">web applications</a> documentation for Symfony and front-end developers: the starting point to develop your e-commerce site.</li>
</ul>


<p>This is going to be an epic effort and the real main entrance to the project for the community. No matter the size of your codebase is, documentation is a key measure of a project success.</p>

<h2>Community</h2>

<p>If documentation should be our <em>diamond</em>, the community should be our <em>propellant</em>. A good community makes a project good.</p>

<p>We started as a small project and we know how demanding it can be to get involved and contribute to the development of an open source based product.</p>

<p>We will take special care of this particular topic, since motivating people and get them involved is essential for our vision: Elcodi was never mean to be a mere code repository, it is a group of visionary people with a clear view in their minds, working together to work out a specific problem.</p>

<p>Taking care of the code means caring for the people that make it possible for the code to be crafted. We are especially interested in helping those who want to learn, so we will soon arrange training and learning mechanisms, both for Symfony and Elcodi.</p>

<p>Get ready to be effective!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A short break for meditation]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/11/a-short-break-for-meditation/"/>
    <updated>2014-08-11T09:05:38+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/11/a-short-break-for-meditation</id>
    <content type="html"><![CDATA[<h5>Puedes encontrar la versión en castellano de este post <a href="/blog/2014/08/04/un-momento-para-reflexionar/">aqui</a>.</h5>

<p>Some of you already know Elcodi, a suite of components built on Symfony2 and Doctrine, aiming to provide maximum flexibility and soundness to e-commerce projects.</p>

<p>We believe that coding should always be entertaining and fun.</p>

<p>This has been our main mission since the beginning and as every ambitious goal you cannot forget that along the journey you might discover an equally important path.</p>

<p>I think that we reached the point where it is important to take a breath, so that in the following days we will publish some posts regarding our views and what we&rsquo;ve been learning, where we will talk about what we have developed so far, our expectations and how we would like to drive the development of each part of the project in the following months.</p>

<h1>The path so far</h1>

<p>Elcodi was born a few months ago in a nice workplace located in Barcelona, Spain. We started designing the platform at the beginning of the year, developed and refactored the pieces up the present day where in my opinion we reached a fairly good balanced point, which is the growing seed of our natural direction.</p>

<h3>ProductBundle, AttributeBundle</h3>

<p>Those components are the home for everything regarding products, categories, manufacturers. Product attribute and options were added in a separate bundle and are the dimensions for working in the product variants space, which is one of the latest features developed and is a required trait for almost every e-commerce software implementation.</p>

<p>Multi-category is also supported for products.</p>

<h3>UserBundle</h3>

<p>Contains the models and tools necessary for working with front-end customers or back-end administrators. A basic authentication &amp; authorization definition was also added, exploiting Symfony Security component.</p>

<h3>CartBundle</h3>

<p>It handles the purchase process, carts and orders. Undoubtedly one of the core pillars of any e-commerce, it has been designed to be simple to get a grasp of and to be overridden almost completely by custom logic. You can read about its internal in the <a href="http://elcodi.readthedocs.org/en/latest/bundles/CartBundle/index.html">official documentation</a>.
Point-in-time snapshots of order states or cart to order transitions are examples of what is provided in CartBundle core services default implementation.</p>

<h3>GeoBundle</h3>

<p>Basic building block for a complete hierarchical aggregation of administrative entities. Due to lack of time, at the present day only <code>Country</code> is modeled as a mapped class, leaving <code>State</code>, <code>Province</code> or <code>City</code> as text fields.</p>

<h3>MediaBundle</h3>

<p>Allows the storage-agnostic handling of media files, such as images. It also controls image resizing and consolidates HTTP headers for media files.</p>

<p>Other bundles are:</p>

<ul>
<li>BannerBundle</li>
<li>LanguageBundle</li>
<li>CurrencyBundle</li>
<li>MenuBundle</li>
<li>NewsletterBundle</li>
<li>ReferralProgramBundle</li>
<li>RuleBundle</li>
</ul>


<h3>BambooStore</h3>

<p>We developed a prototype of a front-end store, the <a href="http://bamboo.elcodi.com/">Bamboo</a>. It is a showcase of Elcodi core features and uses <a href="https://github.com/PaymentSuite">PaymentSuite</a> <a href="https://github.com/PaymentSuite/FreePaymentBundle">FreePaymentBundle</a> as payment method.</p>

<h3>BambooAdmin</h3>

<p>Something we just published. An initial release of a <a href="https://github.com/elcodi/bamboo-admin">backoffice application</a>, providing basic features yet usable. Likewise Elcodi core and the Bamboo frontend, it will be in constant development. Versions and releases of the three projects will stay synchronized, not to break dependencies.</p>

<h3>Implementation</h3>

<p>We know that unfortunately, at least at this stage, our design choices and implementation cannot satisfy everyone. Trying to do it would require a massive effort and can lead to a loss of focus and direction. We prefer stick with our vision despite the errors we would make.</p>

<p>A question we are frequently asked is why we are coupling with Symfony and Doctrine: this is a trade-off we had to settle for trying to maximize acceptance from both developers and end users by enforcing clean, coherent, structured and documented code.</p>

<p>Right now we don&rsquo;t think it is feasable to assemble more layers of indirection to achieve this decoupling. The goal is to involve the Symfony community and work on the feedbacks we will receive from developers who want to build applications with Elcodi. Mind you that Symfony decoupling <em>is</em> possible, since we are trying to follow the <strong>SOLID</strong> path, but the eternal struggle between being different and effective flows to a point of balance that surely will benefit both the project and our users.</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
</feed>
