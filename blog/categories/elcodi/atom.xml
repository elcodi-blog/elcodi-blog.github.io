<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: elcodi | Elcodi blog]]></title>
  <link href="http://elcodi-blog.github.io/blog/categories/elcodi/atom.xml" rel="self"/>
  <link href="http://elcodi-blog.github.io/"/>
  <updated>2015-04-20T15:09:19+02:00</updated>
  <id>http://elcodi-blog.github.io/</id>
  <author>
    <name><![CDATA[Elcodi Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing the Directors in Symfony]]></title>
    <link href="http://elcodi-blog.github.io/blog/2015/04/20/introducing-the-directors-in-symfony/"/>
    <updated>2015-04-20T12:36:03+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2015/04/20/introducing-the-directors-in-symfony</id>
    <content type="html"><![CDATA[<p>Have you ever worked with Entity Managers, Repositories or Factories in Symfony?
Yes, for sure you&rsquo;ve done that. Indeed, if you work with entities in your
project, these type of objects will be your daily, so we want to introduce you a
new concept, born in <a href="http://github.com/elcodi/elcodi">Elcodi project</a> and
created in order to simplify the management of an entity inside a service,
fixture or functional test.</p>

<p>Please, welcome the Director class.</p>

<h3>Director</h3>

<p>Imagine you have a service called <code>CartWrapper</code>. This service is meant to be a
wrapper of a cart, and its behavior is that easy.</p>

<ul>
<li>If you require an existing user&rsquo;s cart, retrieve it from database and return
it</li>
<li>Otherwise, create a new Cart, save it and return it.</li>
</ul>


<p>Let&rsquo;s se a small implementation of such service.</p>

<p>``` php
/<em>*
 * CartWrapper
 </em>/
class cartWrapper
{</p>

<pre><code>/**
 * @var EntityManager
 *
 * Cart entity manager
 */
protected $entityManager;

/**
 * @var CartFactory
 *
 * Cart factory
 */
protected $cartFactory;

/**
 * @var CartRepository
 *
 * Cart repository
 */
protected $cartRepository;

/**
 * Construct
 *
 * @param EntityManager  $entityManager  Entity manager
 * @param CartFactory    $cartFactory    Cart factory
 * @param CartRepository $cartRepository Cart repository
 */
public function __construct(
    EntityManager $entityManager,
    CartFactory $cartFactory,
    CartRepository $cartRepository
)
{
    $this-&gt;entityManager = $entityManager;
    $this-&gt;cartFactory = $cartFactory;
    $this-&gt;cartRepository = $cartRepository;
}

/**
 * Load cart
 *
 * @param UserInterface $user User
 *
 * @return CartInterface
 */
public function loadCart($user)
{
    $userCart = $this
        -&gt;cartRepository
        -&gt;findOneBy([
            'user' =&gt; $user
        ]);

    if (!($userCart instanceof CartInterface)) {

        $newCart = $this
            -&gt;cartFactory
            -&gt;create($user);

        $this
            -&gt;entityManager
            -&gt;persist($newCart);

        $this
            -&gt;entityManager
            -&gt;flush($newCart);

        $userCart = $newCart;
    }

    return $userCart;
}
</code></pre>

<p>}
```</p>

<p>As you can see, this services needs 3 dependencies, and would be difficult to
reduce this number in order to reduce the complexity if the class. This service
is intended to do one single thing.</p>

<p>What is the strategy here? Do you know what the <em>Facade pattern</em> is, right?
Well, the way for solving this amount of classes is creating a new facade called
Director, intended to provide a small set of usable methods simplifying the
management of the entities.</p>

<p>Let&rsquo;s see the implementation of this class. You can find the real implementation
in <a href="https://github.com/elcodi/elcodi">elcodi/core</a>.</p>

<p>``` php
namespace Elcodi\Component\Core\Services;</p>

<p>use Doctrine\Common\Persistence\ObjectManager;
use Doctrine\Common\Persistence\ObjectRepository;
use UnexpectedValueException;</p>

<p>use Elcodi\Component\Core\Factory\Abstracts\AbstractFactory;</p>

<p>/<em>*
 * Class ObjectDirector
 *
 * This object is a facade for these different persistence-related elements
 *
 * * Object Manager
 * * Repository
 * * Factory
 *
 * Allows final user to manage in a simple way an entity or a set of entities.
 * Provides a reduced (but useful) set of methods.
 </em>/
class ObjectDirector
{</p>

<pre><code>/**
 * @var ObjectManager
 *
 * Manager
 */
protected $manager;

/**
 * @var ObjectRepository
 *
 * Repository
 */
protected $repository;

/**
 * @var AbstractFactory
 *
 * Factory
 */
protected $factory;

/**
 * Construct
 *
 * @param ObjectManager    $manager    Manager
 * @param ObjectRepository $repository Repository
 * @param AbstractFactory  $factory    Factory
 */
public function __construct(
    ObjectManager $manager,
    ObjectRepository $repository,
    AbstractFactory $factory
) {
    $this-&gt;manager = $manager;
    $this-&gt;repository = $repository;
    $this-&gt;factory = $factory;
}

/**
 * Finds an object by its primary key / identifier.
 *
 * @param mixed $id The identifier.
 *
 * @return object|null Fetched object
 */
public function find($id)
{
    return $this
        -&gt;repository
        -&gt;find($id);
}

/**
 * Finds all objects in the repository.
 *
 * @return array Set of fetched objects
 */
public function findAll()
{
    return $this
        -&gt;repository
        -&gt;findAll();
}

/**
 * Finds objects by a set of criteria.
 *
 * Optionally sorting and limiting details can be passed. An implementation may throw
 * an UnexpectedValueException if certain values of the sorting or limiting details are
 * not supported.
 *
 * @param array        $criteria
 * @param array|null   $orderBy
 * @param integer|null $limit
 * @param integer|null $offset
 *
 * @return array Set of fetched objects
 *
 * @throws UnexpectedValueException
 */
public function findBy(
    array $criteria,
    array $orderBy = null,
    $limit = null,
    $offset = null)
{
    return $this
        -&gt;repository
        -&gt;findBy(
            $criteria,
            $orderBy,
            $limit,
            $offset
        );
}

/**
 * Finds a single object given a criteria.
 *
 * @param array $criteria The criteria.
 *
 * @return object|null Fetched object
 */
public function findOneBy(array $criteria)
{
    return $this
        -&gt;repository
        -&gt;findOneBy(
            $criteria
        );
}

/**
 * Create a new entity instance, result of the factory creation method
 *
 * @return Object new Instance
 */
public function create()
{
    return $this
        -&gt;factory
        -&gt;create();
}

/**
 * Save the instance into database. Given data can be a single object or
 * an array of objects.
 *
 * This method will persist and flush given object/array of objects
 *
 * @param object|array $data Data to save into database
 *
 * @return object|array Saved data
 */
public function save($data)
{
    if (is_array($data)) {
        foreach ($data as $entity) {
            $this
                -&gt;manager
                -&gt;persist($entity);
        }
    } else {
        $this
            -&gt;manager
            -&gt;persist($data);
    }

    $this
        -&gt;manager
        -&gt;flush($data);

    return $data;
}

/**
 * Remove the instance from the database. Given data can be a single object or
 * an array of objects.
 *
 * This method will remove and flush given object/array of objects
 *
 * @param object|array $data Data to remove from database
 *
 * @return object|array Removed data
 */
public function remove($data)
{
    if (is_array($data)) {
        foreach ($data as $entity) {
            $this
                -&gt;manager
                -&gt;remove($entity);
        }
    } else {
        $this
            -&gt;manager
            -&gt;remove($data);
    }

    $this
        -&gt;manager
        -&gt;flush($data);

    return $data;
}
</code></pre>

<p>}
```</p>

<p>This implementation provides us a simple set of actions for our entities (maybe
the most used).</p>

<ul>
<li>find(&hellip;)</li>
<li>findAll()</li>
<li>findBy(&hellip;)</li>
<li>findOneBy(&hellip;)</li>
<li>create()</li>
<li>save()</li>
<li>remove()</li>
</ul>


<p>This implementation is so useful for many scenarios, but in our case what we
found is that using Directors, our tests are reduced in many ways (less lines of
code, less complexity, more effectiveness), and the fixtures are totally
improved, focusing on the most important thing: our business logic.</p>

<h3>Directors as a service</h3>

<p>To use a Director as a service you need to define your repository as a service
as well, assuming that your factory is already a service called <code>cart_factory</code>
and assuming as well that we will work with the default entity manager
<code>doctrine.orm.default_entity_manager</code> (not a good practice, but let&rsquo;s suppose it
is in this example).</p>

<p>Let&rsquo;s see how to define your repository as a service.</p>

<p>``` yml
services:</p>

<pre><code>#
# Doctrine Repository
#
cart_repository:
    class: Doctrine\Common\Persistence\ObjectRepository
    factory:
        - @elcodi.provider.repository
        - getRepositoryByEntityNamespace
    arguments:
        - My\Cart\Namespace
</code></pre>

<p>```</p>

<p>You will find the service <code>elcodi.provider.repository</code> inside the Bundle
<code>elcodi/core-bundle</code>. This bundle is not coupled to any Elcodi functionality so
you can use it in your own projects as a set of isolated features.</p>

<p>Finally, let&rsquo;s create the Director definition by using the factory pattern.</p>

<p>``` yml
services:</p>

<pre><code>#
# Directors
#
elcodi.director.cart:
    class: Elcodi\Component\Core\Services\ObjectDirector
    arguments:
        - @doctrine.orm.default_entity_manager
        - @cart_repository
        - @cart_factory
</code></pre>

<p>```</p>

<p>Take in account that each entity will have it&rsquo;s own Director instance, so this
is why we use the factory pattern here.</p>

<p>How can we use the new Director service in our first <code>CartWrapper</code>
implementation by changing and improving the services dependencies? Let&rsquo;s do
that!</p>

<p>``` php
/<em>*
 * CartWrapper
 </em>/
class cartWrapper
{</p>

<pre><code>/**
 * @var ObjectDirector
 *
 * Cart director
 */
protected $cartDirector;

/**
 * Construct
 *
 * @param ObjectDirector $cartDirector Cart Director
 */
public function __construct(ObjectDirector $cartDirector)
{
    $this-&gt;cartDirector = $cartDirector;
}

/**
 * Load cart
 *
 * @param UserInterface $user User
 *
 * @return CartInterface
 */
public function loadCart($user)
{
    $userCart = $this
        -&gt;cartDirector
        -&gt;findOneBy([
            'user' =&gt; $user
        ]);

    if (!($userCart instanceof CartInterface)) {

        $newCart = $this
            -&gt;cartDirector
            -&gt;create($user);

        $this
            -&gt;cartDirector
            -&gt;save($newCart);

        $userCart = $newCart;
    }

    return $userCart;
}
</code></pre>

<p>}
```</p>

<p><a href="http://github.com/elcodi/elcodi">Elcodi</a> is fully based on the usage of
Directors. This does <strong>not</strong> mean that we must use Directors everywhere.
Sometimes you need to use only one of the wrapped objects, and in that case you
must inject them one by one, so please, before using this new object think about
it, think about the pros and the contras and be responsible about your
implementation.</p>

<p>Don&rsquo;t hesitate to comment about what do you think about this feature.</p>

<p>Have a nice day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First stable release]]></title>
    <link href="http://elcodi-blog.github.io/blog/2015/04/04/first-stable-release/"/>
    <updated>2015-04-04T19:51:28+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2015/04/04/first-stable-release</id>
    <content type="html"><![CDATA[<p>Hi there everyone.</p>

<p>The Elcodi core team is glad to announce that next June 1st, we will tag the
first stable release of the project (Elcodi will be still based on Symfony, you
know how much we like Symfony and its community&hellip;)</p>

<h3>Elcodi v1.0</h3>

<ul>
<li>Until this day, we&rsquo;ll finish stabilization of all packages</li>
<li>We will work so hard to finish a documentation for all of you</li>
<li>All available features will be covered by unit, functional and behavioral
tests, using PHPUnit and Behat 3.0</li>
<li>After <code>v1.0</code> we will start working on <code>v3.0</code>. This new version will be
released next November in order to be compatible with Symfony <code>v3.*</code>. It means
as well that this new version will introduce some BC Break, of course.</li>
</ul>


<p>So, we have less than 2 months to stabilize Elcodi package, and we need your
help.</p>

<p>Some days ago, we announced the
<a href="http://blog.elcodi.io/blog/2015/03/03/elcodi-bug-hunting/">Elcodi Bug Hunting</a>,
remember? Well, initially this contest was during this past March, but we have
decided to enlarge the period of the contest until June 1st, the day of the
release.</p>

<p>Until now, we have received some help from some people. Special thanks for them.</p>

<ul>
<li><a href="https://github.com/elcodi/elcodi/pulls?q=is%3Apr+is%3Aclosed+author%3Acordoval">cordoval</a></li>
<li><a href="https://github.com/elcodi/elcodi/pulls?q=is%3Apr+is%3Aclosed+author%3Ajaviereguiluz">javiereguiluz</a></li>
<li><a href="https://github.com/elcodi/elcodi/pulls?q=is%3Apr+is%3Aclosed+author%3Ahacfi">hacfi</a></li>
<li><a href="https://github.com/elcodi/elcodi/pulls?q=is%3Apr+is%3Aclosed+author%3Amickaelandrieu">mickaelandrieu</a></li>
<li><a href="https://github.com/elcodi/elcodi/pulls?q=is%3Apr+is%3Aclosed">And many more</a></li>
</ul>


<p>But we need some extra help in order to accomplish our goal.</p>

<h3>Win the MacBookPro</h3>

<p>Easy and super-fast. Do you want to win the MacBookPro? Easy, just help us with
some fast actions and you will be able to win the
<strong>Apple Macbook Pro 2014 Retina</strong> (of course, with an Android/Ubuntu/Windows
alternative or any geeky stuff with same price)</p>

<ul>
<li>Follow us on twitter (@elcodi_dev)</li>
<li>Give <a href="http://github.com/elcodi/elcodi">Elcodi repository</a> a star</li>
<li>Give <a href="http://github.com/elcodi/bamboo">Bamboo repository</a> a star</li>
<li>Give <a href="http://github.com/elcodi/docs">Elcodi docs repository</a> a star</li>
<li>Make a funny tweet about it, for example, sharing this post or trolling us
a little bit :)</li>
</ul>


<p>After that you will have 5 points, enough to access to the MacBookPro raffle.</p>

<h3>A little bit more&hellip;</h3>

<p>Are you interested in E-commerce and do you like Symfony? Well, there are some
extra things you can do to help. You can win the battle and win the
<strong>Ipad Air</strong></p>

<ul>
<li>[Download, install and try Bamboo)[<a href="http://elcodi.io/docs/quick-start.html">http://elcodi.io/docs/quick-start.html</a>)</li>
<li>If you find any kind of issue, please open an Issue in our repository and
report it to us.</li>
<li>Oh, you know how to fix it? That&rsquo;s wonderful! Create a Pull Request and be a
collaborator of the project!</li>
<li>We are elaborating a documentation&hellip; maybe you could help us looking for some
typo issues or creating new content&hellip;</li>
<li>Have you tried Elcodi and you want to express the world how much excited you
are? Great! Do a post in your blog and explain us what did you create with
Elcodi!</li>
<li>Elcodi is an international project, so we are looking for people able to
translate Bamboo to all languages (even in Klingon and Esperanto!). Are you
proud of your language? Well, help other people of your country for using this
project :)</li>
</ul>


<p>All this actions will give you some extra points.</p>

<p>Of course, if you need help, all Elcodi Core team will gladly help you. Just
enter <a href="https://gitter.im/elcodi/elcodi">Elcodi Gitter room</a> and say hello :)</p>

<p>Have a nice day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elcodi changes its technology]]></title>
    <link href="http://elcodi-blog.github.io/blog/2015/04/01/elcodi-changes-its-technology/"/>
    <updated>2015-04-01T16:45:38+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2015/04/01/elcodi-changes-its-technology</id>
    <content type="html"><![CDATA[<p>This is an official statement from Elcodi Team.</p>

<blockquote><p>This post was an April Fools joke. Elcodi will be based on Symfony for a long
time. We love Symfony.</p></blockquote>

<p>After some nice months using Symfony in our project Elcodi, and after many
reflections on how to increase the project quality, we&rsquo;re proud to announce that
we are moving to Ruby on Rails.</p>

<p>Until version <code>v0.6.*</code> we will continue evolving our code for these people who
is nowadays using Elcodi in their projects, but after that, we will move all
our code to Ruby.</p>

<p><img src="http://planetargon.com/images/rails-love.png" alt="We love rails" /></p>

<p>If you need some information, feel free to keep in touch with us in our
<a href="https://gitter.im/elcodi/elcodi">Gitter account</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elcodi Bug Hunting]]></title>
    <link href="http://elcodi-blog.github.io/blog/2015/03/03/elcodi-bug-hunting/"/>
    <updated>2015-03-03T16:19:05+01:00</updated>
    <id>http://elcodi-blog.github.io/blog/2015/03/03/elcodi-bug-hunting</id>
    <content type="html"><![CDATA[<p>Hi everyone!</p>

<p>It&rsquo;s been a long time since our last meeting! We&rsquo;ve been very busy here in
Elcodi HQ this months, focusing on the following events. And here we are to tell
you!</p>

<h2>New members</h2>

<p>Our team has grown, and we&rsquo;ll be proud to introduce our two new members properly
to you soon. For now, welcome <a href="//twitter.com/tonipinel">@tonipinel</a> and
<a href="//twitter.com/rogergros">@rogergros</a>!</p>

<h2>It&rsquo;s beta time!</h2>

<p>These last weeks have been awesome here! After a lot of working hours, coffees
and pizzas (and some beers), we&rsquo;re proud and happy to announce we&rsquo;ve reached
<strong>beta status in Elcodi</strong> and new version: <strong>v0.5.0</strong>.</p>

<p>This is working. This is really working! Now it&rsquo;s time to test it, massively.</p>

<h2>Elcodi Bug Hunting</h2>

<p>In order to make the community participant, we&rsquo;ll arrange something really
amazing: <strong>A contest!</strong>. We have named it <em>Elcodi Bug Hunting</em> and will be
available during March 2015.</p>

<blockquote><p>Edit: This contest will be opened until June 1st, the day of our first
release. It makes sense to increase the contest interval in order to get more
changes and more competition :)</p></blockquote>

<p>Let us explain what&rsquo;s this all about!</p>

<h3>The contest</h3>

<p><img src="https://cloud.githubusercontent.com/assets/170968/6443700/f152ea5e-c0f8-11e4-9acb-63c5f817b7a8.jpg" alt="bugs-everywhere" /></p>

<p>Our goal is to find and fix as many bugs as possible during the beta period, and
to grow more as a community.</p>

<h3>The prices</h3>

<ul>
<li>Apple Macbook Pro 2014 Retina 13"</li>
<li>Apple Ipad Air 16Gb</li>
</ul>


<h3>Scoring</h3>

<ul>
<li>Earn points by participating in <em>Elcodi Bug Hunting</em>.</li>
<li>Earn 5 points or more to access the <strong>Macbook Pro</strong> raffle.</li>
<li>The more points you have, the more chances to win the raffle.</li>
<li>Get the highest score and win an <strong>Ipad Air</strong>!</li>
</ul>


<h4>The easypick</h4>

<p>Social interaction is important to us, because that&rsquo;s the way we&rsquo;re reaching and
hearing from you. And we want <strong>you</strong> to be part of this!</p>

<p>That&rsquo;s why we&rsquo;ll reward you for:</p>

<ul>
<li>Star on Github (<a href="//github.com/elcodi/elcodi">elcodi/elcodi</a>) &ndash; <em>1 point</em></li>
<li>Star on Github (<a href="//github.com/elcodi/bamboo">elcodi/bamboo</a>) &ndash; <em>1 point</em></li>
<li>Follow on Twitter (<a href="//twitter.com/elcodi_dev">@elcodi_dev</a>) &ndash; <em>1 point</em></li>
<li>Twitter mention &ndash; <em>1 point (max 2)</em></li>
</ul>


<h4>The collaborator</h4>

<p>The more eyes looking at our code, the better chance to improve! Collaboration
is vital for an OpenSource project like this, and we&rsquo;re open for suggestions and
contributions. We want Elcodi to be helpful to you.</p>

<p>Give a try and clone <a href="//github.com/elcodi/elcodi">Elcodi project</a> or
<a href="//github.com/elcodi/bamboo">our store Bamboo</a>, enter
<a href="//gitter.im/elcodi/elcodi">Elcodi at Gitter</a>, discuss with us and participate.
That&rsquo;s OpenSource at it&rsquo;s finest!</p>

<p>We will appreciate:</p>

<ul>
<li>Open Github issue &ndash; <em>2 points</em></li>
<li>Creating a Pull Request &ndash; <em>2 points</em></li>
<li>Accepted Pull Request &ndash; <em>5 points</em></li>
<li>Contributors up to present day &ndash; <em>10 points</em></li>
</ul>


<h4>The Best of the best</h4>

<p>We encourage those who work hard. That&rsquo;s why we&rsquo;ll distribute some points
discretely based on:</p>

<ul>
<li>Best 5 pull requests &ndash; <em>5 points</em></li>
<li>Best 3 tweets &ndash; <em>15, 10, 5 points</em></li>
<li>Best 3 troll-tweets &ndash; <em>15, 10, 5 points</em></li>
</ul>


<h3>The jury</h3>

<ul>
<li>Marc Morera (<a href="//twitter.com/mmoreram">@mmoreram</a>)</li>
<li>Aldo Chiecchia (<a href="//twitter.com/alch">@alch</a>)</li>
<li>Berny Cantos (<a href="//twitter.com/xphere">@xphere</a>)</li>
<li>Toni Pinel (<a href="//twitter.com/tonipinel">@tonipinel</a>)</li>
<li>Roger Gros (<a href="//twitter.com/rogergros">@rogergros</a>)</li>
</ul>


<h2>Let&rsquo;s <del>Go</del> PHP!!</h2>

<p>Feel free to try the platform, test it and find security vulnerabilities and
bugs. During this month we will improve current features and we will focus on
the quality of the code, with small refactors and more (and more) tests.</p>

<p>We will work as well with the documentation, so feel free to help us on that
task :)</p>

<p>Don&rsquo;t hesitate to get in touch with us and enjoy Elcodi! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We have evolved]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/28/we-have-evolved/"/>
    <updated>2014-08-28T11:42:47+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/28/we-have-evolved</id>
    <content type="html"><![CDATA[<p>You might say that we&rsquo;ve evolved.</p>

<p>An evolution ought to be seen as a positive thing, and ours is no exception.
At first, we had serious doubts about the nature of our project. One of the
questions we kept asking ourselves was what factors should we consider in
choosing whether and when to engage external projects or libraries, and we
believe we made the right decision. In fact, that decision brought us forward in
a big way toward defining ourselves.</p>

<p>Flexible e-commerce components for Symfony2</p>

<p>Anyway, this phrase is actually very ambiguous, as we could be referring to
Symfony as a set of PHP components or as the Framework (I&rsquo;ve always wondered
why they have the same name&hellip; it causes a lot of confusion).</p>

<p>That&rsquo;s why we wanted to reflect a bit, starting from the code itself. Do we want
to use the Symfony Framework or the Symfony Components? The answer seemed to
emerge spontaneously. We want to work with the Symfony components, but we also
want to propose bundles that use the framework.</p>

<p>This was the origin of this commit.</p>

<p><a href="https://github.com/elcodi/elcodi/pull/239">https://github.com/elcodi/elcodi/pull/239</a></p>

<p>We have only just planted the seed with this refactoring. We have realized, even
more, the importance of having both functional testing and unit testing (unit
tests are almost all for the components, while functional tests are for the
bundles). This needs more work, but at least we have lifted this project to a
level at which we truly feel comfortable. It&rsquo;s an excellent starting point for
a long and exciting path ahead.</p>

<p>This change has resulted in some collateral damage, as it has changed the path
of our bundles, meaning that the &ldquo;subtree split&rdquo; has resulted in totally new
repositories beginning with the first commit after refactoring. This means that
all tags prior to version 0.3.0 have been lost, so we apologize to those who
have started to tinkle with our new bundles. You&rsquo;ll now need to adapt to version
~0.3 and check that everything&rsquo;s working.</p>

<p>We are available for any questions or concerns.</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
</feed>
