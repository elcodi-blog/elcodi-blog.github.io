<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: elcodi | Elcodi blog]]></title>
  <link href="http://elcodi-blog.github.io/blog/categories/elcodi/atom.xml" rel="self"/>
  <link href="http://elcodi-blog.github.io/"/>
  <updated>2015-10-20T13:14:27+02:00</updated>
  <id>http://elcodi-blog.github.io/</id>
  <author>
    <name><![CDATA[Elcodi Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Meet Deliberry]]></title>
    <link href="http://elcodi-blog.github.io/blog/2015/10/19/meet-deliberry/"/>
    <updated>2015-10-19T17:53:22+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2015/10/19/meet-deliberry</id>
    <content type="html"><![CDATA[<p>As an open source project, whenever a project touches success using our
technology, our pride feelings are indescribable. Each project based on Elcodi
means a different and unique story for us. Each one as much important as the
best.</p>

<p>But in this case, we want to talk about one of our first projects using Elcodi
as the main technology. And we want to do that because we really love this
company, and the way they want to really change the world. Like we want.</p>

<p>The name of the project is <a href="http://deliberry.com">Deliberry</a>, and they are
placed in Barcelona.</p>

<p><img src="http://elcodi.io/img/showcase/deliberry.png" alt="Deliberry" /></p>

<p>They deliver your supermarket purchases in less than one hour. This is great,
right? They used Elcodi components as the main technology, and our Bamboo
project as the basis for their front engine and their admin site.</p>

<p>They started using Elcodi some months ago, when we were working on version
<code>v0.5.0</code>. These days, Elcodi was very unstable, so day after day, we introduced
new changes, affecting strongly the BC standard. Even with that scenario,
Deliberry has been always our first tester for new versions, working side by
side with us, and reporting us as many issues as possible.</p>

<p>And believe us&hellip; For a new open source project&hellip; this is the best gift we&rsquo;ve
had.</p>

<h2>Changing the world with us</h2>

<p>One of the biggest things that makes this project really awesome, is that they
are really changing the world.</p>

<p>We are very used of thinking that, for a company than simply delivers food,
changing the world means delivering it faster and better. Of course, this is
great, but your are only changing part of the world, and probably, the part than
less need a change.</p>

<p>Deliberry works side by side with an organization name
<a href="http://www.caritas.es/">Cáritas</a>. This organization helps people suffering of
social exclusion (yes, in Spain we have a lot of this, sadly). People without
many resources, that cannot enjoy whether the purchase is fast or not: they
cannot even buy anything.</p>

<p>Deliberry help this organization by hiring people from this organization for
buying people&rsquo;s food, or delivering it. And everything, in less than one hour.</p>

<p>Isn&rsquo;t it fantastic?</p>

<p><a href="http://www.youtube.com/watch?v=6sXPaFB93is" title="Deliberry TV1"><img src="http://img.youtube.com/vi/6sXPaFB93is/0.jpg" alt="Deliberry TV1" /></a></p>

<p>Deliberry is our hero. Thanks for being part of the Elcodi history, and keep
changing the world, we will try to do the same :)</p>

<h2>Try Deliberry</h2>

<p>At the moment, Deliberry is only working on Barcelona, but if you are living
here, we encourage you to try it. And even better, we want to give you a nice
discount for your next purchase.</p>

<p>Use the discount code <strong><em>ELCODI</em></strong>, and with a minimum purchase of 40€ you will
recieve 10€ of discount. And if is your first time, the delivery fees will be
free!</p>

<p>Hurry up! You can use this discount during this year :)</p>

<h2>Change the world too</h2>

<p>We are looking for projects that want to change the world, somehow, somewhere.
If you have in mind one of them, consider the usage of Elcodi. Our biggest
effort goes to providing happiness and joy between E-commerce developers,
mastering amazing projects full of creativity and innovation.</p>

<p>Only this scenario turns on the best projects ever, and only the best projects
ever can change this world.</p>

<p>So&hellip; we are looking for you.<br/>
<a href="http://elcodi.io">Join us!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Elcodi]]></title>
    <link href="http://elcodi-blog.github.io/blog/2015/07/07/install-elcodi/"/>
    <updated>2015-07-07T12:59:39+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2015/07/07/install-elcodi</id>
    <content type="html"><![CDATA[<p>In order to decrease the time of installation of Elcodi, and with our new Beta
release</p>

<p><a href="https://github.com/elcodi/bamboo/blob/master/CHANGELOG-1.0.md#v100-beta3-10-07-2015">Bamboo v1.0.0-beta3</a><br/>
<a href="https://github.com/elcodi/elcodi/blob/master/CHANGELOG-1.0.md#v100-beta3-10-07-2015">Elcodi v1.0.0-beta3</a></p>

<p>we&rsquo;ve been working on how fast you can create a new shop in your localhost and
start tuning it. It is important right?</p>

<h2>New elcodi:install command</h2>

<p>Elcodi is Symfony based. This means that to make it work you need to execute
some commands in order to do some common actions (create database, update
schema, populate fixtures&hellip;)</p>

<p>To improve this step, we have created a new console command in order to decrease
this installation time and the number of steps required to play with your
localhost.</p>

<p>4 steps to rule them all, and less than 3 minutes to start with Elcodi.</p>

<p><code>bash
$ curl -s http://getcomposer.org/installer | php
$ php composer.phar create-project elcodi/bamboo bamboo -sdev
$ cd bamboo/
$ php app/console elcodi:install
</code></p>

<p>As soon as Bamboo is installed, you can create a temporary server by using the
PHP built-in server</p>

<p><code>bash
$ php app/console server:run
</code></p>

<p>And check your Bamboo installation in your browser by accessing to
<code>http://localhost:8000</code>.</p>

<h2>GD instead of ImageMagick</h2>

<p>Because we have implemented some needs using adapters, we have implemented a new
image resize adapter based on the PHP GD engine. The good thing is that GD is
already installed in all standard PHP versions, so you don&rsquo;t really need to
install any extra library.</p>

<p>This new adapter has been proposed and accepted as the default one, and of
course, ImageMagick adapter can be still used by changing the configuration
value.</p>

<p>``` yml
elcodi_media:</p>

<pre><code>images:
    resize:
        adapter: elcodi.media_resize.imagemagick
</code></pre>

<p>```</p>

<h2>Location repository</h2>

<p>In Elcodi you can populate new countries. With this new installation command,
and by using <code>--country</code> option, you can add already generated countries in
seconds. You can see available pregenerated countries in our
<a href="https://github.com/elcodi/LocationDumps">LocationDumps</a> repository. We will
generate all countries over time.</p>

<blockquote><p>If you want to use the demo application, make sure you install Spain. All
already built addresses are from Spain. Otherwise, feel free to build your
Location database as you need.</p></blockquote>

<p>Imagine you want to install France and Italy. Well, you should do that</p>

<p><code>bash
$ php app/console elcodi:install --country=FR --country=IT
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elcodi beta is here]]></title>
    <link href="http://elcodi-blog.github.io/blog/2015/06/18/elcodi-beta-is-here/"/>
    <updated>2015-06-18T13:42:16+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2015/06/18/elcodi-beta-is-here</id>
    <content type="html"><![CDATA[<p>&hellip; and we did it.</p>

<p>It is something really amazing. We&rsquo;ve finally reached our first Beta stage.
After more than 1 year of hard and non-stop work, we have tagged our first beta
version in order to provide some stability to all Elcodi installations.</p>

<h2>What means Beta</h2>

<p>If you read some literature about software versions, you&rsquo;ll find that there is
always a set of pre-defined steps based on the stability of the project</p>

<ul>
<li>v1.0.0-alpha1: Hey developer! We&rsquo;re building it but we&rsquo;re not ready to be used
in production. Possible big BC breaks, incremental set of features and less
communication. Careful!</li>
<li>v1.0.0-beta1: Hey developer! Well, we think that we&rsquo;re done. We think that
we&rsquo;re done with features so we aim to stabilize the version. Testing and
documentation is part of the development here. C'mon!</li>
<li>v1.0.0-RC1: Hey developer! Tested enough, so&hellip; how about make this package
stable? Lets purpose a set of BC promises and let&rsquo;s make possible the usage of
<code>^1.0</code> in composer.</li>
<li>v1.0.0: Hey everyone! We&rsquo;re here! This package is stable. We think that we&rsquo;ve
no many issues here, so don&rsquo;t hesitate to using us in your projects.</li>
</ul>


<p>Of course, some people or projects will understand these steps in a different
way, but in Elcodi, this is the idea.</p>

<h2>Communication</h2>

<p>For the last months, we have been focused on developing.</p>

<ul>
<li>elcodi/elcodi

<ul>
<li>1.616 commits</li>
<li>239 Issues closed</li>
<li>586 PR accepted</li>
<li>21 Contributors</li>
</ul>
</li>
<li>elcodi/bamboo

<ul>
<li>1.763 commits</li>
<li>49 Issues closed</li>
<li>450 PR accepted</li>
<li>21 Contributors</li>
</ul>
</li>
</ul>


<p>Of course, developing have been our priority and we&rsquo;ve lost the opportunity of
showing the world our great work. Our communication has been poor and
insufficient because of our lack of time. And we know that this aspect of the
project need to change.</p>

<p>Since today, we&rsquo;ll return with our &ldquo;A week of Elcodi&rdquo;. Each week we will
document all our work. Each project using Elcodi will have a lot of feedback.
Each change affecting the BC compatibility will be announced in a properly way
and since today, we will take care about all projects by creating and promoting
our own community events and User Groups around the world.</p>

<p>Remember all the core team is in <a href="https://gitter.im/elcodi/elcodi">Gitter</a> so if
you have doubts and you want to talk about any aspect of the project, don&rsquo;t
hesitate to talk with us :)</p>

<p>Follow us on <a href="https://twitter.com/elcodi_dev">Twitter</a> to join us!</p>

<h2>Reaching RC</h2>

<p>We&rsquo;re done with features. We have developed a nice Plugin infrastructure that
will be documented as soon as possible, in order to externalize all extra
implementations. Our maximum priority right now is to finish what we begin
one year ago.</p>

<p>The project is pretty stable, being used in some projects in production, selling
and working properly. For example <a href="http://deliberry.com">deliberry.com</a>, a
company based in Barcelona that is actually growing day by day, based in Elcodi.</p>

<p>We&rsquo;re proud!</p>

<blockquote><p>We&rsquo;ll have soon a great directory with projects based on Elcodi, so if your
company is Elcodi based, please, show us your case :)</p></blockquote>

<p>So, for the next 2 months, we will support all projects based on Elcodi, with
a big testing layer with more Unit, Functional, Behavioral and Response testing.</p>

<p>We will add tons of documentation showing how to do every single thing inside
the Elcodi world and finally, as soon Elcodi is stable enough, then we will
tag the first RC version.</p>

<h2>Test us!</h2>

<p>We are Open Source, and supporting us will never mean paying us. Elcodi is free
because is born from and for the community, so the best way to promote Elcodi is
talking about it.</p>

<p>Elcodi is not only E-commerce and Symfony, is about developing, sharing,
enjoying and improving. Each member of the community is important and we will
demonstrate this not only with words but with a strong layer of support.</p>

<p>As soon as the community will grow, we will lead the creation of user groups
around the world. We will show how we work and what using Elcodi is not only an
experience but a way of understanding the E-commerce development.</p>

<p><a href="http://elcodi.io/docs/quick-start/">Test us now</a> and share your thoughts, your
non-valuable feedback, or <a href="https://gitter.im/elcodi/elcodi">just say hello</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Translating Elcodi]]></title>
    <link href="http://elcodi-blog.github.io/blog/2015/05/12/translating-elcodi/"/>
    <updated>2015-05-12T11:01:20+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2015/05/12/translating-elcodi</id>
    <content type="html"><![CDATA[<p>Hi everyone.</p>

<p>This is a call to the multi language fairy. Our project is still learning some
new and nice languages. Bamboo talks English, Spanish, Catalan and some French,
but we want to be a project for everyone in this world, no matter where you
live, no matter what you talk.</p>

<p>We are looking for some contributors to maintain some other interesting
translations. Indeed, all of them!</p>

<ul>
<li>Euskal</li>
<li>Galego</li>
<li>Deutsch</li>
<li>Italiano</li>
<li>Português</li>
<li>Nederlands</li>
<li>&hellip;</li>
</ul>


<p>We are looking for smaller translations, for those shops that want to provide
specific and local languages.</p>

<ul>
<li>Irish</li>
<li>Andalúz</li>
<li>Sardu</li>
<li>Esperanto</li>
<li>&hellip;</li>
</ul>


<p>Finally we are looking for some popular and fictitious languages. We want to be
for everyone, remember?</p>

<ul>
<li>Klingon</li>
<li>Elvish</li>
<li>Dwarf language</li>
<li>Lorem Ipsum</li>
<li>Random language</li>
<li>&hellip;</li>
</ul>


<p>If you have any interest in translate the application here, please tell us
something nice <a href="https://github.com/elcodi/bamboo/issues/450">here</a> or keep in
touch with us at <a href="http://gitter.im/elcodi/elcodi">gitter</a>.</p>

<p>Enjoy your week :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing the Directors in Symfony]]></title>
    <link href="http://elcodi-blog.github.io/blog/2015/04/20/introducing-the-directors-in-symfony/"/>
    <updated>2015-04-20T12:36:03+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2015/04/20/introducing-the-directors-in-symfony</id>
    <content type="html"><![CDATA[<p>Have you ever worked with Entity Managers, Repositories or Factories in Symfony?
Yes, for sure you&rsquo;ve done that. Indeed, if you work with entities in your
project, these type of objects will be your daily, so we want to introduce you a
new concept, born in <a href="http://github.com/elcodi/elcodi">Elcodi project</a> and
created in order to simplify the management of an entity inside a service,
fixture or functional test.</p>

<p>Please, welcome the Director class.</p>

<h3>Director</h3>

<p>Imagine you have a service called <code>CartWrapper</code>. This service is meant to be a
wrapper of a cart, and its behavior is that easy.</p>

<ul>
<li>If you require an existing user&rsquo;s cart, retrieve it from database and return
it</li>
<li>Otherwise, create a new Cart, save it and return it.</li>
</ul>


<p>Let&rsquo;s see a small implementation of such service.</p>

<p>``` php
/<em>*
 * CartWrapper
 </em>/
class cartWrapper
{</p>

<pre><code>/**
 * @var EntityManager
 *
 * Cart entity manager
 */
protected $entityManager;

/**
 * @var CartFactory
 *
 * Cart factory
 */
protected $cartFactory;

/**
 * @var CartRepository
 *
 * Cart repository
 */
protected $cartRepository;

/**
 * Construct
 *
 * @param EntityManager  $entityManager  Entity manager
 * @param CartFactory    $cartFactory    Cart factory
 * @param CartRepository $cartRepository Cart repository
 */
public function __construct(
    EntityManager $entityManager,
    CartFactory $cartFactory,
    CartRepository $cartRepository
)
{
    $this-&gt;entityManager = $entityManager;
    $this-&gt;cartFactory = $cartFactory;
    $this-&gt;cartRepository = $cartRepository;
}

/**
 * Load cart
 *
 * @param UserInterface $user User
 *
 * @return CartInterface
 */
public function loadCart($user)
{
    $userCart = $this
        -&gt;cartRepository
        -&gt;findOneBy([
            'user' =&gt; $user
        ]);

    if (!($userCart instanceof CartInterface)) {

        $newCart = $this
            -&gt;cartFactory
            -&gt;create($user);

        $this
            -&gt;entityManager
            -&gt;persist($newCart);

        $this
            -&gt;entityManager
            -&gt;flush($newCart);

        $userCart = $newCart;
    }

    return $userCart;
}
</code></pre>

<p>}
```</p>

<p>As you can see, this services needs 3 dependencies, and would be difficult to
reduce this number in order to reduce the complexity of the class. This service
is intended to do one single thing.</p>

<p>What is the strategy here? Do you know what the <em>Facade pattern</em> is, right?
Well, the way for solving this amount of classes is creating a new facade called
Director, intended to provide a small set of usable methods simplifying the
management of the entities.</p>

<p>Let&rsquo;s see the implementation of this class. You can find the real implementation
in <a href="https://github.com/elcodi/elcodi">elcodi/core</a>.</p>

<p>``` php
namespace Elcodi\Component\Core\Services;</p>

<p>use Doctrine\Common\Persistence\ObjectManager;
use Doctrine\Common\Persistence\ObjectRepository;
use UnexpectedValueException;</p>

<p>use Elcodi\Component\Core\Factory\Abstracts\AbstractFactory;</p>

<p>/<em>*
 * Class ObjectDirector
 *
 * This object is a facade for these different persistence-related elements
 *
 * * Object Manager
 * * Repository
 * * Factory
 *
 * Allows final user to manage in a simple way an entity or a set of entities.
 * Provides a reduced (but useful) set of methods.
 </em>/
class ObjectDirector
{</p>

<pre><code>/**
 * @var ObjectManager
 *
 * Manager
 */
protected $manager;

/**
 * @var ObjectRepository
 *
 * Repository
 */
protected $repository;

/**
 * @var AbstractFactory
 *
 * Factory
 */
protected $factory;

/**
 * Construct
 *
 * @param ObjectManager    $manager    Manager
 * @param ObjectRepository $repository Repository
 * @param AbstractFactory  $factory    Factory
 */
public function __construct(
    ObjectManager $manager,
    ObjectRepository $repository,
    AbstractFactory $factory
) {
    $this-&gt;manager = $manager;
    $this-&gt;repository = $repository;
    $this-&gt;factory = $factory;
}

/**
 * Finds an object by its primary key / identifier.
 *
 * @param mixed $id The identifier.
 *
 * @return object|null Fetched object
 */
public function find($id)
{
    return $this
        -&gt;repository
        -&gt;find($id);
}

/**
 * Finds all objects in the repository.
 *
 * @return array Set of fetched objects
 */
public function findAll()
{
    return $this
        -&gt;repository
        -&gt;findAll();
}

/**
 * Finds objects by a set of criteria.
 *
 * Optionally sorting and limiting details can be passed. An implementation may throw
 * an UnexpectedValueException if certain values of the sorting or limiting details are
 * not supported.
 *
 * @param array        $criteria
 * @param array|null   $orderBy
 * @param integer|null $limit
 * @param integer|null $offset
 *
 * @return array Set of fetched objects
 *
 * @throws UnexpectedValueException
 */
public function findBy(
    array $criteria,
    array $orderBy = null,
    $limit = null,
    $offset = null)
{
    return $this
        -&gt;repository
        -&gt;findBy(
            $criteria,
            $orderBy,
            $limit,
            $offset
        );
}

/**
 * Finds a single object given a criteria.
 *
 * @param array $criteria The criteria.
 *
 * @return object|null Fetched object
 */
public function findOneBy(array $criteria)
{
    return $this
        -&gt;repository
        -&gt;findOneBy(
            $criteria
        );
}

/**
 * Create a new entity instance, result of the factory creation method
 *
 * @return Object new Instance
 */
public function create()
{
    return $this
        -&gt;factory
        -&gt;create();
}

/**
 * Save the instance into database. Given data can be a single object or
 * an array of objects.
 *
 * This method will persist and flush given object/array of objects
 *
 * @param object|array $data Data to save into database
 *
 * @return object|array Saved data
 */
public function save($data)
{
    if (is_array($data)) {
        foreach ($data as $entity) {
            $this
                -&gt;manager
                -&gt;persist($entity);
        }
    } else {
        $this
            -&gt;manager
            -&gt;persist($data);
    }

    $this
        -&gt;manager
        -&gt;flush($data);

    return $data;
}

/**
 * Remove the instance from the database. Given data can be a single object or
 * an array of objects.
 *
 * This method will remove and flush given object/array of objects
 *
 * @param object|array $data Data to remove from database
 *
 * @return object|array Removed data
 */
public function remove($data)
{
    if (is_array($data)) {
        foreach ($data as $entity) {
            $this
                -&gt;manager
                -&gt;remove($entity);
        }
    } else {
        $this
            -&gt;manager
            -&gt;remove($data);
    }

    $this
        -&gt;manager
        -&gt;flush($data);

    return $data;
}
</code></pre>

<p>}
```</p>

<p>This implementation provides us a simple set of actions for our entities (maybe
the most used).</p>

<ul>
<li>find(&hellip;)</li>
<li>findAll()</li>
<li>findBy(&hellip;)</li>
<li>findOneBy(&hellip;)</li>
<li>create()</li>
<li>save()</li>
<li>remove()</li>
</ul>


<p>This implementation is so useful for many scenarios, but in our case what we
found is that using Directors, our tests are reduced in many ways (less lines of
code, less complexity, more effectiveness), and the fixtures are totally
improved, focusing on the most important thing: our business logic.</p>

<h3>Directors as a service</h3>

<p>To use a Director as a service you need to define your repository as a service
as well, assuming that your factory is already a service called <code>cart_factory</code>
and assuming as well that we will work with the default entity manager
<code>doctrine.orm.default_entity_manager</code> (not a good practice, but let&rsquo;s suppose it
is in this example).</p>

<p>Let&rsquo;s see how to define your repository as a service.</p>

<p>``` yml
services:</p>

<pre><code>#
# Doctrine Repository
#
cart_repository:
    class: Doctrine\Common\Persistence\ObjectRepository
    factory:
        - @elcodi.provider.repository
        - getRepositoryByEntityNamespace
    arguments:
        - My\Cart\Namespace
</code></pre>

<p>```</p>

<p>You will find the service <code>elcodi.provider.repository</code> inside the Bundle
<code>elcodi/core-bundle</code>. This bundle is not coupled to any Elcodi functionality so
you can use it in your own projects as a set of isolated features.</p>

<p>Finally, let&rsquo;s create the Director definition by using the factory pattern.</p>

<p>``` yml
services:</p>

<pre><code>#
# Directors
#
elcodi.director.cart:
    class: Elcodi\Component\Core\Services\ObjectDirector
    arguments:
        - @doctrine.orm.default_entity_manager
        - @cart_repository
        - @cart_factory
</code></pre>

<p>```</p>

<p>Take in account that each entity will have it&rsquo;s own Director instance, so this
is why we use the factory pattern here.</p>

<p>How can we use the new Director service in our first <code>CartWrapper</code>
implementation by changing and improving the services dependencies? Let&rsquo;s do
that!</p>

<p>``` php
/<em>*
 * CartWrapper
 </em>/
class cartWrapper
{</p>

<pre><code>/**
 * @var ObjectDirector
 *
 * Cart director
 */
protected $cartDirector;

/**
 * Construct
 *
 * @param ObjectDirector $cartDirector Cart Director
 */
public function __construct(ObjectDirector $cartDirector)
{
    $this-&gt;cartDirector = $cartDirector;
}

/**
 * Load cart
 *
 * @param UserInterface $user User
 *
 * @return CartInterface
 */
public function loadCart($user)
{
    $userCart = $this
        -&gt;cartDirector
        -&gt;findOneBy([
            'user' =&gt; $user
        ]);

    if (!($userCart instanceof CartInterface)) {

        $newCart = $this
            -&gt;cartDirector
            -&gt;create($user);

        $this
            -&gt;cartDirector
            -&gt;save($newCart);

        $userCart = $newCart;
    }

    return $userCart;
}
</code></pre>

<p>}
```</p>

<p><a href="http://github.com/elcodi/elcodi">Elcodi</a> is fully based on the usage of
Directors. This does <strong>not</strong> mean that we must use Directors everywhere.
Sometimes you need to use only one of the wrapped objects, and in that case you
must inject them one by one, so please, before using this new object think about
it, think about the pros and the contras and be responsible about your
implementation.</p>

<p>Don&rsquo;t hesitate to comment about what do you think about this feature.</p>

<p>Have a nice day!</p>
]]></content>
  </entry>
  
</feed>
