<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: One Section One Component | Elcodi blog]]></title>
  <link href="http://elcodi-blog.github.io/blog/categories/one-section-one-component/atom.xml" rel="self"/>
  <link href="http://elcodi-blog.github.io/"/>
  <updated>2014-11-20T11:17:14+01:00</updated>
  <id>http://elcodi-blog.github.io/</id>
  <author>
    <name><![CDATA[Elcodi Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Security component]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/11/19/security-component/"/>
    <updated>2014-11-19T22:39:51+01:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/11/19/security-component</id>
    <content type="html"><![CDATA[<p>The next in line in our <a href="/blog/categories/one-section-one-component/">&ldquo;One section, one component&rdquo;</a> series is the <a href="http://symfony.com/doc/current/components/security"><code>Security component</code></a>. It&rsquo;s a complex one, sure, but we&rsquo;ll take a look just to the nuts and bolts of it. Ready? Set… Go!</p>

<h2>Description</h2>

<p>This component brings authentication and authorization to your applications, with implementations for common use cases, like form login, HTTP or X.509 authentication, authorization by user, roles and ACL systems.</p>

<h2>Basic classes</h2>

<ul>
<li><strong>Token</strong>: Stores current user credentials.</li>
<li><strong>Listener</strong>: extract information from the Request by which the user might be authenticated. It should create a valid token and set it into the <strong>SecurityContext</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</li>
<li><strong>FirewallMap</strong>: maps a <a href="https://github.com/symfony/HttpFoundation/blob/master/RequestMatcher.php"><code>RequestMatcher</code></a> to a set of <code>Listener</code>s.</li>
<li><strong>Firewall</strong>: Integrates the <code>FirewallMap</code> with <code>EventDispatcher</code> and <code>HttpKernel</code> components.</li>
</ul>


<h2>Example of usage</h2>

<p>```php
$exceptionListener = new ExceptionListener( … );
$matcher = new RequestMatcher(&lsquo;^/admin/&rsquo;);
$listeners = [</p>

<pre><code>new AnonymousAuthenticationListener( … ),
new LogoutListener( … ),
</code></pre>

<p>];</p>

<p>$firewallMap = new FirewallMap();
$firewallMap->add($matcher, $listeners, $exceptionListener);</p>

<p>$firewall = new Firewall($firewallMap, $dispatcher);
```</p>

<h2>Other classes</h2>

<ul>
<li><strong>UserProvider</strong>: Finds a user given his credentials.</li>
<li><strong>AutheticationEntryPoint</strong>: When a match is found but no authentication info can be extracted by the request, this has the chance to return a specific response asking for credentials. For example, the <a href="https://github.com/symfony/Security/blob/master/Http/EntryPoint/FormAuthenticationEntryPoint.php">FormAuthenticationEntryPoint</a> redirects to a login form.</li>
</ul>


<h2>In Symfony2 framework</h2>

<p>The <a href="https://github.com/symfony/SecurityBundle"><code>SecurityBundle</code></a> integrates this component into Symfony2, reading configuration from <code>security.yml</code> and adding some sane defaults.</p>

<h2>In Elcodi</h2>

<p><a href="https://github.com/elcodi/User"><code>Elcodi/User</code></a> depends on the <code>Security</code>  component for authentication. The main implementation of the <code>CustomerWrapper</code> extracts the current user from the <code>SecurityContext</code>. Also, in <a href="http://bamboo.elcodi.com/">our example application, Bamboo</a>, we depend on the excelent <a href="https://github.com/hwi/HWIOAuthBundle"><code>hwi/oauth-bundle</code></a>, which is a good example of extending this component, for OAuth authentication.</p>

<h2>Conclusion</h2>

<p>Almost every non-trivial application requires some kind of authentication. The <code>Security</code> component gives you all the power you should need, although it may be hard to use standalone. The integration with the framework makes for a much more enjoyable experience. We&rsquo;re already using this component! And you?</p>

<p>Have fun!</p>

<h2>Urls</h2>

<ul>
<li><a href="https://github.com/symfony/Security">Repository</a></li>
<li><a href="http://symfony.com/doc/current/components/security">Documentation</a></li>
<li><a href="https://packagist.org/packages/symfony/security">Packagist</a></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://symfony.com/blog/new-in-symfony-2-6-security-component-improvements"><strong>SecurityContext</strong> is deprecated since Symfony 2.6 in favor of <strong>TokenStorage</strong></a>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Routing Component]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/11/18/the-routing-component/"/>
    <updated>2014-11-18T22:39:54+01:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/11/18/the-routing-component</id>
    <content type="html"><![CDATA[<p>As a complement to the <a href="http://mmoreram.com/blog/2014/08/07/symfony-walk-zaragoza-madrid/">#SymfonyWalk</a> we start <a href="/blog/categories/one-section-one-component/">&ldquo;One section, one component&rdquo;</a>, a series of posts about some of the symfony components. Let&rsquo;s start with routing!</p>

<h2>Description</h2>

<p>As each component does, the <a href="https://github.com/symfony/Routing">Routing component</a> focuses and solves a small problem, in this case, matching urls to routes, so we can extract related information, and vice versa.</p>

<p>Things you can do with this component:</p>

<ul>
<li>Load your routes from anywhere into a collection.</li>
<li>Check if a request matches any of the routes.</li>
<li>Extract route-specific info from the request.</li>
<li>Generate a url from a route and route specific info.</li>
</ul>


<h2>Basic classes</h2>

<p>The cast of this component is:</p>

<ul>
<li><strong><code>Route</code></strong>: definition of a route, with path, requirements, options and conditions…</li>
<li><strong><code>RouteCollection</code></strong>: this bundles one or more <code>Routes</code> and allows to configure all of them at once.</li>
<li><strong><code>Matcher</code></strong>: Searches a <code>RouteCollection</code> for a matching uri.</li>
<li><strong><code>RequestContext</code></strong>: Context from the current request.</li>
</ul>


<h2>Example of usage</h2>

<p>```php
$route = new Route(&lsquo;/{name}&rsquo;);
$route->setDefaults([</p>

<pre><code>'_controller' =&gt; 'GreeterController',
</code></pre>

<p>]);
$route->setRequirements([</p>

<pre><code>'name' =&gt; '[a-z]+',
</code></pre>

<p>]);</p>

<p>$routes = new RouteCollection();
$routes->add(&lsquo;greet&rsquo;, $route);
$routes->addPrefix(&lsquo;/hello&rsquo;);</p>

<p>$context = new RequestContext();
$matcher = new UrlMatcher($routes, $context);
$parameters = $matcher->match(&lsquo;/hello/fabien&rsquo;);</p>

<p>/<em>
 * $parameters === [
 *   &lsquo;<em>route&rsquo; => &lsquo;greet&rsquo;,
 *   &lsquo;</em>controller&rsquo; => &lsquo;GreeterController&rsquo;,
 *   &lsquo;name&rsquo; => &lsquo;fabien&rsquo;,
 * ]
 </em>/
```</p>

<h2>Other classes</h2>

<p>Other supporting actors:</p>

<ul>
<li><strong>Loader</strong>: Loads a <code>RouteCollection</code> from a source.</li>
<li><strong>Generator</strong>: The opposite of <code>Matcher</code>, given a route name and route-specific information, generates the uri.</li>
<li><strong>Dumper</strong>: The opposite of <code>Loader</code>, dumps a <code>RouteCollection</code> in different formats.</li>
<li><strong>Router</strong>: basically a <a href="http://en.wikipedia.org/wiki/Facade_pattern">facade</a> to <code>Matcher</code> and <code>Generator</code>.</li>
</ul>


<h2>In Symfony2 framework</h2>

<p>Symfony2 framework reads routes from routing files with this component, matches the current <code>Request</code> and chooses which <code>Controller</code> and action to run. It also extends the <code>Router</code> so you can use parameter placeholders from <a href="https://github.com/symfony/DependencyInjection"><code>DependencyInjection</code></a> and integrates with the <a href="https://github.com/symfony/Config"><code>Config</code></a> component to allow caching.</p>

<h2>In Elcodi</h2>

<p>In Elcodi, as a library, we try not to couple our very few controllers to a specific route and we leave that responsibility to the layers above. For more complex scenarios, like the <a href="https://github.com/elcodi/MediaBundle"><code>MediaBundle</code></a> and the forthcoming <a href="https://github.com/elcodi/elcodi/tree/ec8fabe99489ae9dd1ef671eefaaa7ac89e24cdb/src/Elcodi/Bundle/PageBundle"><code>PageBundle</code></a>, we implement our own custom <code>Loader</code> so we can route through them.</p>

<h2>Conclusion</h2>

<p>This component deals with the next step just after getting your <a href="http://symfony.com/doc/current/components/http_foundation">HTTP Request</a> and gives you great power and flexibility to split your application into several routes.</p>

<p>I hope you find this component useful!</p>

<h2>Urls</h2>

<ul>
<li><a href="https://github.com/symfony/Routing">Repository</a></li>
<li><a href="http://symfony.com/doc/current/components/routing">Documentation</a></li>
<li><a href="https://packagist.org/packages/symfony/routing">Packagist</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
