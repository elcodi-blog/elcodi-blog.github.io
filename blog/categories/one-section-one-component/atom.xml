<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: One Section One Component | Elcodi blog]]></title>
  <link href="http://elcodi-blog.github.io/blog/categories/one-section-one-component/atom.xml" rel="self"/>
  <link href="http://elcodi-blog.github.io/"/>
  <updated>2015-03-03T16:25:52+01:00</updated>
  <id>http://elcodi-blog.github.io/</id>
  <author>
    <name><![CDATA[Elcodi Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Console Component]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/11/21/console-component/"/>
    <updated>2014-11-21T19:02:40+01:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/11/21/console-component</id>
    <content type="html"><![CDATA[<p>The next post in the series of <a href="/blog/categories/one-section-one-component/">&ldquo;One section one component&rdquo;</a>, in support of our friend <a href="https://github.com/mmoreram">Marc Morera</a> in his <a href="https://twitter.com/hashtag/symfonywalk?f=realtime">#symfonywalk</a>, is about the <a href="http://symfony.com/doc/current/components/console">Console component</a>. Marc has had some problems early in his journey, so we want to send him energy and courage for the next steps of the walk. Go Marc! You can send him words of encouragement too in his twitter account <a href="https://twitter.com/mmoreram">@mmoreram</a>!</p>

<h2>Description</h2>

<p>The Console component helps you create console applications. It is like <code>HttpRequest</code> + <code>Routing</code>, but for command line. With this component you can:</p>

<ul>
<li>Create single or multiple commands in an application.</li>
<li>Define and parse command&rsquo;s arguments and options.</li>
<li>Execute a command.</li>
<li>Output information to terminal while processing a command.</li>
<li>Allow automatic management of <code>--help</code> options.</li>
</ul>


<h2>Basic classes</h2>

<ul>
<li><strong><code>Command</code></strong>: configuration of a command with name, parameters, options…</li>
<li><strong><code>InputArgument</code></strong> and <strong><code>InputOption</code></strong>: defines how command-line parameters and options are parsed and passed to a <code>Command</code>.</li>
<li><strong><code>InputInterface</code></strong>: allows read operations from terminal.</li>
<li><strong><code>OutputInterface</code></strong>: encapsulate terminal writing.</li>
<li><strong><code>Application</code></strong>: a group of one or more <code>Command</code>s and <code>Helper</code>s.</li>
</ul>


<h2>Example of usage</h2>

<p>```php
class WriteCommand extends Command
{</p>

<pre><code>protected function configure()
{
    $this
        -&gt;setName('write')
        -&gt;setDescription('Writes text to a file')
        -&gt;addArgument(
            'filename',
            InputArgument::REQUIRED,
            'Which file to write?'
        )
        -&gt;addArgument(
            'text',
            InputArgument::OPTIONAL,
            'Which text to write?'
        )
        -&gt;addOption(
            'yell',
            null,
            InputOption::VALUE_NONE,
            'If set, text will be upper-cased'
        )
    ;
}

protected function execute(InputInterface $input, OutputInterface $output)
{
    $filename = $input-&gt;getArgument('filename');
    $text = $input-&gt;getArgument('text');
    if ($input-&gt;getOption('yell')) {
        $text = strtoupper($text);
    }

    if (false === file_put_contents($filename, $text)) {
        throw new RuntimeException('Error writing to file.');
    }

    $output-&gt;writeln('File was successfully written.');
}
</code></pre>

<p>}</p>

<p>$application = new Application();
$application->addCommands([</p>

<pre><code>new WriteCommand(),
</code></pre>

<p>]);
$application->run();
```</p>

<p>Now on your command line you can type <code>php console.php write path/to/filename "text to write"</code>.</p>

<p>Usually, the <code>Command</code> should behave like a <code>Controller</code>, this is, checking parameters and passing them to one or more services to do the real work.</p>

<p>You can also add a previous step of interaction with the user, so they can provide any missing or ambiguous information. This part is skipped automatically if the <code>--no-interaction</code> (or <code>-n</code>) is used.</p>

<p>For user interaction, you can use <code>OutputInterface</code> directly, but there are many <code>Helpers</code> you can use, being the <code>QuestionHelper</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> the most helpful (no pun intended).</p>

<p>Let&rsquo;s see how we can add interaction to our previous example.</p>

<p>```php
class WriteCommand extends Command
{</p>

<pre><code>…

protected function interact(InputInterface $input, OutputInterface $output)
{
    $filename = $input-&gt;getArgument('filename');
    if (null === $filename) {
        return;
    }

    if (!$this-&gt;whenBaseDirectoryExists($filename)) {
        $this-&gt;confirmDirectoryCreation($filename, $input, $output);
    }

    if ($this-&gt;whenFileAlreadyExists($filename)) {
        $this-&gt;confirmFileOverwrite($filename, $input, $output);
    }

    if (null === $input-&gt;getArgument('text')) {
        $this-&gt;askForText($input, $output);
    }
}

protected function whenBaseDirectoryExists($filename)
{
    return is_dir(dirname($filename));
}

protected function confirmDirectoryCreation($filename, $input, $output)
{
    $questionHelper = $this-&gt;getHelper('question');
    $question = new ConfirmationQuestion(
        'Base directory for "' . $filename . '" does not exist. Create? [y/n] ',
        true
    );

    if (!$questionHelper-&gt;ask($input, $output, $question)) {
        throw new RuntimeException('Base directory does not exist.');
    }

    mkdir(dirname($filename), 0777, true);
}

protected function whenFileAlreadyExists($filename)
{
    return file_exists($filename);
}

protected function confirmFileOverwrite($filename, $input, $output)
{
    $questionHelper = $this-&gt;getHelper('question');
    $question = new ConfirmationQuestion(
        'File "' . $filename . '" already exists. Overwrite? [y/n] ',
        true
    );

    if (!$questionHelper-&gt;ask($input, $output, $question)) {
        throw new RuntimeException('Can\'t write to file.');
    }
}

protected function askForText($input, $output)
{
    $questionHelper = $this-&gt;getHelper('question');
    $question = new Question(
        'Please enter the content of the file: ',
        ''
    );

    $text = $questionHelper-&gt;ask($input, $output, $question);
    $input-&gt;setArgument('text', $text);
}
</code></pre>

<p>}
```
<a href="https://gist.github.com/xphere/546d5e90d15c1f88d750">See here the full example</a></p>

<p>Now we&rsquo;re being requested for directory creation, file overwriting, and missing text arguments. Nice!</p>

<h2>Other classes</h2>

<ul>
<li><strong><code>Helpers</code></strong>: Extensions for <code>OutputInterface</code>, to ask questions, show progress bars or tables. You can add your own too, or check the <a href="http://symfony.com/doc/current/components/console/helpers">default ones</a>.</li>
</ul>


<h2>In Symfony2 framework</h2>

<p>Symfony2 detects <code>Command</code> classes in the <code>Command</code> directory of each bundle, and automatically adds them to the console application. As of 2.4, you can also mark services with the tag <code>console.command</code>. You can refer to this great <a href="http://symfony.com/doc/current/cookbook/console/commands_as_services.html">cookbook entry</a>.</p>

<h2>In Elcodi</h2>

<p>In Elcodi we provide commands for things such as <a href="https://github.com/elcodi/Currency/blob/master/Command/CurrencyExchangeRatesPopulateCommand.php">querying currency exchanges</a> or <a href="https://github.com/elcodi/Geo/blob/master/Command/GeoPopulateCommand.php">populating geo entities</a> from third party providers.</p>

<h2>Conclusion</h2>

<p>The <code>Console</code> component brings steroids to your command-line applications at nearly no cost for what you get in return. You can have multiple commands under the same application or <a href="http://symfony.com/doc/current/components/console/single_command_tool.html">just one</a>, you choose. If the <a href="https://getcomposer.org/">current PHP dependency manager</a> uses it, why not you?</p>

<h2>Urls</h2>

<ul>
<li><a href="https://github.com/symfony/Console">Repository</a></li>
<li><a href="http://symfony.com/doc/current/components/console">Documentation</a></li>
<li><a href="https://packagist.org/packages/symfony/console">Packagist</a></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><code>QuestionHelper</code> is available as of Symfony 2.5, for previous versions use the, now deprecated, <a href="http://symfony.com/doc/2.5/components/console/helpers/dialoghelper.html"><code>DialogHelper</code></a>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Security Component]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/11/19/security-component/"/>
    <updated>2014-11-19T22:39:51+01:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/11/19/security-component</id>
    <content type="html"><![CDATA[<p>The next in line in our <a href="/blog/categories/one-section-one-component/">&ldquo;One section, one component&rdquo;</a> series is the <a href="http://symfony.com/doc/current/components/security"><code>Security component</code></a>. It&rsquo;s a complex one, sure, but we&rsquo;ll take a look just to the nuts and bolts of it. Ready? Set… Go!</p>

<h2>Description</h2>

<p>This component brings authentication and authorization to your applications, with implementations for common use cases, like form login, HTTP or X.509 authentication, authorization by user, roles and ACL systems.</p>

<h2>Basic classes</h2>

<ul>
<li><strong>Token</strong>: Stores current user credentials.</li>
<li><strong>Listener</strong>: extract information from the Request by which the user might be authenticated. It should create a valid token and set it into the <strong>SecurityContext</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</li>
<li><strong>FirewallMap</strong>: maps a <a href="https://github.com/symfony/HttpFoundation/blob/master/RequestMatcher.php"><code>RequestMatcher</code></a> to a set of <code>Listener</code>s.</li>
<li><strong>Firewall</strong>: Integrates the <code>FirewallMap</code> with <code>EventDispatcher</code> and <code>HttpKernel</code> components.</li>
</ul>


<h2>Example of usage</h2>

<p>```php
$exceptionListener = new ExceptionListener( … );
$matcher = new RequestMatcher(&lsquo;^/admin/&rsquo;);
$listeners = [</p>

<pre><code>new AnonymousAuthenticationListener( … ),
new LogoutListener( … ),
</code></pre>

<p>];</p>

<p>$firewallMap = new FirewallMap();
$firewallMap->add($matcher, $listeners, $exceptionListener);</p>

<p>$firewall = new Firewall($firewallMap, $dispatcher);
```</p>

<h2>Other classes</h2>

<ul>
<li><strong>UserProvider</strong>: Finds a user given his credentials.</li>
<li><strong>AutheticationEntryPoint</strong>: When a match is found but no authentication info can be extracted by the request, this has the chance to return a specific response asking for credentials. For example, the <a href="https://github.com/symfony/Security/blob/master/Http/EntryPoint/FormAuthenticationEntryPoint.php">FormAuthenticationEntryPoint</a> redirects to a login form.</li>
</ul>


<h2>In Symfony2 framework</h2>

<p>The <a href="https://github.com/symfony/SecurityBundle"><code>SecurityBundle</code></a> integrates this component into Symfony2, reading configuration from <code>security.yml</code> and adding some sane defaults.</p>

<h2>In Elcodi</h2>

<p><a href="https://github.com/elcodi/User"><code>Elcodi/User</code></a> depends on the <code>Security</code>  component for authentication. The main implementation of the <code>CustomerWrapper</code> extracts the current user from the <code>SecurityContext</code>. Also, in <a href="http://bamboo.elcodi.com/">our example application, Bamboo</a>, we depend on the excelent <a href="https://github.com/hwi/HWIOAuthBundle"><code>hwi/oauth-bundle</code></a>, which is a good example of extending this component, for OAuth authentication.</p>

<h2>Conclusion</h2>

<p>Almost every non-trivial application requires some kind of authentication. The <code>Security</code> component gives you all the power you should need, although it may be hard to use standalone. The integration with the framework makes for a much more enjoyable experience. We&rsquo;re already using this component! And you?</p>

<p>Have fun!</p>

<h2>Urls</h2>

<ul>
<li><a href="https://github.com/symfony/Security">Repository</a></li>
<li><a href="http://symfony.com/doc/current/components/security">Documentation</a></li>
<li><a href="https://packagist.org/packages/symfony/security">Packagist</a></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://symfony.com/blog/new-in-symfony-2-6-security-component-improvements"><strong>SecurityContext</strong> is deprecated since Symfony 2.6 in favor of <strong>TokenStorage</strong></a>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Routing Component]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/11/18/the-routing-component/"/>
    <updated>2014-11-18T22:39:54+01:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/11/18/the-routing-component</id>
    <content type="html"><![CDATA[<p>As a complement to the <a href="http://mmoreram.com/blog/2014/08/07/symfony-walk-zaragoza-madrid/">#SymfonyWalk</a> we start <a href="/blog/categories/one-section-one-component/">&ldquo;One section, one component&rdquo;</a>, a series of posts about some of the symfony components. Let&rsquo;s start with routing!</p>

<h2>Description</h2>

<p>As each component does, the <a href="https://github.com/symfony/Routing">Routing component</a> focuses and solves a small problem, in this case, matching urls to routes, so we can extract related information, and vice versa.</p>

<p>Things you can do with this component:</p>

<ul>
<li>Load your routes from anywhere into a collection.</li>
<li>Check if a request matches any of the routes.</li>
<li>Extract route-specific info from the request.</li>
<li>Generate a url from a route and route specific info.</li>
</ul>


<h2>Basic classes</h2>

<p>The cast of this component is:</p>

<ul>
<li><strong><code>Route</code></strong>: definition of a route, with path, requirements, options and conditions…</li>
<li><strong><code>RouteCollection</code></strong>: this bundles one or more <code>Routes</code> and allows to configure all of them at once.</li>
<li><strong><code>Matcher</code></strong>: Searches a <code>RouteCollection</code> for a matching uri.</li>
<li><strong><code>RequestContext</code></strong>: Context from the current request.</li>
</ul>


<h2>Example of usage</h2>

<p>```php
$route = new Route(&lsquo;/{name}&rsquo;);
$route->setDefaults([</p>

<pre><code>'_controller' =&gt; 'GreeterController',
</code></pre>

<p>]);
$route->setRequirements([</p>

<pre><code>'name' =&gt; '[a-z]+',
</code></pre>

<p>]);</p>

<p>$routes = new RouteCollection();
$routes->add(&lsquo;greet&rsquo;, $route);
$routes->addPrefix(&lsquo;/hello&rsquo;);</p>

<p>$context = new RequestContext();
$matcher = new UrlMatcher($routes, $context);
$parameters = $matcher->match(&lsquo;/hello/fabien&rsquo;);</p>

<p>/<em>
 * $parameters === [
 *   &lsquo;<em>route&rsquo; => &lsquo;greet&rsquo;,
 *   &lsquo;</em>controller&rsquo; => &lsquo;GreeterController&rsquo;,
 *   &lsquo;name&rsquo; => &lsquo;fabien&rsquo;,
 * ]
 </em>/
```</p>

<h2>Other classes</h2>

<p>Other supporting actors:</p>

<ul>
<li><strong>Loader</strong>: Loads a <code>RouteCollection</code> from a source.</li>
<li><strong>Generator</strong>: The opposite of <code>Matcher</code>, given a route name and route-specific information, generates the uri.</li>
<li><strong>Dumper</strong>: The opposite of <code>Loader</code>, dumps a <code>RouteCollection</code> in different formats.</li>
<li><strong>Router</strong>: basically a <a href="http://en.wikipedia.org/wiki/Facade_pattern">facade</a> to <code>Matcher</code> and <code>Generator</code>.</li>
</ul>


<h2>In Symfony2 framework</h2>

<p>Symfony2 framework reads routes from routing files with this component, matches the current <code>Request</code> and chooses which <code>Controller</code> and action to run. It also extends the <code>Router</code> so you can use parameter placeholders from <a href="https://github.com/symfony/DependencyInjection"><code>DependencyInjection</code></a> and integrates with the <a href="https://github.com/symfony/Config"><code>Config</code></a> component to allow caching.</p>

<h2>In Elcodi</h2>

<p>In Elcodi, as a library, we try not to couple our very few controllers to a specific route and we leave that responsibility to the layers above. For more complex scenarios, like the <a href="https://github.com/elcodi/MediaBundle"><code>MediaBundle</code></a> and the forthcoming <a href="https://github.com/elcodi/elcodi/tree/ec8fabe99489ae9dd1ef671eefaaa7ac89e24cdb/src/Elcodi/Bundle/PageBundle"><code>PageBundle</code></a>, we implement our own custom <code>Loader</code> so we can route through them.</p>

<h2>Conclusion</h2>

<p>This component deals with the next step just after getting your <a href="http://symfony.com/doc/current/components/http_foundation">HTTP Request</a> and gives you great power and flexibility to split your application into several routes.</p>

<p>I hope you find this component useful!</p>

<h2>Urls</h2>

<ul>
<li><a href="https://github.com/symfony/Routing">Repository</a></li>
<li><a href="http://symfony.com/doc/current/components/routing">Documentation</a></li>
<li><a href="https://packagist.org/packages/symfony/routing">Packagist</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
