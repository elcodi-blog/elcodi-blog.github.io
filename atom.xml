<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Elcodi blog]]></title>
  <link href="http://elcodi-blog.github.io/atom.xml" rel="self"/>
  <link href="http://elcodi-blog.github.io/"/>
  <updated>2014-11-04T11:32:27+01:00</updated>
  <id>http://elcodi-blog.github.io/</id>
  <author>
    <name><![CDATA[Elcodi Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A week of Elcodi #1 (27/10 - 3/11)]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/11/04/a-week-of-elcodi-number-1/"/>
    <updated>2014-11-04T09:32:57+01:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/11/04/a-week-of-elcodi-number-1</id>
    <content type="html"><![CDATA[<p>It is time to be more vocal about what we are doing and share with the community how we are moving forward along our roadmap and the progress we are making.</p>

<p>Inspired by the <a href="http://symfony.com/blog/category/a-week-of-symfony">famous symfony weekly bulletin</a>, we would like to do something similar: <em>A week of Elcodi</em>, a series of post assembled in turn by each member of the team.</p>

<p>This week we&rsquo;ve been working on <a href="https://github.com/elcodi/bamboo-store/issues/44">social connectivity for our bamboo store</a>, allowing our users to log in from a variety of OAuth services through integration of <a href="https://github.com/hwi/HWIOAuthBundle">HWI/OAuthBundle</a> in our project.
A thin layer and a new entity <a href="https://github.com/elcodi/bamboo-store/blob/2134302656ae13768ab8e82e54053d01f105d861/src/Elcodi/StoreConnectBundle/Entity/Authorization.php#L31"><code>Authorization</code></a> stores and retrieves links between our <a href="https://github.com/elcodi/elcodi/blob/master/src/Elcodi/Component/User/Entity/Interfaces/CustomerInterface.php"><code>CustomerInterface</code></a> and the OAuth token. And voil√†! You can login with your GitHub account in two clicks!</p>

<p>Sticking with our bamboo store, we prepared a feature branch with PayPal <a href="https://developer.paypal.com/docs/integration/web/web-checkout/">web checkout</a> integration. It has been developed on top of the <a href="https://github.com/PaymentSuite">PaymentSuite</a> project. You can check out the changes <a href="https://github.com/elcodi/bamboo-store/compare/features/paypal-payment?expand=1">here</a>.</p>

<p>We have also been working on a <em>Finite-state machine</em>. Until now we were managing <a href="https://github.com/elcodi/elcodi/blob/master/src/Elcodi/Component/Cart/Entity/Order.php#L38"><code>Order</code></a> and <a href="https://github.com/elcodi/elcodi/blob/master/src/Elcodi/Component/Cart/Entity/OrderLine.php#L34"><code>OrderLine</code></a> state changes using an <a href="https://github.com/elcodi/elcodi/blob/master/src/Elcodi/Component/Cart/Services/OrderStateManager.php#L28">hardwired implementation</a> which was very specific to the <code>Cart</code> component, while any logic implementing a FSM should be reusable. While waiting for Symfony to implement its own state machine in the near futire, we wrote a very simple and useful component that can be used in any project. You can check and review the <a href="https://github.com/elcodi/elcodi/pull/354">pull request</a></p>

<p>In terms of specific e-commerce features, we just merged some improvements to the Shipping component and Bundle. See the <a href="https://github.com/elcodi/elcodi/pull/309">Pull Request</a>.</p>

<p>Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The family grows]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/10/16/welcome-berny/"/>
    <updated>2014-10-16T16:09:40+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/10/16/welcome-berny</id>
    <content type="html"><![CDATA[<p>Today a new friend has join the team, meet Berny Cantos!</p>

<p>Berny is a seasoned web developer and of course a Symfony lover. He is one of those great old-school coders that forged
their stamina the <em>hard way</em>, out of C/C++ development, before diving into the LAMP world.</p>

<p>He will be helping step up our commitment with the open source community and harden the foundations of our codebase.</p>

<p><img src="http://s3-eu-west-1.amazonaws.com/elcodi-static-assets/images/people/berny.jpg" alt="All Right!" /></p>

<p>You can reach him on <a href="https://github.com/xphere">GitHub</a>, Twitter at <a href="https://twitter.com/xphere">@xphere</a> and
<a href="https://www.linkedin.com/in/bernycantos">LinkedIn</a></p>

<p>Welcome Berny!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elcodi team]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/14/elcodi-team/"/>
    <updated>2014-08-14T10:28:08+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/14/elcodi-team</id>
    <content type="html"><![CDATA[<h5>This is the follow-up of a series of posts</h5>

<ul>
<li><a href="http://elcodi-blog.github.io/blog/2014/08/11/a-short-break-for-meditation/">A short break for meditation</a></li>
<li><a href="http://elcodi-blog.github.io/blog/2014/08/12/our-roadmap/">Our roadmap</a>.</li>
<li><a href="http://elcodi-blog.github.io/blog/2014/08/13/our-goals/">Our goals</a></li>
</ul>


<p>As a final point for what we shared in previous posts, the last but definitely not least element to consider is the <em>team</em>.</p>

<p>Such an ambitious venture needs a committed and visionary crew, and obviously more <em>heads</em> and <em>hands</em>. This is why we are opening job positions for a couple of skilled software artisans willing to join the journey with us. We will soon post the complete description. The company is located in Barcelona, Spain.</p>

<p>We are looking for passionate and inspired artisans that love to craft products to be used by fellow developers and that believe in the potential of a community that grows around an <em>opensource</em> project.</p>

<h2>Community</h2>

<p>The final word is a big <strong>thank you</strong> to all the people that have been supporting us &ndash; by contributing in different forms &ndash; and to whom will do it someday.</p>

<p>We really seek to build something useful for the community and to receive the necessary feedback and support in order to speed up the development and deliver the sound, reliable, flexible product that we have in mind.</p>

<p>As for now, the Elcodi team hopes that you&rsquo;ll get involved with the project and wishes you a great summer break.</p>

<p>Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Our goals]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/13/our-goals/"/>
    <updated>2014-08-13T10:26:56+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/13/our-goals</id>
    <content type="html"><![CDATA[<h5>This is the follow-up of a series of posts</h5>

<ul>
<li><a href="http://elcodi-blog.github.io/blog/2014/08/11/a-short-break-for-meditation/">A short break for meditation</a></li>
<li><a href="http://elcodi-blog.github.io/blog/2014/08/12/our-roadmap/">Our roadmap</a>.</li>
</ul>


<p>In the folowing weeks we would like to get to a first community stable version. Though last week we placed the initial milestone it is important to define a release plan for the following steps.</p>

<p>We set up a list of <a href="https://github.com/elcodi/elcodi/milestones">milestones</a> to show a proposed roadmap:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Version 0.3
</span><span class='line'>    - Closed 8 days ago
</span><span class='line'>    - 100% complete  0 open  11 closed
</span><span class='line'>
</span><span class='line'>Version 0.4
</span><span class='line'>    - Due by August 15, 2014
</span><span class='line'>    - 0% complete  0 open  0 closed
</span><span class='line'>
</span><span class='line'>Version 0.5
</span><span class='line'>    - Due by August 29, 2014
</span><span class='line'>    - 17% complete  5 open  1 closed
</span><span class='line'>
</span><span class='line'>Version 0.6
</span><span class='line'>    - Due by September 11, 2014
</span><span class='line'>    - 0% complete  2 open  0 closed</span></code></pre></td></tr></table></div></figure>


<p>This means we will be working on fine-tune our general roadmap and on fixing and refining what we have &ndash; no new features will be developed until we improve stability &ndash; in the hope of clearing things up a bit for developers interested in working with Elcodi foundations.</p>

<p>At this stage, it is possible for new commits to introduce <em>BC breaks</em>. There is an open <a href="https://github.com/elcodi/elcodi/issues/34">issue</a> regarding <code>@api</code> tagging in phpdoc but as suggests in the discussion it is not really needed in the absence of a frozen stable release.</p>

<p>We won&rsquo;t be following strict <a href="http://semver.org/">semantic versioning</a> until we reach a stable release, though we are using <em>patch version</em> for small fixes that do not cause incompatibilities and <em>minor version</em> for changes that <em>could</em> cause BC.</p>

<p>Of course this will change once we approach <code>v1.0</code>, when we will <code>@api</code> freeze core components and enforce full semantic versioning.</p>

<p>Reaching the <code>stable</code> version also means we will release the <em>Market</em>, so that plugins and components can be developed with no fears of major version breaks.</p>

<p>We are on our way there, things look good!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Our roadmap]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/12/our-roadmap/"/>
    <updated>2014-08-12T09:55:48+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/12/our-roadmap</id>
    <content type="html"><![CDATA[<h5>This is the second part of a <a href="http://elcodi-blog.github.io/blog/2014/08/11/a-short-break-for-meditation/">previous post</a></h5>

<p>We can proudly state we have a lot to do in the following months.</p>

<p>Question is, what now? Maybe we are 1% done along our path, although &ldquo;done&rdquo; in our world sounds a bit odd since there is always room for improvement.
As long as our issue tracker list gets fed, we will stay hungry for enhancing our code.</p>

<h3>GeoBundle</h3>

<p>One of the most recurring challenges in e-commerce development is the modeling of geographic and administrative divisions. We will put our efforts in designing a simple yet extensible set of entities and relations as well as strategies to implement custom tree structures.</p>

<h3>Rule management</h3>

<p>Rule-based decision logic is ubiquitous in e-commerce applications. A few examples:</p>

<ul>
<li>Which discount coupon can be automatically applied upon entering the checkout process?</li>
<li>Can a particular discount code be applied?</li>
<li>Can two specific products be added to the same cart?</li>
<li>Can a specific product combination trigger a discount, an up-sell or a different offer?</li>
<li>When is it possible to use a specific carrier or payment method?</li>
</ul>


<p>Elcodi <a href="https://github.com/elcodi/rulebundle">RuleBundle</a> aims at solving these kinds of issue.</p>

<h3>Ports and Adapters</h3>

<p>We surely want to promote high-cohesion, loose-coupled software components. Right now we are halfway, as described in the <a href="http://elcodi-blog.github.io/blog/2014/08/11/a-short-break-for-meditation/">previous post</a>, but we want to keep improving. A typical usage of P&amp;A would be to decouple Symfony bundles from other significant objects in the domain, or to be able to use Elcodi Cart component without depending on the CustomerBundle.</p>

<h3>Tests</h3>

<p>A great deal of credibility for an open source project is earned by instilling a thorough and sound test methodology. We assume that we&rsquo;ve been lacking on this specific subject, doing our homeworks halfway. This will be addressed both for Elcodi core repository and web applications (<a href="https://github.com/elcodi/bamboo-store">BambooStore</a> and <a href="https://github.com/elcodi/bamboo-admin">BambooAdmin</a>) by raising the coverage of unit and functional tests and start working with acceptance tests for the web apps.</p>

<p>We have not decided yet which toolset we will be using, surely one between <a href="http://docs.behat.org/">Behat3</a> and <a href="http://www.phpspec.net/">PHPSpec2</a>. As always, suggestions are more than welcome!</p>

<h3>PaymentSuite</h3>

<p>The <a href="http://github.com/PaymentSuite">PaymentSuite</a> was conceived and grown inside Elcodi.</p>

<p>It is a payment processing suite developed in Symfony2 which follows our vision of extensibility using adapters and dispatched events to give maximum flexibility to implementers and to decouple specific <code>Cart</code> or <code>Order</code> implementations. It promotes easy and sensible defaults for configurations.</p>

<p>We will take care of the project and will evolve it as the default payment platform. The <a href="http://bamboo.elcodi.com">BambooStore</a> is already using a dummy <a href="https://github.com/PaymentSuite/FreePaymentBundle">free payment</a> method.</p>

<h3>ShippingSuite</h3>

<p>We would like to follow a similar path as the PaymentSuite: a separated and parallel project that does not depend on Elcodi and that can be easy integrated in web applications. Same vision, same resilience philosophy: work with <code>Order</code> or <code>Carrier</code> as <em>adaptees</em>.</p>

<h3>Documentation</h3>

<p>Akin to the phisolophers&#8217; stone, sibling of the Holy Grail, the documentation is the most precious gemstone that an open source project should strive to shape. As Symfony2 author <a href="https://twitter.com/fabpot">@fabpot</a> once said, it is the most challenging part of any project.</p>

<p>We are working on the foundation of an <a href="http://elcodi.readthedocs.org">english documentation</a>, localized and translated version will follow later on. This is a list of topics that we will elaborate further:</p>

<ul>
<li>Implementation guidelines. General vision and coding philosophy, style and everything needed for developers wishing to contribute.</li>
<li>Customizations. Craft a project using only Elcodi core. Architectural constraints to keep in mind. Recipes and examples.</li>
<li>Core bundles documentation, including

<ul>
<li>Provisioned Model</li>
<li>Event system rationale and taxonomies</li>
<li>Services</li>
<li>Configuration</li>
<li>Controllers and extensions, where it may apply</li>
</ul>
</li>
<li><a href="https://github.com/elcodi/bamboo-store">Bamboo</a> <a href="https://github.com/elcodi/bamboo-admin">web applications</a> documentation for Symfony and front-end developers: the starting point to develop your e-commerce site.</li>
</ul>


<p>This is going to be an epic effort and the real main entrance to the project for the community. No matter the size of your codebase is, documentation is a key measure of a project success.</p>

<h2>Community</h2>

<p>If documentation should be our <em>diamond</em>, the community should be our <em>propellant</em>. A good community makes a project good.</p>

<p>We started as a small project and we know how demanding it can be to get involved and contribute to the development of an open source based product.</p>

<p>We will take special care of this particular topic, since motivating people and get them involved is essential for our vision: Elcodi was never mean to be a mere code repository, it is a group of visionary people with a clear view in their minds, working together to work out a specific problem.</p>

<p>Taking care of the code means caring for the people that make it possible for the code to be crafted. We are especially interested in helping those who want to learn, so we will soon arrange training and learning mechanisms, both for Symfony and Elcodi.</p>

<p>Get ready to be effective!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A short break for meditation]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/11/a-short-break-for-meditation/"/>
    <updated>2014-08-11T09:05:38+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/11/a-short-break-for-meditation</id>
    <content type="html"><![CDATA[<h5>Puedes encontrar la versi√≥n en castellano de este post <a href="http://elcodi-blog.github.io/blog/2014/08/04/un-momento-para-reflexionar/">aqui</a>.</h5>

<p>Some of you already know Elcodi, a suite of components built on Symfony2 and Doctrine, aiming to provide maximum flexibility and soundness to e-commerce projects.</p>

<p>We believe that coding should always be entertaining and fun.</p>

<p>This has been our main mission since the beginning and as every ambitious goal you cannot forget that along the journey you might discover an equally important path.</p>

<p>I think that we reached the point where it is important to take a breath, so that in the following days we will publish some posts regarding our views and what we&rsquo;ve been learning, where we will talk about what we have developed so far, our expectations and how we would like to drive the development of each part of the project in the following months.</p>

<h1>The path so far</h1>

<p>Elcodi was born a few months ago in a nice workplace located in Barcelona, Spain. We started designing the platform at the beginning of the year, developed and refactored the pieces up the present day where in my opinion we reached a fairly good balanced point, which is the growing seed of our natural direction.</p>

<h3>ProductBundle, AttributeBundle</h3>

<p>Those components are the home for everything regarding products, categories, manufacturers. Product attribute and options were added in a separate bundle and are the dimensions for working in the product variants space, which is one of the latest features developed and is a required trait for almost every e-commerce software implementation.</p>

<p>Multi-category is also supported for products.</p>

<h3>UserBundle</h3>

<p>Contains the models and tools necessary for working with front-end customers or back-end administrators. A basic authentication &amp; authorization definition was also added, exploiting Symfony Security component.</p>

<h3>CartBundle</h3>

<p>It handles the purchase process, carts and orders. Undoubtedly one of the core pillars of any e-commerce, it has been designed to be simple to get a grasp of and to be overridden almost completely by custom logic. You can read about its internal in the <a href="http://elcodi.readthedocs.org/en/latest/bundles/CartBundle/index.html">official documentation</a>.
Point-in-time snapshots of order states or cart to order transitions are examples of what is provided in CartBundle core services default implementation.</p>

<h3>GeoBundle</h3>

<p>Basic building block for a complete hierarchical aggregation of administrative entities. Due to lack of time, at the present day only <code>Country</code> is modeled as a mapped class, leaving <code>State</code>, <code>Province</code> or <code>City</code> as text fields.</p>

<h3>MediaBundle</h3>

<p>Allows the storage-agnostic handling of media files, such as images. It also controls image resizing and consolidates HTTP headers for media files.</p>

<p>Other bundles are:</p>

<ul>
<li>BannerBundle</li>
<li>LanguageBundle</li>
<li>CurrencyBundle</li>
<li>MenuBundle</li>
<li>NewsletterBundle</li>
<li>ReferralProgramBundle</li>
<li>RuleBundle</li>
</ul>


<h3>BambooStore</h3>

<p>We developed a prototype of a front-end store, the <a href="http://bamboo.elcodi.com/">Bamboo</a>. It is a showcase of Elcodi core features and uses <a href="https://github.com/PaymentSuite">PaymentSuite</a> <a href="https://github.com/PaymentSuite/FreePaymentBundle">FreePaymentBundle</a> as payment method.</p>

<h3>BambooAdmin</h3>

<p>Something we just published. An initial release of a <a href="https://github.com/elcodi/bamboo-admin">backoffice application</a>, providing basic features yet usable. Likewise Elcodi core and the Bamboo frontend, it will be in constant development. Versions and releases of the three projects will stay synchronized, not to break dependencies.</p>

<h3>Implementation</h3>

<p>We know that unfortunately, at least at this stage, our design choices and implementation cannot satisfy everyone. Trying to do it would require a massive effort and can lead to a loss of focus and direction. We prefer stick with our vision despite the errors we would make.</p>

<p>A question we are frequently asked is why we are coupling with Symfony and Doctrine: this is a trade-off we had to settle for trying to maximize acceptance from both developers and end users by enforcing clean, coherent, structured and documented code.</p>

<p>Right now we don&rsquo;t think it is feasable to assemble more layers of indirection to achieve this decoupling. The goal is to involve the Symfony community and work on the feedbacks we will receive from developers who want to build applications with Elcodi. Mind you that Symfony decoupling <em>is</em> possible, since we are trying to follow the <strong>SOLID</strong> path, but the eternal struggle between being different and effective flows to a point of balance that surely will benefit both the project and our users.</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[El equipo de Elcodi]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/08/equipo/"/>
    <updated>2014-08-08T16:23:48+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/08/equipo</id>
    <content type="html"><![CDATA[<h2>Este post es la continuaci√≥n de tres posts anteriores</h2>

<ul>
<li><a href="http://elcodi-blog.github.io/blog/2014/08/04/un-momento-para-reflexionar/">Un momento para reflexionar</a>.</li>
<li><a href="http://elcodi-blog.github.io/blog/2014/08/05/nuestro-roadmap/">Nuestro roadmap</a>.</li>
<li><a href="http://elcodi-blog.github.io/blog/2014/08/06/objetivos/">Objetivos</a>.</li>
</ul>


<p>Equipo&hellip; Punto interesante.</p>

<p>Desde hoy mismo buscamos dos perfiles que nos ayuden a crecer de forma
exponencial. Este post no trata de esto, por lo que en su momento ya vamos a
sacar las ofertas pertinentes, pero solo a nivel informativo, estamos buscando a
dos seniors de alto nivel para trabajar en nuestras oficinas de Barcelona.</p>

<p>Dado que buscamos perfiles muy concretos, con capacidad para trabajar en un
proyecto <strong><em>opensource</em></strong>, consideramos que es importante tener un compromiso
como empresa con la gente que venga con nosotros a formar parte de nuestro
equipo. Ya nos entendemos :)</p>

<h1>Comunidad</h1>

<p>Finalmente no nos queda m√°s opci√≥n que dar las gracias a las personas que hasta
ahora nos han apoyado y nos han aportado, de alguna forma u otra, y aquellas que
lo har√°n en un futuro.</p>

<p>Consideramos que las menciones especiales se dan por supuestas, as√≠ que,
compa√±eros, muchas gracias.</p>

<p>Esperamos que, y siguiendo de cerca con la problem√°tica que expresaba Javier
Eguiluz en su
<a href="http://symfony.es/noticias/2014/07/24/los-errores-de-la-pagina-28/">blog</a>
podamos llegar a ser √∫tiles para la comunidad, y recibamos el soporte y la ayuda
para crecer a m√°s velocidad. De esta forma nuestro producto ser√° de calidad m√°s
r√°pido y podremos crecer en robustez, fiabilidad y ejecuci√≥n.</p>

<p>Dicho esto, el equipo de Elcodi os manda un saludo a todos desde y os desea un
feliz f√≠n de semana.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objetivos]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/06/objetivos/"/>
    <updated>2014-08-06T12:12:19+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/06/objetivos</id>
    <content type="html"><![CDATA[<h2>Este post es la continuaci√≥n de dos posts anteriores</h2>

<ul>
<li><a href="http://elcodi-blog.github.io/blog/2014/08/04/un-momento-para-reflexionar/">Un momento para reflexionar</a>.</li>
<li><a href="http://elcodi-blog.github.io/blog/2014/08/05/nuestro-roadmap/">Nuestro roadmap</a>.</li>
</ul>


<p>A corto plazo, queremos llegar a una primera versi√≥n estable para la comunidad.
Esta semana hemos puesto la primera piedra de muchas, pero es importante
establecer reglas y procedimientos cuando pondremos las siguientes.</p>

<p>Tenemos un peque√±o set de <a href="https://github.com/elcodi/elcodi/milestones">milestones</a>
para tener una peque√±a gu√≠a de acci√≥n (como veis, esta semana tenemos la release
de la versi√≥n 0.3)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Version 0.3
</span><span class='line'>    - Closed 3 days ago
</span><span class='line'>    - 100% complete  0 open  11 closed
</span><span class='line'>
</span><span class='line'>Version 0.4
</span><span class='line'>    - Due by August 15, 2014
</span><span class='line'>    - 0% complete  0 open  0 closed
</span><span class='line'>
</span><span class='line'>Version 0.5
</span><span class='line'>    - Due by August 29, 2014
</span><span class='line'>    - 17% complete  5 open  1 closed
</span><span class='line'>
</span><span class='line'>Version 0.6
</span><span class='line'>    - Due by September 11, 2014
</span><span class='line'>    - 0% complete  2 open  0 closed</span></code></pre></td></tr></table></div></figure>


<p>Esto significa que vamos a trabajar en mejorar lo que tenemos, sin desarrollar
m√°s l√≥gica de negocio hasta que no tengamos algo un poco m√°s estable, as√≠ como
la comunicaci√≥n para que la gente interesada tenga claro los timings y tengan
m√°s visibilidad a la hora de implementar con Elcodi.</p>

<p>Por ahora nos nos vamos a preocupar demasiado de los BC Breaks. Hay una
<a href="https://github.com/elcodi/elcodi/issues/34">issue</a> abierta para cerrar API,
pero como bien dice <a href="">@hacfi</a> no es especialmente importante en este intervalo
tan enfocado al desarrollo de nuevas funcionalidades. Creemos que cumplir con
un semantic version ahora mismo solo limitar√≠a la arquitectura en muchos
aspectos.</p>

<p>Hasta la versi√≥n 1.0 no habr√° <em>semantic version</em>.</p>

<p>Otro objetivo es, una vez llegado a la primera versi√≥n estable, abrir ya el
market. Dado que a medida que pasa el tiempo la api va cambiando menos, creemos
que no falta demasiado para poder llegar a este punto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nuestro roadmap]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/05/nuestro-roadmap/"/>
    <updated>2014-08-05T12:46:22+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/05/nuestro-roadmap</id>
    <content type="html"><![CDATA[<h5>Este post es la continuaci√≥n de <a href="http://elcodi-blog.github.io/blog/2014/08/04/un-momento-para-reflexionar/">uno anterior</a>.</h5>

<p>Podemos decir con orgullos que tenemos proyecto por mucho tiempo.</p>

<p>La pregunta es&hellip; ¬øy ahora qu√©? Pues bueno, ahora solo hemos andado un uno por
ciento del camino al completo (Creo que la palabra &ldquo;completo&rdquo; es algo
inexistente en nuestro √°mbito&hellip; siempre hay cosas que hacer y mejorar&hellip;).
Almenos, y mientras nuestra lista de Issues y Features no est√© vac√≠a, tenemos
ganas de mejorar nuestro repositorio. Aqu√≠ algunas cosas importantes.</p>

<h3>GeoBundle</h3>

<p>Consideramos que es uno de los problemas m√°s trabajados en todas las empresas
ecommerce, tener un buen sistema geogr√°fico. Tenerlo implica poder segmentar
mucho mejor y cotejar los datos, para sacar buenas m√©tricas y as√≠ mejorar la
experiencia de usuario.</p>

<p>Queremos trabajar en un completo sistema relacional de entidades, de tal forma
que, con comandos simples se puedan customizar y poblar tablas enteras.</p>

<h3>Gesti√≥n de Reglas</h3>

<p>Una parte interesante del proyecto es la utilizaci√≥n de reglas en todo el
modelo. Por ejemplo.</p>

<ul>
<li>¬øCuando se aplica un cup√≥n autom√°tico de cart?</li>
<li>¬øCuando es posible aplicar un cup√≥n cuando se aplica?</li>
<li>¬øCuando es posible mezclar dos productos?</li>
<li>¬øCuando se puede utilizar un Carrier o un m√©todo de pago?</li>
</ul>


<p>Podemos solucionar de una forma muy natural y intruitiva todas estas necesidades
con un buen sistema de reglas.</p>

<h3>Ports and Adapters</h3>

<p>Una de las cosas que mas nos preocupa es el poder trabajar con los componentes
de forma desacoplada. Creo que estamos enmedio del camino, por lo que queremos
aprender como hacerlo mejor. Los &ldquo;Ports and Adapters&rdquo; es una forma de trabajar
con implementaciones propias del componente, implementando adapters para las
implementaciones externas. De esta forma, podemos decir que un Cart tiene un
Customer, sin tener la necesidad de trabajar con CustomerBundle.</p>

<p>Trabajaremos en ello. Seguro.</p>

<h3>Tests</h3>

<p>Hemos hecho los deberes a medias, lo reconocemos, y dado que sabemos que parte
de la confianza de un proyecto open source se genera con la cantidad y,
importante, la calidad de sus tests, vamos a trabajar para que ambas cosas
crezcan a la vez, tanto en los bundles de Elcodi como en los proyectos
BambooStore y BambooAdmin.</p>

<p>Trabajaremos en las bater√≠as de Tests unitarios y funcionales, como hemos hecho
hasta ahora, incluso incrementando notablemente el nivel, y en las baterias
de tests de comportamiento en las Bamboo.</p>

<p>No tenemos muy claro que proyectos utilizar para tales fines. Tenemos en mente
Behat3 y PHPSPec2, as√≠ que toda opini√≥n sobre el tema ser√°s m√°s que bienvenida!</p>

<h3>PaymentSuite</h3>

<p>El proyecto <a href="http://github.com/PaymentSuite">PaymentSuite</a> naci√≥ dentro de
Elcodi.</p>

<p>Es un repositorio de pagos implementado en Symfony2, preparado para trabajar
100% sobre una capa de eventos. Esta capa te permite poder abstraer la
implementaci√≥n del Cart o del Order, as√≠ como la implementaci√≥n del m√©todo de
pago, por lo que la activaci√≥n o desactivaci√≥n de los m√©todos de pago se hacen
triviales, solo activando y configurando.</p>

<p>Desde Elcodi vamos a trabajar en el proyecto.</p>

<h3>ShippingSuite</h3>

<p>Queremos hacer lo mismo que con PaymentSuite. Un proyecto que trabaje sobre la
capa de eventos de Symfony y abstraiga, tanto el Order como la implementaci√≥n
del Carrier.</p>

<p>Con los pagos nos ha funcionado a la perfecci√≥n, as√≠ que seguro que vamos a
seguir el mismo camino para esta necesidad.</p>

<h3>Documentaci√≥n</h3>

<p>El diamante que buscar, encontrar, limpiar y tallar. La famosa documentaci√≥n.
Consideramos que es la verdadera joya de la corona, como dijo una vez @fabpot,
la documentaci√≥n es la parte m√°s complicada del proyecto, y lo sabemos.</p>

<p>Vamos a trabajar para hacer una buena documentaci√≥n en ingl√©s, as√≠ como la
traducci√≥n en el m√°ximo de idiomas posibles.</p>

<ul>
<li>Documentaci√≥n de implementaci√≥n. Estilos que hemos seguido, as√≠ como puntos
importantes a conocer para los contribuidores.</li>
<li>Documentaci√≥n de customizaci√≥n. En realidad consistir√° m√°s en un conjunto de
recetas.</li>
<li>Patrones que hemos utilizado y sus razones de ser</li>
<li>Documentaci√≥n por Bundle.</li>
<li>Modelo</li>
<li>Capa de eventos (dispatchers y listeners)</li>
<li>Capa de servicio</li>
<li>Capa de extensiones de Twig</li>
<li>Capa de configuraci√≥n</li>
<li>Capa de controlador (en el caso de las implementaciones de front y back)</li>
<li>Documentaci√≥n de front. Que necesita un frontend para realizar
implementaciones propias de frontal</li>
</ul>


<p>Sabemos que no ser√° tarea f√°cil, pero al menos estamos seguros que parte del
√©xito de cualquier proyecto, por peque√±o que sea, es la capacidad de documentar
que pueda llegar a tener, as√≠ como lo acogedor que pueda llegar a ser el entorno
del proyecto.</p>

<h3>Comunidad</h3>

<p>Si la documentaci√≥n es nuestro diamante, la comunidad es nuestro carburante. Una
buena comunidad hace el buen proyecto.</p>

<p>Nacimos como un peque√±o proyecto en Symfony y sabemos lo complicado y agresivo
que puede llegar a ser, para una persona no acostumbrada a estar en entornos
tan estrictos, el hecho de participar y involucrarse en el desarrollo de una
tecnolog√≠a.</p>

<p>Pues bien, como lo hemos vivido y sabemos que es, en parte, la clave de nuestro
√©xito, vamos a tratar este punto con especial inter√©s y cari√±o. Elcodi no es tan
solo un c√≥digo en un repositorio, es un conjunto de personas con una idea clara
en la cabeza y con la ilusi√≥n de trabajar juntas para solucionar un problema.</p>

<p>Es por esto que si queremos cuidar el c√≥digo al m√°ximo, debemos cuidar a las
personas que hacen posible que el c√≥digo exista. Tenemos mucho inter√©s en que la
gente que quiera aprender, lo haga, as√≠ que vamos a dise√±ar sistemas de learning
y de formaci√≥n, tanto en Symfony como en Elcodi, para que la gente que quiera
participar con nosotros, lo pueda hacer con el m√°ximo nivel posible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un momento para reflexionar]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/04/un-momento-para-reflexionar/"/>
    <updated>2014-08-04T13:53:28+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/04/un-momento-para-reflexionar</id>
    <content type="html"><![CDATA[<h5>You can find the english version of this post on <a href="http://elcodi-blog.github.io/blog/2014/08/11/a-short-break-for-meditation/">A short break for meditation</a>.</h5>

<p>Algunos de vosotros ya conoc√©is Elcodi. Una serie de componentes hechos desde 0
con componentes de Symfony2 y Doctrine2, especialmente dise√±ados para
proporcionar el m√°ximo de flexibilidad y de robustez a los proyectos Ecommerce.</p>

<p>Programar debe ser siempre un placer.</p>

<p>Este es nuestro objetivo desde el principio, y como todos los objetivos, no hay
eue olvidar que, hasta llegar a ellos, hay un camino no menos importante.</p>

<p>Creo que hemos llegado a un punto de inflexi√≥n donde es importante detenerse,
as√≠ que durante los pr√≥ximos dias vamos a sacar una serie de posts referentes a
nuestra reflexiones donde pondremos sobre la mesa temas importantes como lo que
tenemos hecho hasta ahora, nuestra espectativas, y como vamos a hacer cada
trozo del proyecto durante los pr√≥ximos meses.</p>

<h1>El camino hasta ahora</h1>

<p>Elcodi empez√≥ hace unos meses en una bonita oficina de Barcelona. Nuestro
departamento t√©cnico empez√≥ a dise√±ar el proyecto a principios de a√±o y hasta
ahora, y entre unos cuantos ref√°ctorings interesantes, llegamos a un punto de
equilibrio, en mi opini√≥n, bastante bueno, semilla de nuestra direcci√≥n actual.</p>

<p>Hasta ahora hemos trabajado sobretodo en funcionalidades b√°sicas de inter√©s
com√∫n en cuanto a ecommerce se refiere.</p>

<h3>ProductBundle, AttributeBundle</h3>

<p>Todo lo referente al Producto, Categor√≠a y Marca. El Bundle tiene definido tanto
el modelo como una serie de herramientas para trabajar con √©l. Una de las
√∫ltimas incorporacion ha sido la implementaci√≥n de multiproducto, muy √∫til en
la mayor√≠a de sites ecommerce de hoy en d√≠a.</p>

<p>Tambi√©n soporta multicategor√≠a.</p>

<h3>UserBundle</h3>

<p>Modelo y herramientas para trabajar tanto con Customer como con Administradores
para el Backoffice. Tambi√©n se ha creado una definici√≥n b√°sica de autenticaci√≥n
y de autentificaci√≥n utilizando el ya conocido Secure de Symfony.</p>

<h3>CartBundle</h3>

<p>Gestor de Carts y Orders. Una de las partes troncales de todo ecommerce viene
en un formato bastante sencillo, dise√±ado para poder ser sobreescrito
practicamente en su totalidad. Se ha implementado seguimiento de Orders mediante
hist√≥rico de estados, as√≠ las herramientas de transformaci√≥n de Cart a Order.</p>

<h3>CouponBundle</h3>

<p>Definici√≥n del modelo de cup√≥n. Este bundle est√° particularmente desacoplado de
todos los dem√°s, por lo que solo tiene dependencia con <code>core-bundle</code> y con
<code>currency-bundle</code>. Si se quiere trabajar con el CartBundle de Elcodi, tambi√©n
se ha creado CartCouponBundle, un <strong>nexo</strong> entre ambos modelos que, a partir
de los eventos del EventDispatcher, se encarga del comportamiento asociado a los
cupones del cart.</p>

<h3>GeoBundle</h3>

<p>Semilla para toda la definici√≥n y gesti√≥n de un modelo geogr√°fico completo. Por
ahora, y dado que no hemos dedicado demasiado tiempo a esta parte, solo tenemos
Country como entidad, dejando como campos abiertos los dem√°s campos como
<code>Region</code>, <code>City</code> y <code>Postalcode</code></p>

<p>Otros Bundles m√°s son</p>

<ul>
<li>BannerBundle</li>
<li>LanguageBundle</li>
<li>CurrencyBundle</li>
<li>MediaBundle</li>
<li>MenuBundle</li>
<li>NewsletterBundle</li>
<li>ReferralProgramBundle</li>
<li>RuleBundle</li>
</ul>


<h3>BambooStore</h3>

<p>Hemos desarrollado una primera fase de un Store. Por ahora con camisetas muy
chulas y utilizando el
<a href="https://github.com/PaymentSuite/FreePaymentBundle">FreePaymentBundle</a> de
PaymentSuite.</p>

<p>Es una versi√≥n muy simple, pero seguro muy √∫til como punto de partida para
muchos departamentos t√©cnicos</p>

<h3>BambooAdmin</h3>

<p>Algo nuevo. Hemos estado trabajando el √∫ltimo mes en una base (muy simple y algo
incompleta) de un administrador. Estar√° en constrante desarrollo (junto con
el store y el core, yendo de la mano en cuanto a versiones).</p>

<h3>Implementaci√≥n</h3>

<p>Sabemos que nuestra implementaci√≥n no dejar√° a todo el mundo contento, y la
verdad no queremos que sea as√≠. Consideramos que dejar a todos el mundo contento
es algo imposible, y lo que terminas teniendo es un producto sin ning√∫n tipo de
identidad, por lo que nosotros preferimos definir bien nuestra direcci√≥n, y
desarrollar a pesar de los errores que podamos cometer.</p>

<p>Hemos recibido preguntas muy positivas del porqu√© estamos acopl√°ndonos al
framework Symfony y al ORM de Doctrine2. Pues bien, lo hacemos porque nuestro
objetivo es realmente llegar a ser lo m√°ximo √∫tiles posible, tanto para el
desarrollador como para el usuario final, y la √∫nica forma de que sea as√≠ es
tratar con c√≥digo mantenible, comprensible, documentado y estructurado.</p>

<p>En esta fase del proyecto no creemos que valga la pena a√±adir mas capas de
indirecci√≥n para realizar esta desvinculaci√≥n. El objetivo ahora mismo es
intentar involucrar la comunidad Symfony y recibir feedback de desarrolladores
que intenten montar algo con Elcodi.</p>

<p>En la busca de un tradeoff entre hacer las cosas lo m√°ximo de bien posible, y
tratar de ser algo diferentes a los dem√°s, hemos consideramos que ambas
relaciones son y ser√°n buenas para el proyecto, as√≠ como para los
desarrolladores que decidan trabajar sobre √©l.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Rules and ExpressionLanguage]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/05/20/about-rules-and-expressionlanguage/"/>
    <updated>2014-05-20T16:06:59+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/05/20/about-rules-and-expressionlanguage</id>
    <content type="html"><![CDATA[<blockquote><p>Puedes leer este post en castellano en <a href="http://mmoreram.com/blog/2014/05/20/about-rules-and-expression-language/">blog de Marc Morera</a></p></blockquote>

<p>This bundle works with Symfony&rsquo;s <code>ExpressionLanguage</code></p>

<p>To install it, understand how it works or just get a reference for the syntax of the Expressions you can read the <a href="http://symfony.com/doc/current/components/expression_language/index.html">Official Documentation</a></p>

<h2>Our needs</h2>

<p>We actually might be facing one of the trickiest problems that any experienced e-commerce developer could encounter: behaviour rules. One of the most significant example on this are coupon codes to be applied during the checkout process. How can we actually model the validation rules for a coupon code? The number of variables to be considered in order to validate (and apply) those rules can be daunting, especially when those rules belong to very specific use cases, so the challenge here is how to generalize the programming logic in coupon rules in a project-agnostic way to promote reusability.</p>

<p>Solving this problem is a major concern for us, since it would iron out a lot of similar scenarios where programmable actions should be applied. We could, for instance, design a flexible <code>eventDispatcher</code> that triggers some events during <code>Request</code> lifecycle when certains conditions (rules) are met.</p>

<h2>Our proposal</h2>

<p><a href="https://github.com/elcodi/RuleBundle">Elcodi RuleBundle</a></p>

<p>As usual, we try to sort the solution out enforcing our <em>single responsibility</em> and <em>loose coupling</em> obsessions. The rule engine must be capable of handling them in spite of the context where those rule should be checked and evaluated, and its only responsibility is to return a <code>true</code> or <code>false</code> value.</p>

<p>We modeled two kinds of such evaluable entities, <code>Rule</code> and <code>RuleGroup</code>. The first one, as simple as it looks, represents a single rule that returns a <code>boolean</code> upon validation. The second entity, <code>RuleGroup</code> represents a <code>Collection</code> of <code>Rule</code> so that we can validate the whole group by acting upon each <code>Rule</code> in the collection. Needles to say that the interface used to validate either <code>Rule</code> or <code>RuleGroup</code> should be homogeneous in terms of client code.</p>

<p>This all smells like a <em>Composite Pattern</em> doesnt it? Be it <code>Rule</code> or <code>RuleGroup</code> we just want to issue those objects, that can now be modeled as a self-referencing entity, one command: <em>evaluate yourself</em>.</p>

<h2>Composite Pattern using Doctrine</h2>

<p>Let&rsquo;s step backwards a bit and skim over the <a href="http://sourcemaking.com/design_patterns/composite">Composite Pattern</a> definition.</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Composite_UML_class_diagram_%28fixed%29.svg/900px-Composite_UML_class_diagram_%28fixed%29.svg.png" alt="Composite pattern" /></p>

<p>In this class diagram we have <code>Leaf</code> and <code>Composite</code> as separate entities. <code>Leaf</code> (called also <code>Primitive</code>) can be see as a <code>Rule</code> and the <code>Composite</code> could be our <code>RuleGroup</code>. Since both extends a common abstract class called <code>Component</code>, it is easy to share common behaviors between the class hierarchy. Thus the <code>Component</code> abstract class defines an <code>operation()</code> method that can be overriden by child classes. Obviously this can also be achieved by using an interface as a Component instead of an abstract class.</p>

<p>In our case the <code>operation()</code> method should physically evaluate and resolve the expressions associated with the <code>Component</code>, be it a single <code>Rule</code> or a <code>RuleGroup</code> or a combination of them. Of course this is done by implementing a concrete <code>operation()</code> method in derived classes.</p>

<p>The <code>RuleGroup</code> owns a collection of <code>Component</code>, that can be <code>Rule</code> or <code>RuleGroup</code>. This is the key for correctly mapping those entities to a concrete relational model. Once we do that, we would have forged a <em>whole-part</em> awareness into our Rule model, and we could easily handle complex relations such as <code>RuleGroup</code> containing <code>RuleGroup</code>.</p>

<p><a href="http://docs.doctrine-project.org/en/2.0.x/reference/inheritance-mapping.html">Doctrine inheritance</a> is needed to implement this hierarchy. Either <a href="http://docs.doctrine-project.org/en/2.0.x/reference/inheritance-mapping.html#single-table-inheritance">Single Table Inheritance </a> or <a href="http://docs.doctrine-project.org/en/2.0.x/reference/inheritance-mapping.html#class-table-inheritance">Class Table Inheritance</a> can be used. In this example, we will use STI.</p>

<p>The <code>Rule</code> entity is defined as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * This file is part of the Elcodi package.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Elcodi\RuleBundle\Entity</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class Rule</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Rule</span> <span class="k">extends</span> <span class="nx">AbstractRule</span> <span class="k">implements</span> <span class="nx">RuleInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var ExpressionInterface</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Expression</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$expression</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Specific class parameters, getters and setters</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Return all object contained expressions</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return ArrayCollection Collection of expressions</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getExpressionCollection</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">ArrayCollection</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getExpression</span><span class="p">()));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is <code>RuleGroup</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * This file is part of the Elcodi package.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Elcodi\RuleBundle\Entity</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class RuleGroup</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">RuleGroup</span> <span class="k">extends</span> <span class="nx">AbstractRule</span> <span class="k">implements</span> <span class="nx">RuleGroupInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var Collection</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Rules</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$rules</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Specific class parameters, getters and setters</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Return all object contained expressions</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return ArrayCollection Collection of expressions</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getExpressionCollection</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$expressions</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">/**</span>
</span><span class='line'><span class="sd">         * @var AbstractRuleInterface $rule</span>
</span><span class='line'><span class="sd">         */</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getRules</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$rule</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">$expressions</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span>
</span><span class='line'>                <span class="nv">$expressions</span><span class="p">,</span>
</span><span class='line'>                <span class="nv">$rule</span><span class="o">-&gt;</span><span class="na">getExpressionCollection</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">toArray</span><span class="p">()</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">ArrayCollection</span><span class="p">(</span><span class="nv">$expressions</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then the <code>Component</code> abstract class, which is called <code>AbstractRule</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * This file is part of the Elcodi package.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Elcodi\RuleBundle\Entity\Abstracts</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class AbstractRule</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">AbstractRule</span> <span class="k">extends</span> <span class="nx">AbstractEntity</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Specific class parameters, getters and setters</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Return all object contained expressions</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return Collection Collection of expressions</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">public</span> <span class="k">function</span> <span class="nf">getExpressionCollection</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The method <code>getExpressionCollection()</code> can be called to each member of a <code>AbstractRule</code> ArrayCollection and the correct implementation will be invoked according to the actual type of the object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * @var Collection $rules </span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$rules</span> <span class="k">as</span> <span class="nv">$rule</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/** </span>
</span><span class='line'><span class="sd">     * @var ArrayCollection $expressionCollection </span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="nv">$expressionCollection</span> <span class="o">=</span> <span class="nv">$rule</span><span class="o">-&gt;</span><span class="na">getExpressionCollection</span><span class="p">();</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is how we would map our classes to Doctrine ORM using <a href="http://docs.doctrine-project.org/en/2.0.x/reference/yaml-mapping.html">yaml syntax</a>;</p>

<p>The <code>Rule</code> entity has an <em>unidirectional</em> <code>oneToOne</code> relation with <code>Expression</code>. In UML terms this should be a <a href="http://en.wikipedia.org/wiki/Object_composition#UML_notation">composition association</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">Elcodi\RuleBundle\Entity\Rule</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">entity</span>
</span><span class='line'>    <span class="l-Scalar-Plain">repositoryClass</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\RuleBundle\Repository\RuleRepository</span>
</span><span class='line'>    <span class="l-Scalar-Plain">table</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rule</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">oneToOne</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">expression</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">targetEntity</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\RuleBundle\Entity\Expression</span>
</span><span class='line'>            <span class="l-Scalar-Plain">cascade</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span> <span class="nv">all</span> <span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>RouleGroup</code> holds a <code>manyToMany</code> <em>unidirectional</em> relation with <code>AbstractRule</code>. We are not interested in accesing the <em>parent</em> for a given <code>AbstractRule</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">Elcodi\RuleBundle\Entity\RuleGroup</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">entity</span>
</span><span class='line'>    <span class="l-Scalar-Plain">repositoryClass</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\RuleBundle\Repository\RuleGroupRepository</span>
</span><span class='line'>    <span class="l-Scalar-Plain">table</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rule_group</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">manyToMany</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">rules</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">targetEntity</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\RuleBundle\Entity\Abstracts\AbstractRule</span>
</span><span class='line'>            <span class="l-Scalar-Plain">joinTable</span><span class="p-Indicator">:</span>
</span><span class='line'>                <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rule_group_rule</span>
</span><span class='line'>                <span class="l-Scalar-Plain">joinColumns</span><span class="p-Indicator">:</span>
</span><span class='line'>                    <span class="l-Scalar-Plain">rule_group_id</span><span class="p-Indicator">:</span>
</span><span class='line'>                        <span class="l-Scalar-Plain">referencedColumnName</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">id</span>
</span><span class='line'>                <span class="l-Scalar-Plain">inverseJoinColumns</span><span class="p-Indicator">:</span>
</span><span class='line'>                    <span class="l-Scalar-Plain">rule_id</span><span class="p-Indicator">:</span>
</span><span class='line'>                        <span class="l-Scalar-Plain">referencedColumnName</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">id</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally the mapping for the Component interface, the <code>AbstractRule</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">Elcodi\RuleBundle\Entity\Abstracts\AbstractRule</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">entity</span>
</span><span class='line'>    <span class="l-Scalar-Plain">repositoryClass</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\RuleBundle\Repository\AbstractRuleRepository</span>
</span><span class='line'>    <span class="l-Scalar-Plain">inheritanceType</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">single_table</span>
</span><span class='line'>    <span class="l-Scalar-Plain">discriminatorColumn</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">discr</span>
</span><span class='line'>        <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">string</span>
</span><span class='line'>    <span class="l-Scalar-Plain">discriminatorMap</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">rule</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\RuleBundle\Entity\Rule</span>
</span><span class='line'>        <span class="l-Scalar-Plain">rule_group</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\RuleBundle\Entity\RuleGroup</span>
</span><span class='line'>    <span class="l-Scalar-Plain">fields</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we used STI, this mapping will only create a single table with a discriminator column used by Doctrine in order to identify the actual type of the entity stored on a given row.</p>

<p>As for now, we have a working implementation that can be used to create associations between <code>AbstractRule</code> and other doctrine entities. What we miss is <em>how</em> rules are processed, or better, how <em>expressions</em> owned by the rules can be evaluated and in which <em>context</em>.</p>

<h2>Context configuration and customization</h2>

<p>We define a <em>rule execution context</em> as a collection of elements that the rule has access to at expression evaluation time.</p>

<p>The natural way of evaluating generic expressions in Symfony is certainly the <a href="http://symfony.com/doc/current/components/expression_language/index.html">ExpressionLanguage</a>, which lies at the heart of our implementation and provides the expression evaluation. We will just use its standard parameter passing syntax to handle our context.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$language</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExpressionLanguage</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Apple</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$variety</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$apple</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Apple</span><span class="p">();</span>
</span><span class='line'><span class="nv">$apple</span><span class="o">-&gt;</span><span class="na">variety</span> <span class="o">=</span> <span class="s1">&#39;Honeycrisp&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertTrue</span><span class="p">(</span><span class="nv">$language</span><span class="o">-&gt;</span><span class="na">evaluate</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;fruit.variety === &quot;Honeycrisp&quot;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;fruit&#39;</span> <span class="o">=&gt;</span> <span class="nv">$apple</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, as seen in the <a href="http://symfony.com/doc/current/components/expression_language/introduction.html#passing-in-variables">official documentation</a>, the expression <code>fruit.variety</code> is evaluated in a context where <code>fruit</code> is an instance of the <code>Apple</code> class. The <code>assert</code> obviously resolves to <code>true</code>.
In the next example, the <code>assert</code> will fail.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$language</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExpressionLanguage</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Apple</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$variety</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$apple</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Apple</span><span class="p">();</span>
</span><span class='line'><span class="nv">$apple</span><span class="o">-&gt;</span><span class="na">variety</span> <span class="o">=</span> <span class="s1">&#39;Arlet&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertTrue</span><span class="p">(</span><span class="nv">$language</span><span class="o">-&gt;</span><span class="na">evaluate</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;fruit.variety === &quot;Honeycrisp&quot;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;fruit&#39;</span> <span class="o">=&gt;</span> <span class="nv">$apple</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Evaluation contexts can be passed to the rule engine in two different ways:</p>

<ul>
<li>The easy way: pass the context to the <code>RuleManager</code> when evaluating a specific rule.</li>
<li>The complex yet powerful way: by using <strong>Context configurators</strong> (see next paragraph below for details)</li>
</ul>


<p>In the following example we are retrieving the <code>somecode</code> named rule, whose stored expression is <code>customer.id in [1..100]</code>. We evaluate this rule passing <code>array('customer' =&gt; $myCustomer)</code> as the evaluation context.</p>

<p>The expression will be evaluated according to the actual <code>id</code> for <code>$myCustomer</code> passed object being a number between 0 and 100.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Rule with code &quot;somecode&quot; has this expression assigned: </span>
</span><span class='line'><span class="sd"> * &quot;customer.id in [1..100]&quot;</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="nv">$myCustomer</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>
</span><span class='line'><span class="nv">$ruleManager</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;rule_manager&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$ruleManager</span><span class="o">-&gt;</span><span class="na">evaluateByCode</span><span class="p">(</span><span class="s1">&#39;somecode&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;customer&#39;</span>  <span class="o">=&gt;</span>  <span class="nv">$myCustomer</span>
</span><span class='line'><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using Context Configurators</h3>

<p>In real scenarios, we would need to access several services from within our expressions in order to lay powerful rules.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Rule with code &quot;somecode&quot; has this expression assigned: </span>
</span><span class='line'><span class="sd"> * &quot;customer_wrapper.getCustomer().getId() in [1..100]&quot;</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ruleManager</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;rule_manager&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$ruleManager</span><span class="o">-&gt;</span><span class="na">evaluateByCode</span><span class="p">(</span><span class="s1">&#39;somecode&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the example above our expression is accessing the <code>customer_wrapper</code> service, which holds the logic necessary to return on instance of the current <code>Customer</code>. If we want to evaluate the rule <strong>without</strong> having to pass the <code>customer_wrapper</code> as a parameter to the execution context in the <code>evaluateByCode()</code> method as seen in the other example we will have to exploit <strong>context configurators</strong>, which are tagged services implementing <code>ContextConfigurationInterface</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * This file is part of the Elcodi package.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Elcodi\RuleBundle\Configuration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Doctrine\Common\Persistence\ObjectManager</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Elcodi\RuleBundle\Configuration\Interfaces\ContextConfigurationInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Elcodi\RuleBundle\Services\Interfaces\ContextAwareInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class ContextConfiguration</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ContextConfiguration</span> <span class="k">implements</span> <span class="nx">ContextConfigurationInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var ObjectManager</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Object manager</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$objectManager</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param ObjectManager $objectManager Object manager</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">ObjectManager</span> <span class="nv">$objectManager</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">objectManager</span> <span class="o">=</span> <span class="nv">$objectManager</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param ContextAwareInterface $contextAware</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">configureContext</span><span class="p">(</span><span class="nx">ContextAwareInterface</span> <span class="nv">$contextAware</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$contextAware</span><span class="o">-&gt;</span><span class="na">addContextElement</span><span class="p">(</span><span class="s1">&#39;manager&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">objectManager</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The example above shows how we can use a context configurator so that a service like the <code>doctrine.orm.default.entity_manager</code> can be bound to the rule execution context named as <code>manager</code>.
Whis means that <em>any</em> expression can refer <code>manager</code> and be sure that it refers to the default entity manager. <code>manager.getRepository('ElcodiUserBundle:Customer')</code> would be perfecly valid and will work globally, no need to pass the entity manager at expression evaluation time.</p>

<p>The context configurator must be tagged as follows in order to be collected by <code>RuleBundle</code> compiler passes and passed to the rule engine.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">elcodi.core.rule.configuration.context</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="err">%</span><span class="l-Scalar-Plain">elcodi.core.rule.configuration.context.class%</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">entity_manager</span><span class="p-Indicator">:</span> <span class="err">@</span><span class="l-Scalar-Plain">doctrine.orm.entity_manager</span>
</span><span class='line'>        <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">elcodi.rule_context_configuration</span> <span class="p-Indicator">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ExpressionLanguage configuration and customization</h2>

<p>We also can exploit a very powerful feature that Symfony <em>ExpressionLannguage</em> deliver us: creating functions. We can create EP functions and inject them to the rule engine, making them available to all our expressions. This is done by defining a service that implement <code>ExpressionLanguageConfigurationInterface</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * This file is part of the Elcodi package.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Elcodi\RuleBundle\Configuration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Elcodi\RuleBundle\Configuration\Interfaces\ExpressionLanguageConfigurationInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Elcodi\RuleBundle\Services\Interfaces\ExpressionLanguageAwareInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class ExpressionLanguageConfiguration</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ExpressionLanguageConfiguration</span> <span class="k">implements</span> <span class="nx">ExpressionLanguageConfigurationInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var ContainerInterface</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Container</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$container</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param ContainerInterface $container Container</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">ContainerInterface</span> <span class="nv">$container</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">container</span> <span class="o">=</span> <span class="nv">$container</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Configures expression language</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param ExpressionLanguageAwareInterface $expressionLanguageAware Expression Language aware</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">configureExpressionLanguage</span><span class="p">(</span><span class="nx">ExpressionLanguageAwareInterface</span> <span class="nv">$expressionLanguageAware</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$expressionLanguage</span> <span class="o">=</span> <span class="nv">$expressionLanguageAware</span><span class="o">-&gt;</span><span class="na">getExpressionLanguage</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$expressionLanguage</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="s1">&#39;service&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;$this-&gt;get(%s)&#39;</span><span class="p">,</span> <span class="nv">$arg</span><span class="p">);</span>
</span><span class='line'>            <span class="p">},</span> <span class="k">function</span> <span class="p">(</span><span class="k">array</span> <span class="nv">$variables</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$expressionLanguage</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="s1">&#39;parameter&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;$this-&gt;getParameter(%s)&#39;</span><span class="p">,</span> <span class="nv">$arg</span><span class="p">);</span>
</span><span class='line'>            <span class="p">},</span> <span class="k">function</span> <span class="p">(</span><span class="k">array</span> <span class="nv">$variables</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">container</span><span class="o">-&gt;</span><span class="na">getParameter</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example we just defined a couple of functions, <code>service()</code> and <code>parameter()</code>. Those are the same functions that get registered when using EL for configuring services in the <code>DependencyInjection</code> component.
They also need the whole container in order to work properly (yes, normally you shouldn&rsquo;t do that but this is an example and in this case you actually have full control control of what is exposed since <em>you</em> write the expression function).</p>

<p>For this to work, this service also must be tagged. Definition follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">elcodi.core.rule.configuration.expression_language</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="err">%</span><span class="l-Scalar-Plain">elcodi.core.rule.configuration.expression_language.class%</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">service_container</span><span class="p-Indicator">:</span> <span class="err">@</span><span class="l-Scalar-Plain">service_container</span>
</span><span class='line'>        <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">elcodi.rule_expression_language_configuration</span> <span class="p-Indicator">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will make it possible to execute a rule of the likes <code>service("my_service")-&gt;getValue(parameter("my_value"))</code>. No need to define a context configurator to access <code>my_service</code>.</p>

<p>The <code>RuleManager</code> will silently discard any <code>SyntaxError</code> and return <code>false</code> on such cases. This is because it is not possible to differentiate between real syntax errors and inconsistent use of the object/variables passed to the context. An expression that depends on an outdated version of an object, be it a service or an entity, should not break the evaluation loop.</p>

<h2>Cupons and Rules</h2>

<p>We not have all the ingredients to design a rule based coupon system for our e-commerce site. Let&rsquo;s see how we can bake the cake.</p>

<h3>Prerequisites</h3>

<ul>
<li>We would model a <code>ManyToMany</code> unidirectional relation between <code>Cupon</code> and <code>AbstractRule</code>.</li>
<li>We would model a use case for customers who apply a discount to theirs checkouts by inserting a coupon code.</li>
</ul>


<h3>Steps</h3>

<ul>
<li>Customer enters the coupon.</li>
<li>The <code>CouponManager</code> tries to apply the Coupon to the customer&rsquo;s cart.</li>
<li>A <code>PreApplyToCart</code> event is fired.</li>
<li>An observer for the <code>PreApplyToCart</code> event searches for all Rules associated with the Coupon and evaluates their expressions.</li>
<li>If one of those expression evaluates to <code>false</code>, the whole evaluation will fail. A specific <code>Exception</code> will be thrown.</li>
<li>If all expressions evaluates <code>true</code>, the Coupon discount will be applied to current customer&rsquo;s cart.</li>
</ul>


<h2>Conclusion</h2>

<p><code>RuleBundle</code> is a fairly powerful tool that can be used as a seed for more specific needs such as <strong>discount campaigns</strong>, <strong>customer groups</strong>, <strong>cart rules</strong>, <strong>catalog rules</strong> and pretty much everything that is based on chaining expressions.</p>

<p>As always, there is room for improvement. You can help us with that by <a href="https://github.com/elcodi/elcodi/tree/master/src/Elcodi/RuleBundle">contribuiting</a> or just by letting us know your opinions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week 2 - Where we are now]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/05/05/week-2-where-we-are-now/"/>
    <updated>2014-05-05T10:38:46+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/05/05/week-2-where-we-are-now</id>
    <content type="html"><![CDATA[<p>There is really a lot of work to do!</p>

<p>These first few weeks of our journey are as tough as we expected. Releasing an open source project is a big challenge, so we would like to explain a little bit more of ourselves.</p>

<h2>Who is Elcodi</h2>

<p>Elcodi is a project sponsored by Barcelona-based startup accelerator Befactory. At the present day, three of the incubated startup are now real companies, two of them having a business model that pivots on an e-commerce application. In order to meet they crazy time-to-market deadlines that seldom are imposed to accelerated startups, it was essential to build some sort of easy customizable tech. This is how we migrated <a href="http://chicplace.com">http://chicplace.com</a> and <a href="http://fancybox.com">http://fancybox.com</a> from heavily modified, unmaintainable Prestashop installations to Symfony 2 applications sharing a common core.</p>

<p>This common core, which is already deployed as production code that powers real companies, is the direct ancestor of Elcodi code. This is certainly not new or uncommon, thousands of developers usually work with a stable base of reusable code in order to kick-off new projects.</p>

<p>We started to reflect on the actual value of what we have been building: it fulfilled our own need to kick-start a transactional web application the right way, so maybe it could be useful for others too. Could a B2B solution be built on top of this platform? Maybe, but the corporate software world is a tough beast to tame for a small startup.</p>

<p>Everything started to look clearer when we began to look at it in the perspective of releasing our work as an open source project: we would immediately be able to see if our work was worth and if something valuable could be built on top of it.</p>

<h2>Community</h2>

<p>The first thing to do is to gain trust from the community: you, as a developer, are the ultimate judge. We would like to share our ideas and commits from the work of last months, once they are polished enough to be displayed in public. We would like Elcodi to be an open forum to publicly discuss best practices in e-commerce development with Symfony 2.</p>

<p>We want and need to hear your opinions.</p>

<h2>Next steps</h2>

<p>During the following weeks we will be mainly focused on:</p>

<ul>
<li>Releasing of a simple frontend app with Elcodi default model implementation. Seeing is believing, so this is a top priority!</li>
<li>Writing recipes for extending the default implementation, override Elcodi <code>Services</code> and <code>Model</code> from the containing Symfony 2 app.</li>
<li>Defining the strategy for reaching a <code>v1.0</code> with a developer-oriented MVP</li>
<li><code>KISS</code>ing as usual</li>
</ul>


<p>As for now, patience and hard work is what&rsquo;s needed!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is Elcodi?]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/04/17/what-is-elcodi/"/>
    <updated>2014-04-17T17:23:39+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/04/17/what-is-elcodi</id>
    <content type="html"><![CDATA[<p>How many e-commerce solutions are there out in the wild?</p>

<p>Let me rephrase that: how many usable <em>developer friendly</em> e-commerce solutions are there?</p>

<p>Once again. how many development platform are there that won&rsquo;t end with you saying &ldquo;Ok, I&rsquo;ll do it myself&rdquo;</p>

<p>We do not a have definitive answer to this challenging problem. As many of you, we have been asking those questions to ourselves when we needed to start new projects from scratch. Yet those doubts kept on bouncing in our <code>HEAD</code>:</p>

<ul>
<li>What is the optimal balance between <em>flexibility and development speed</em>?</li>
<li>What are the basic components that should be there <em>without reinventing the wheel</em>?</li>
<li>How can we design those components <em>in a generalized way</em>?</li>
</ul>


<p>Symfony developers already got very powerful tools that can be exploited to resolve these doubts. We would like to share with you our path along the search for this holy grail by publishing the internals of the e-commerce applications we&rsquo;ve been developing over the last months.</p>

<p>Meet <a href="http://elcodi.io">Elcodi</a>, a suite of Symfony2 e-commerce bundles that focus on:</p>

<ul>
<li>Designing loosely coupled components</li>
<li>Liskov is your friend: using abstract as when defining contracts among components</li>
<li>Exploiting Symfony2 DependencyInjection component to expose easy customization of behaviours and models</li>
<li>Using Factory injections in services to that objects are always created in a consistent state</li>
<li>EventDispatcher FTW: events, events, events. First rule to avoid code entanglement</li>
<li>Rigorous taxonomy: giving name to things may be an art, but the reward is massive</li>
</ul>


<p>Are you willing to join us in this journey?</p>

<p>Let&rsquo;s talk about it on <a href="https://github.com/elcodi/elcodi">https://github.com/elcodi/elcodi</a></p>

<p>Cheers!</p>
]]></content>
  </entry>
  
</feed>
