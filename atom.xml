<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Elcodi blog]]></title>
  <link href="http://elcodi-blog.github.io/atom.xml" rel="self"/>
  <link href="http://elcodi-blog.github.io/"/>
  <updated>2015-05-12T11:29:35+02:00</updated>
  <id>http://elcodi-blog.github.io/</id>
  <author>
    <name><![CDATA[Elcodi Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Translating Elcodi]]></title>
    <link href="http://elcodi-blog.github.io/blog/2015/05/12/translating-elcodi/"/>
    <updated>2015-05-12T11:01:20+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2015/05/12/translating-elcodi</id>
    <content type="html"><![CDATA[<p>Hi everyone.</p>

<p>This is a call to the multi language fairy. Our project is still learning some
new and nice languages. Bamboo talks English, Spanish, Catalan and some French,
but we want to be a project for everyone in this world, no matter where you
live, no matter what you talk.</p>

<p>We are looking for some contributors to maintain some other interesting
translations. Indeed, all of them!</p>

<ul>
<li>Euskal</li>
<li>Galego</li>
<li>Deutsch</li>
<li>Italiano</li>
<li>Português</li>
<li>Nederlands</li>
<li>&hellip;</li>
</ul>


<p>We are looking for smaller translations, for those shops that want to provide
specific and local languages.</p>

<ul>
<li>Irish</li>
<li>Andalúz</li>
<li>Sardu</li>
<li>Esperanto</li>
<li>&hellip;</li>
</ul>


<p>Finally we are looking for some popular and fictitious languages. We want to be
for everyone, remember?</p>

<ul>
<li>Klingon</li>
<li>Elvish</li>
<li>Dwarf language</li>
<li>Lorem Ipsum</li>
<li>Random language</li>
<li>&hellip;</li>
</ul>


<p>If you have any interest in translate the application here, please tell us
something nice <a href="https://github.com/elcodi/bamboo/issues/450">here</a> or keep in
touch with us at <a href="http://gitter.im/elcodi/elcodi">gitter</a>.</p>

<p>Enjoy your week :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing the Directors in Symfony]]></title>
    <link href="http://elcodi-blog.github.io/blog/2015/04/20/introducing-the-directors-in-symfony/"/>
    <updated>2015-04-20T12:36:03+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2015/04/20/introducing-the-directors-in-symfony</id>
    <content type="html"><![CDATA[<p>Have you ever worked with Entity Managers, Repositories or Factories in Symfony?
Yes, for sure you&rsquo;ve done that. Indeed, if you work with entities in your
project, these type of objects will be your daily, so we want to introduce you a
new concept, born in <a href="http://github.com/elcodi/elcodi">Elcodi project</a> and
created in order to simplify the management of an entity inside a service,
fixture or functional test.</p>

<p>Please, welcome the Director class.</p>

<h3>Director</h3>

<p>Imagine you have a service called <code>CartWrapper</code>. This service is meant to be a
wrapper of a cart, and its behavior is that easy.</p>

<ul>
<li>If you require an existing user&rsquo;s cart, retrieve it from database and return
it</li>
<li>Otherwise, create a new Cart, save it and return it.</li>
</ul>


<p>Let&rsquo;s see a small implementation of such service.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * CartWrapper</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">cartWrapper</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var EntityManager</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Cart entity manager</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$entityManager</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var CartFactory</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Cart factory</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$cartFactory</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var CartRepository</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Cart repository</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$cartRepository</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param EntityManager  $entityManager  Entity manager</span>
</span><span class='line'><span class="sd">     * @param CartFactory    $cartFactory    Cart factory</span>
</span><span class='line'><span class="sd">     * @param CartRepository $cartRepository Cart repository</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">EntityManager</span> <span class="nv">$entityManager</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">CartFactory</span> <span class="nv">$cartFactory</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">CartRepository</span> <span class="nv">$cartRepository</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">entityManager</span> <span class="o">=</span> <span class="nv">$entityManager</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">cartFactory</span> <span class="o">=</span> <span class="nv">$cartFactory</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">cartRepository</span> <span class="o">=</span> <span class="nv">$cartRepository</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Load cart</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param UserInterface $user User</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return CartInterface</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">loadCart</span><span class="p">(</span><span class="nv">$user</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$userCart</span> <span class="o">=</span> <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">cartRepository</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">findOneBy</span><span class="p">([</span>
</span><span class='line'>                <span class="s1">&#39;user&#39;</span> <span class="o">=&gt;</span> <span class="nv">$user</span>
</span><span class='line'>            <span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nv">$userCart</span> <span class="nx">instanceof</span> <span class="nx">CartInterface</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">$newCart</span> <span class="o">=</span> <span class="nv">$this</span>
</span><span class='line'>                <span class="o">-&gt;</span><span class="na">cartFactory</span>
</span><span class='line'>                <span class="o">-&gt;</span><span class="na">create</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">$this</span>
</span><span class='line'>                <span class="o">-&gt;</span><span class="na">entityManager</span>
</span><span class='line'>                <span class="o">-&gt;</span><span class="na">persist</span><span class="p">(</span><span class="nv">$newCart</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">$this</span>
</span><span class='line'>                <span class="o">-&gt;</span><span class="na">entityManager</span>
</span><span class='line'>                <span class="o">-&gt;</span><span class="na">flush</span><span class="p">(</span><span class="nv">$newCart</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">$userCart</span> <span class="o">=</span> <span class="nv">$newCart</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$userCart</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, this services needs 3 dependencies, and would be difficult to
reduce this number in order to reduce the complexity of the class. This service
is intended to do one single thing.</p>

<p>What is the strategy here? Do you know what the <em>Facade pattern</em> is, right?
Well, the way for solving this amount of classes is creating a new facade called
Director, intended to provide a small set of usable methods simplifying the
management of the entities.</p>

<p>Let&rsquo;s see the implementation of this class. You can find the real implementation
in <a href="https://github.com/elcodi/elcodi">elcodi/core</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">namespace</span> <span class="nx">Elcodi\Component\Core\Services</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Doctrine\Common\Persistence\ObjectManager</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Doctrine\Common\Persistence\ObjectRepository</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">UnexpectedValueException</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Elcodi\Component\Core\Factory\Abstracts\AbstractFactory</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class ObjectDirector</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * This object is a facade for these different persistence-related elements</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * * Object Manager</span>
</span><span class='line'><span class="sd"> * * Repository</span>
</span><span class='line'><span class="sd"> * * Factory</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * Allows final user to manage in a simple way an entity or a set of entities.</span>
</span><span class='line'><span class="sd"> * Provides a reduced (but useful) set of methods.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ObjectDirector</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var ObjectManager</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Manager</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$manager</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var ObjectRepository</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Repository</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$repository</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var AbstractFactory</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Factory</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$factory</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param ObjectManager    $manager    Manager</span>
</span><span class='line'><span class="sd">     * @param ObjectRepository $repository Repository</span>
</span><span class='line'><span class="sd">     * @param AbstractFactory  $factory    Factory</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">ObjectManager</span> <span class="nv">$manager</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">ObjectRepository</span> <span class="nv">$repository</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">AbstractFactory</span> <span class="nv">$factory</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">manager</span> <span class="o">=</span> <span class="nv">$manager</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">repository</span> <span class="o">=</span> <span class="nv">$repository</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">factory</span> <span class="o">=</span> <span class="nv">$factory</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Finds an object by its primary key / identifier.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param mixed $id The identifier.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return object|null Fetched object</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">find</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">repository</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Finds all objects in the repository.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return array Set of fetched objects</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">findAll</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">repository</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">findAll</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Finds objects by a set of criteria.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Optionally sorting and limiting details can be passed. An implementation may throw</span>
</span><span class='line'><span class="sd">     * an UnexpectedValueException if certain values of the sorting or limiting details are</span>
</span><span class='line'><span class="sd">     * not supported.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param array        $criteria</span>
</span><span class='line'><span class="sd">     * @param array|null   $orderBy</span>
</span><span class='line'><span class="sd">     * @param integer|null $limit</span>
</span><span class='line'><span class="sd">     * @param integer|null $offset</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return array Set of fetched objects</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @throws UnexpectedValueException</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">findBy</span><span class="p">(</span>
</span><span class='line'>        <span class="k">array</span> <span class="nv">$criteria</span><span class="p">,</span>
</span><span class='line'>        <span class="k">array</span> <span class="nv">$orderBy</span> <span class="o">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">$limit</span> <span class="o">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">$offset</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">repository</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">findBy</span><span class="p">(</span>
</span><span class='line'>                <span class="nv">$criteria</span><span class="p">,</span>
</span><span class='line'>                <span class="nv">$orderBy</span><span class="p">,</span>
</span><span class='line'>                <span class="nv">$limit</span><span class="p">,</span>
</span><span class='line'>                <span class="nv">$offset</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Finds a single object given a criteria.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param array $criteria The criteria.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return object|null Fetched object</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">findOneBy</span><span class="p">(</span><span class="k">array</span> <span class="nv">$criteria</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">repository</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">findOneBy</span><span class="p">(</span>
</span><span class='line'>                <span class="nv">$criteria</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Create a new entity instance, result of the factory creation method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return Object new Instance</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">create</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">factory</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">create</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Save the instance into database. Given data can be a single object or</span>
</span><span class='line'><span class="sd">     * an array of objects.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * This method will persist and flush given object/array of objects</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param object|array $data Data to save into database</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return object|array Saved data</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">save</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$data</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">foreach</span> <span class="p">(</span><span class="nv">$data</span> <span class="k">as</span> <span class="nv">$entity</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$this</span>
</span><span class='line'>                    <span class="o">-&gt;</span><span class="na">manager</span>
</span><span class='line'>                    <span class="o">-&gt;</span><span class="na">persist</span><span class="p">(</span><span class="nv">$entity</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span>
</span><span class='line'>                <span class="o">-&gt;</span><span class="na">manager</span>
</span><span class='line'>                <span class="o">-&gt;</span><span class="na">persist</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">manager</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">flush</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Remove the instance from the database. Given data can be a single object or</span>
</span><span class='line'><span class="sd">     * an array of objects.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * This method will remove and flush given object/array of objects</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param object|array $data Data to remove from database</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return object|array Removed data</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">remove</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$data</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">foreach</span> <span class="p">(</span><span class="nv">$data</span> <span class="k">as</span> <span class="nv">$entity</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$this</span>
</span><span class='line'>                    <span class="o">-&gt;</span><span class="na">manager</span>
</span><span class='line'>                    <span class="o">-&gt;</span><span class="na">remove</span><span class="p">(</span><span class="nv">$entity</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span>
</span><span class='line'>                <span class="o">-&gt;</span><span class="na">manager</span>
</span><span class='line'>                <span class="o">-&gt;</span><span class="na">remove</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">manager</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">flush</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This implementation provides us a simple set of actions for our entities (maybe
the most used).</p>

<ul>
<li>find(&hellip;)</li>
<li>findAll()</li>
<li>findBy(&hellip;)</li>
<li>findOneBy(&hellip;)</li>
<li>create()</li>
<li>save()</li>
<li>remove()</li>
</ul>


<p>This implementation is so useful for many scenarios, but in our case what we
found is that using Directors, our tests are reduced in many ways (less lines of
code, less complexity, more effectiveness), and the fixtures are totally
improved, focusing on the most important thing: our business logic.</p>

<h3>Directors as a service</h3>

<p>To use a Director as a service you need to define your repository as a service
as well, assuming that your factory is already a service called <code>cart_factory</code>
and assuming as well that we will work with the default entity manager
<code>doctrine.orm.default_entity_manager</code> (not a good practice, but let&rsquo;s suppose it
is in this example).</p>

<p>Let&rsquo;s see how to define your repository as a service.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Doctrine Repository</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">cart_repository</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Doctrine\Common\Persistence\ObjectRepository</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">elcodi.provider.repository</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">getRepositoryByEntityNamespace</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">My\Cart\Namespace</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will find the service <code>elcodi.provider.repository</code> inside the Bundle
<code>elcodi/core-bundle</code>. This bundle is not coupled to any Elcodi functionality so
you can use it in your own projects as a set of isolated features.</p>

<p>Finally, let&rsquo;s create the Director definition by using the factory pattern.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Directors</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">elcodi.director.cart</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\Component\Core\Services\ObjectDirector</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">doctrine.orm.default_entity_manager</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">cart_repository</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">cart_factory</span>
</span></code></pre></td></tr></table></div></figure>


<p>Take in account that each entity will have it&rsquo;s own Director instance, so this
is why we use the factory pattern here.</p>

<p>How can we use the new Director service in our first <code>CartWrapper</code>
implementation by changing and improving the services dependencies? Let&rsquo;s do
that!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * CartWrapper</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">cartWrapper</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var ObjectDirector</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Cart director</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$cartDirector</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param ObjectDirector $cartDirector Cart Director</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">ObjectDirector</span> <span class="nv">$cartDirector</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">cartDirector</span> <span class="o">=</span> <span class="nv">$cartDirector</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Load cart</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param UserInterface $user User</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return CartInterface</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">loadCart</span><span class="p">(</span><span class="nv">$user</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$userCart</span> <span class="o">=</span> <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">cartDirector</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">findOneBy</span><span class="p">([</span>
</span><span class='line'>                <span class="s1">&#39;user&#39;</span> <span class="o">=&gt;</span> <span class="nv">$user</span>
</span><span class='line'>            <span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nv">$userCart</span> <span class="nx">instanceof</span> <span class="nx">CartInterface</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">$newCart</span> <span class="o">=</span> <span class="nv">$this</span>
</span><span class='line'>                <span class="o">-&gt;</span><span class="na">cartDirector</span>
</span><span class='line'>                <span class="o">-&gt;</span><span class="na">create</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">$this</span>
</span><span class='line'>                <span class="o">-&gt;</span><span class="na">cartDirector</span>
</span><span class='line'>                <span class="o">-&gt;</span><span class="na">save</span><span class="p">(</span><span class="nv">$newCart</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">$userCart</span> <span class="o">=</span> <span class="nv">$newCart</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$userCart</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://github.com/elcodi/elcodi">Elcodi</a> is fully based on the usage of
Directors. This does <strong>not</strong> mean that we must use Directors everywhere.
Sometimes you need to use only one of the wrapped objects, and in that case you
must inject them one by one, so please, before using this new object think about
it, think about the pros and the contras and be responsible about your
implementation.</p>

<p>Don&rsquo;t hesitate to comment about what do you think about this feature.</p>

<p>Have a nice day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First stable release]]></title>
    <link href="http://elcodi-blog.github.io/blog/2015/04/04/first-stable-release/"/>
    <updated>2015-04-04T19:51:28+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2015/04/04/first-stable-release</id>
    <content type="html"><![CDATA[<p>Hi there everyone.</p>

<p>The Elcodi core team is glad to announce that next June 1st, we will tag the
first stable release of the project (Elcodi will be still based on Symfony, you
know how much we like Symfony and its community&hellip;)</p>

<h3>Elcodi v1.0</h3>

<ul>
<li>Until this day, we&rsquo;ll finish stabilization of all packages</li>
<li>We will work so hard to finish a documentation for all of you</li>
<li>All available features will be covered by unit, functional and behavioral
tests, using PHPUnit and Behat 3.0</li>
<li>After <code>v1.0</code> we will start working on <code>v3.0</code>. This new version will be
released next November in order to be compatible with Symfony <code>v3.*</code>. It means
as well that this new version will introduce some BC Break, of course.</li>
</ul>


<p>So, we have less than 2 months to stabilize Elcodi package, and we need your
help.</p>

<p>Some days ago, we announced the
<a href="http://blog.elcodi.io/blog/2015/03/03/elcodi-bug-hunting/">Elcodi Bug Hunting</a>,
remember? Well, initially this contest was during this past March, but we have
decided to enlarge the period of the contest until June 1st, the day of the
release.</p>

<p>Until now, we have received some help from some people. Special thanks for them.</p>

<ul>
<li><a href="https://github.com/elcodi/elcodi/pulls?q=is%3Apr+is%3Aclosed+author%3Acordoval">cordoval</a></li>
<li><a href="https://github.com/elcodi/elcodi/pulls?q=is%3Apr+is%3Aclosed+author%3Ajaviereguiluz">javiereguiluz</a></li>
<li><a href="https://github.com/elcodi/elcodi/pulls?q=is%3Apr+is%3Aclosed+author%3Ahacfi">hacfi</a></li>
<li><a href="https://github.com/elcodi/elcodi/pulls?q=is%3Apr+is%3Aclosed+author%3Amickaelandrieu">mickaelandrieu</a></li>
<li><a href="https://github.com/elcodi/elcodi/pulls?q=is%3Apr+is%3Aclosed">And many more</a></li>
</ul>


<p>But we need some extra help in order to accomplish our goal.</p>

<h3>Win the MacBookPro</h3>

<p>Easy and super-fast. Do you want to win the MacBookPro? Easy, just help us with
some fast actions and you will be able to win the
<strong>Apple Macbook Pro 2014 Retina</strong> (of course, with an Android/Ubuntu/Windows
alternative or any geeky stuff with same price)</p>

<ul>
<li>Follow us on twitter (@elcodi_dev)</li>
<li>Give <a href="http://github.com/elcodi/elcodi">Elcodi repository</a> a star</li>
<li>Give <a href="http://github.com/elcodi/bamboo">Bamboo repository</a> a star</li>
<li>Give <a href="http://github.com/elcodi/docs">Elcodi docs repository</a> a star</li>
<li>Make a funny tweet about it, for example, sharing this post or trolling us
a little bit :)</li>
</ul>


<p>After that you will have 5 points, enough to access to the MacBookPro raffle.</p>

<h3>A little bit more&hellip;</h3>

<p>Are you interested in E-commerce and do you like Symfony? Well, there are some
extra things you can do to help. You can win the battle and win the
<strong>Ipad Air</strong></p>

<ul>
<li>[Download, install and try Bamboo)[<a href="http://elcodi.io/docs/quick-start.html">http://elcodi.io/docs/quick-start.html</a>)</li>
<li>If you find any kind of issue, please open an Issue in our repository and
report it to us.</li>
<li>Oh, you know how to fix it? That&rsquo;s wonderful! Create a Pull Request and be a
collaborator of the project!</li>
<li>We are elaborating a documentation&hellip; maybe you could help us looking for some
typo issues or creating new content&hellip;</li>
<li>Have you tried Elcodi and you want to express the world how much excited you
are? Great! Do a post in your blog and explain us what did you create with
Elcodi!</li>
<li>Elcodi is an international project, so we are looking for people able to
translate Bamboo to all languages (even in Klingon and Esperanto!). Are you
proud of your language? Well, help other people of your country for using this
project :)</li>
</ul>


<p>All this actions will give you some extra points.</p>

<p>Of course, if you need help, all Elcodi Core team will gladly help you. Just
enter <a href="https://gitter.im/elcodi/elcodi">Elcodi Gitter room</a> and say hello :)</p>

<p>Have a nice day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elcodi changes its technology]]></title>
    <link href="http://elcodi-blog.github.io/blog/2015/04/01/elcodi-changes-its-technology/"/>
    <updated>2015-04-01T16:45:38+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2015/04/01/elcodi-changes-its-technology</id>
    <content type="html"><![CDATA[<p>This is an official statement from Elcodi Team.</p>

<blockquote><p>This post was an April Fools joke. Elcodi will be based on Symfony for a long
time. We love Symfony.</p></blockquote>

<p>After some nice months using Symfony in our project Elcodi, and after many
reflections on how to increase the project quality, we&rsquo;re proud to announce that
we are moving to Ruby on Rails.</p>

<p>Until version <code>v0.6.*</code> we will continue evolving our code for these people who
is nowadays using Elcodi in their projects, but after that, we will move all
our code to Ruby.</p>

<p><img src="http://planetargon.com/images/rails-love.png" alt="We love rails" /></p>

<p>If you need some information, feel free to keep in touch with us in our
<a href="https://gitter.im/elcodi/elcodi">Gitter account</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elcodi Bug Hunting]]></title>
    <link href="http://elcodi-blog.github.io/blog/2015/03/03/elcodi-bug-hunting/"/>
    <updated>2015-03-03T16:19:05+01:00</updated>
    <id>http://elcodi-blog.github.io/blog/2015/03/03/elcodi-bug-hunting</id>
    <content type="html"><![CDATA[<p>Hi everyone!</p>

<p>It&rsquo;s been a long time since our last meeting! We&rsquo;ve been very busy here in
Elcodi HQ this months, focusing on the following events. And here we are to tell
you!</p>

<h2>New members</h2>

<p>Our team has grown, and we&rsquo;ll be proud to introduce our two new members properly
to you soon. For now, welcome <a href="//twitter.com/tonipinel">@tonipinel</a> and
<a href="//twitter.com/rogergros">@rogergros</a>!</p>

<h2>It&rsquo;s beta time!</h2>

<p>These last weeks have been awesome here! After a lot of working hours, coffees
and pizzas (and some beers), we&rsquo;re proud and happy to announce we&rsquo;ve reached
<strong>beta status in Elcodi</strong> and new version: <strong>v0.5.0</strong>.</p>

<p>This is working. This is really working! Now it&rsquo;s time to test it, massively.</p>

<h2>Elcodi Bug Hunting</h2>

<p>In order to make the community participant, we&rsquo;ll arrange something really
amazing: <strong>A contest!</strong>. We have named it <em>Elcodi Bug Hunting</em> and will be
available during March 2015.</p>

<blockquote><p>Edit: This contest will be opened until June 1st, the day of our first
release. It makes sense to increase the contest interval in order to get more
changes and more competition :)</p></blockquote>

<p>Let us explain what&rsquo;s this all about!</p>

<h3>The contest</h3>

<p><img src="https://cloud.githubusercontent.com/assets/170968/6443700/f152ea5e-c0f8-11e4-9acb-63c5f817b7a8.jpg" alt="bugs-everywhere" /></p>

<p>Our goal is to find and fix as many bugs as possible during the beta period, and
to grow more as a community.</p>

<h3>The prices</h3>

<ul>
<li>Apple Macbook Pro 2014 Retina 13&#8221;</li>
<li>Apple Ipad Air 16Gb</li>
</ul>


<h3>Scoring</h3>

<ul>
<li>Earn points by participating in <em>Elcodi Bug Hunting</em>.</li>
<li>Earn 5 points or more to access the <strong>Macbook Pro</strong> raffle.</li>
<li>The more points you have, the more chances to win the raffle.</li>
<li>Get the highest score and win an <strong>Ipad Air</strong>!</li>
</ul>


<h4>The easypick</h4>

<p>Social interaction is important to us, because that&rsquo;s the way we&rsquo;re reaching and
hearing from you. And we want <strong>you</strong> to be part of this!</p>

<p>That&rsquo;s why we&rsquo;ll reward you for:</p>

<ul>
<li>Star on Github (<a href="//github.com/elcodi/elcodi">elcodi/elcodi</a>) &ndash; <em>1 point</em></li>
<li>Star on Github (<a href="//github.com/elcodi/bamboo">elcodi/bamboo</a>) &ndash; <em>1 point</em></li>
<li>Follow on Twitter (<a href="//twitter.com/elcodi_dev">@elcodi_dev</a>) &ndash; <em>1 point</em></li>
<li>Twitter mention &ndash; <em>1 point (max 2)</em></li>
</ul>


<h4>The collaborator</h4>

<p>The more eyes looking at our code, the better chance to improve! Collaboration
is vital for an OpenSource project like this, and we&rsquo;re open for suggestions and
contributions. We want Elcodi to be helpful to you.</p>

<p>Give a try and clone <a href="//github.com/elcodi/elcodi">Elcodi project</a> or
<a href="//github.com/elcodi/bamboo">our store Bamboo</a>, enter
<a href="//gitter.im/elcodi/elcodi">Elcodi at Gitter</a>, discuss with us and participate.
That&rsquo;s OpenSource at it&rsquo;s finest!</p>

<p>We will appreciate:</p>

<ul>
<li>Open Github issue &ndash; <em>2 points</em></li>
<li>Creating a Pull Request &ndash; <em>2 points</em></li>
<li>Accepted Pull Request &ndash; <em>5 points</em></li>
<li>Contributors up to present day &ndash; <em>10 points</em></li>
</ul>


<h4>The Best of the best</h4>

<p>We encourage those who work hard. That&rsquo;s why we&rsquo;ll distribute some points
discretely based on:</p>

<ul>
<li>Best 5 pull requests &ndash; <em>5 points</em></li>
<li>Best 3 tweets &ndash; <em>15, 10, 5 points</em></li>
<li>Best 3 troll-tweets &ndash; <em>15, 10, 5 points</em></li>
</ul>


<h3>The jury</h3>

<ul>
<li>Marc Morera (<a href="//twitter.com/mmoreram">@mmoreram</a>)</li>
<li>Aldo Chiecchia (<a href="//twitter.com/alch">@alch</a>)</li>
<li>Berny Cantos (<a href="//twitter.com/xphere">@xphere</a>)</li>
<li>Toni Pinel (<a href="//twitter.com/tonipinel">@tonipinel</a>)</li>
<li>Roger Gros (<a href="//twitter.com/rogergros">@rogergros</a>)</li>
</ul>


<h2>Let&rsquo;s <del>Go</del> PHP!!</h2>

<p>Feel free to try the platform, test it and find security vulnerabilities and
bugs. During this month we will improve current features and we will focus on
the quality of the code, with small refactors and more (and more) tests.</p>

<p>We will work as well with the documentation, so feel free to help us on that
task :)</p>

<p>Don&rsquo;t hesitate to get in touch with us and enjoy Elcodi! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Week of Elcodi #5 (24/11 - 08/12)]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/12/11/a-week-of-elcodi-number-5/"/>
    <updated>2014-12-11T20:15:24+01:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/12/11/a-week-of-elcodi-number-5</id>
    <content type="html"><![CDATA[<p>Hi there! These two weeks have been full of work, with our talk in <a href="http://madrid2014.symfony.com">SymfonyCon</a> being the highlight. We&rsquo;re working on a post explaining the experience but, in short, it was amazing to present Elcodi to the people in the Symfony community. Stay tuned!</p>

<p>Meanwhile, on this side of the keyboard, we&rsquo;ve been doing some things also, such as resume the implementation of our <code>StateTransitionMachine</code>, previously known as <code>StateMachine</code>, and polishing some details.</p>

<p>Besides, we wanted to implement an entity translator completely decoupled of our entities, because we think that the most important part of an e-commerce project is the model. So we worked on it for a while and now the <a href="https://github.com/elcodi/elcodi/pull/382">Translator component</a> is born. You&rsquo;re welcome to comment and collaborate on the implementation.</p>

<p>To persist the settings for each shop, we are working on a <a href="https://github.com/elcodi/elcodi/pull/383">dynamic configuration component</a> useful for storing simple values. As usual, it comes with adapters so that any backend storage can be supported.</p>

<p>From the viewpoint of desing, we want a more agile, easy and intuitive admin experience, so we&rsquo;re checking and improving the UX of Elcodi Admin&rsquo;s interface. First adjustments include some improvements about navigation, and an early approach to the first-time experience, something that we will look in depth in the next week.</p>

<p>Also we&rsquo;re putting together our <a href="https://github.com/elcodi/elcodi/pull/378">new Page component</a> to be as generic as possible, but user-friendly too. This includes developers: we are making great efforts to provide a better DX (Developer eXperience), so feel free to drop by our <a href="https://gitter.im/elcodi/elcodi">gitter</a> and ask your own questions. We&rsquo;ll be glad to help you. ;)</p>

<p>See you next week!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A week of Elcodi #4 (17/11 - 24/11)]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/11/25/a-week-of-elcodi-number-4/"/>
    <updated>2014-11-25T12:39:32+01:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/11/25/a-week-of-elcodi-number-4</id>
    <content type="html"><![CDATA[<p>Last few days were kind of crazy at Elcodi, with @alch <a href="http://madrid2014.symfony.com/speakers#session-1399">leaving the slides ready for our speak at the #SymfonyCon</a>, @mmoreram <a href="http://mmoreram.com/blog/2014/11/25/symfony-walk-ends">walking the #SymfonyWalk</a> and @xphere <a href="https://github.com/elcodi/elcodi">annoying in our GitHub repository</a> and <a href="http://blog.elcodi.io/blog/categories/one-section-one-component">writing about Symfony Components</a>.</p>

<p>But this madness is great, trust me! We&rsquo;ll reach a milestone in our path with the forthcoming #SymfonyCon, and we&rsquo;re proud and happy to have the opportunity to be there, to explain our point of view, the approach we&rsquo;re giving to Elcodi.</p>

<p>Remember, you can keep in touch with us in our <a href="https://gitter.im/elcodi/elcodi">gitter chat</a> and our <a href="https://twitter.com/elcodi_dev">twitter account</a>. Also we&rsquo;d be more than happy with more issues, PRs and collaborators in <a href="https://github.com/elcodi/elcodi">GitHub</a>… Let&rsquo;s make something funny and useful together!</p>

<p>See you in Madrid! ;&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Console Component]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/11/21/console-component/"/>
    <updated>2014-11-21T19:02:40+01:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/11/21/console-component</id>
    <content type="html"><![CDATA[<p>The next post in the series of <a href="http://elcodi-blog.github.io/blog/categories/one-section-one-component/">&ldquo;One section one component&rdquo;</a>, in support of our friend <a href="https://github.com/mmoreram">Marc Morera</a> in his <a href="https://twitter.com/hashtag/symfonywalk?f=realtime">#symfonywalk</a>, is about the <a href="http://symfony.com/doc/current/components/console">Console component</a>. Marc has had some problems early in his journey, so we want to send him energy and courage for the next steps of the walk. Go Marc! You can send him words of encouragement too in his twitter account <a href="https://twitter.com/mmoreram">@mmoreram</a>!</p>

<h2>Description</h2>

<p>The Console component helps you create console applications. It is like <code>HttpRequest</code> + <code>Routing</code>, but for command line. With this component you can:</p>

<ul>
<li>Create single or multiple commands in an application.</li>
<li>Define and parse command&rsquo;s arguments and options.</li>
<li>Execute a command.</li>
<li>Output information to terminal while processing a command.</li>
<li>Allow automatic management of <code>--help</code> options.</li>
</ul>


<h2>Basic classes</h2>

<ul>
<li><strong><code>Command</code></strong>: configuration of a command with name, parameters, options…</li>
<li><strong><code>InputArgument</code></strong> and <strong><code>InputOption</code></strong>: defines how command-line parameters and options are parsed and passed to a <code>Command</code>.</li>
<li><strong><code>InputInterface</code></strong>: allows read operations from terminal.</li>
<li><strong><code>OutputInterface</code></strong>: encapsulate terminal writing.</li>
<li><strong><code>Application</code></strong>: a group of one or more <code>Command</code>s and <code>Helper</code>s.</li>
</ul>


<h2>Example of usage</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">WriteCommand</span> <span class="k">extends</span> <span class="nx">Command</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">configure</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="s1">&#39;write&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">setDescription</span><span class="p">(</span><span class="s1">&#39;Writes text to a file&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">addArgument</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;filename&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">InputArgument</span><span class="o">::</span><span class="na">REQUIRED</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;Which file to write?&#39;</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">addArgument</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;text&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">InputArgument</span><span class="o">::</span><span class="na">OPTIONAL</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;Which text to write?&#39;</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">addOption</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;yell&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="k">null</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">InputOption</span><span class="o">::</span><span class="na">VALUE_NONE</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;If set, text will be upper-cased&#39;</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$filename</span> <span class="o">=</span> <span class="nv">$input</span><span class="o">-&gt;</span><span class="na">getArgument</span><span class="p">(</span><span class="s1">&#39;filename&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$text</span> <span class="o">=</span> <span class="nv">$input</span><span class="o">-&gt;</span><span class="na">getArgument</span><span class="p">(</span><span class="s1">&#39;text&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$input</span><span class="o">-&gt;</span><span class="na">getOption</span><span class="p">(</span><span class="s1">&#39;yell&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$text</span> <span class="o">=</span> <span class="nx">strtoupper</span><span class="p">(</span><span class="nv">$text</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">false</span> <span class="o">===</span> <span class="nb">file_put_contents</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span> <span class="nv">$text</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">RuntimeException</span><span class="p">(</span><span class="s1">&#39;Error writing to file.&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="s1">&#39;File was successfully written.&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$application</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>
</span><span class='line'><span class="nv">$application</span><span class="o">-&gt;</span><span class="na">addCommands</span><span class="p">([</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">WriteCommand</span><span class="p">(),</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'><span class="nv">$application</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now on your command line you can type <code>php console.php write path/to/filename "text to write"</code>.</p>

<p>Usually, the <code>Command</code> should behave like a <code>Controller</code>, this is, checking parameters and passing them to one or more services to do the real work.</p>

<p>You can also add a previous step of interaction with the user, so they can provide any missing or ambiguous information. This part is skipped automatically if the <code>--no-interaction</code> (or <code>-n</code>) is used.</p>

<p>For user interaction, you can use <code>OutputInterface</code> directly, but there are many <code>Helpers</code> you can use, being the <code>QuestionHelper</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> the most helpful (no pun intended).</p>

<p>Let&rsquo;s see how we can add interaction to our previous example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">WriteCommand</span> <span class="k">extends</span> <span class="nx">Command</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">interact</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$filename</span> <span class="o">=</span> <span class="nv">$input</span><span class="o">-&gt;</span><span class="na">getArgument</span><span class="p">(</span><span class="s1">&#39;filename&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="o">===</span> <span class="nv">$filename</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">whenBaseDirectoryExists</span><span class="p">(</span><span class="nv">$filename</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">confirmDirectoryCreation</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span> <span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">whenFileAlreadyExists</span><span class="p">(</span><span class="nv">$filename</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">confirmFileOverwrite</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span> <span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="o">===</span> <span class="nv">$input</span><span class="o">-&gt;</span><span class="na">getArgument</span><span class="p">(</span><span class="s1">&#39;text&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">askForText</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">whenBaseDirectoryExists</span><span class="p">(</span><span class="nv">$filename</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">is_dir</span><span class="p">(</span><span class="nb">dirname</span><span class="p">(</span><span class="nv">$filename</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">confirmDirectoryCreation</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span> <span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$questionHelper</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHelper</span><span class="p">(</span><span class="s1">&#39;question&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$question</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ConfirmationQuestion</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;Base directory for &quot;&#39;</span> <span class="o">.</span> <span class="nv">$filename</span> <span class="o">.</span> <span class="s1">&#39;&quot; does not exist. Create? [y/n] &#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="k">true</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$questionHelper</span><span class="o">-&gt;</span><span class="na">ask</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">,</span> <span class="nv">$question</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">RuntimeException</span><span class="p">(</span><span class="s1">&#39;Base directory does not exist.&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">mkdir</span><span class="p">(</span><span class="nb">dirname</span><span class="p">(</span><span class="nv">$filename</span><span class="p">),</span> <span class="mo">0777</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">whenFileAlreadyExists</span><span class="p">(</span><span class="nv">$filename</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">file_exists</span><span class="p">(</span><span class="nv">$filename</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">confirmFileOverwrite</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span> <span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$questionHelper</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHelper</span><span class="p">(</span><span class="s1">&#39;question&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$question</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ConfirmationQuestion</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;File &quot;&#39;</span> <span class="o">.</span> <span class="nv">$filename</span> <span class="o">.</span> <span class="s1">&#39;&quot; already exists. Overwrite? [y/n] &#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="k">true</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$questionHelper</span><span class="o">-&gt;</span><span class="na">ask</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">,</span> <span class="nv">$question</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">RuntimeException</span><span class="p">(</span><span class="s1">&#39;Can\&#39;t write to file.&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">askForText</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$questionHelper</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHelper</span><span class="p">(</span><span class="s1">&#39;question&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$question</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Question</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;Please enter the content of the file: &#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;&#39;</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$text</span> <span class="o">=</span> <span class="nv">$questionHelper</span><span class="o">-&gt;</span><span class="na">ask</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">,</span> <span class="nv">$question</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$input</span><span class="o">-&gt;</span><span class="na">setArgument</span><span class="p">(</span><span class="s1">&#39;text&#39;</span><span class="p">,</span> <span class="nv">$text</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://gist.github.com/xphere/546d5e90d15c1f88d750">See here the full example</a></p>

<p>Now we&rsquo;re being requested for directory creation, file overwriting, and missing text arguments. Nice!</p>

<h2>Other classes</h2>

<ul>
<li><strong><code>Helpers</code></strong>: Extensions for <code>OutputInterface</code>, to ask questions, show progress bars or tables. You can add your own too, or check the <a href="http://symfony.com/doc/current/components/console/helpers">default ones</a>.</li>
</ul>


<h2>In Symfony2 framework</h2>

<p>Symfony2 detects <code>Command</code> classes in the <code>Command</code> directory of each bundle, and automatically adds them to the console application. As of 2.4, you can also mark services with the tag <code>console.command</code>. You can refer to this great <a href="http://symfony.com/doc/current/cookbook/console/commands_as_services.html">cookbook entry</a>.</p>

<h2>In Elcodi</h2>

<p>In Elcodi we provide commands for things such as <a href="https://github.com/elcodi/Currency/blob/master/Command/CurrencyExchangeRatesPopulateCommand.php">querying currency exchanges</a> or <a href="https://github.com/elcodi/Geo/blob/master/Command/GeoPopulateCommand.php">populating geo entities</a> from third party providers.</p>

<h2>Conclusion</h2>

<p>The <code>Console</code> component brings steroids to your command-line applications at nearly no cost for what you get in return. You can have multiple commands under the same application or <a href="http://symfony.com/doc/current/components/console/single_command_tool.html">just one</a>, you choose. If the <a href="https://getcomposer.org/">current PHP dependency manager</a> uses it, why not you?</p>

<h2>Urls</h2>

<ul>
<li><a href="https://github.com/symfony/Console">Repository</a></li>
<li><a href="http://symfony.com/doc/current/components/console">Documentation</a></li>
<li><a href="https://packagist.org/packages/symfony/console">Packagist</a></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><code>QuestionHelper</code> is available as of Symfony 2.5, for previous versions use the, now deprecated, <a href="http://symfony.com/doc/2.5/components/console/helpers/dialoghelper.html"><code>DialogHelper</code></a>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Security Component]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/11/19/security-component/"/>
    <updated>2014-11-19T22:39:51+01:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/11/19/security-component</id>
    <content type="html"><![CDATA[<p>The next in line in our <a href="http://elcodi-blog.github.io/blog/categories/one-section-one-component/">&ldquo;One section, one component&rdquo;</a> series is the <a href="http://symfony.com/doc/current/components/security"><code>Security component</code></a>. It&rsquo;s a complex one, sure, but we&rsquo;ll take a look just to the nuts and bolts of it. Ready? Set… Go!</p>

<h2>Description</h2>

<p>This component brings authentication and authorization to your applications, with implementations for common use cases, like form login, HTTP or X.509 authentication, authorization by user, roles and ACL systems.</p>

<h2>Basic classes</h2>

<ul>
<li><strong>Token</strong>: Stores current user credentials.</li>
<li><strong>Listener</strong>: extract information from the Request by which the user might be authenticated. It should create a valid token and set it into the <strong>SecurityContext</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</li>
<li><strong>FirewallMap</strong>: maps a <a href="https://github.com/symfony/HttpFoundation/blob/master/RequestMatcher.php"><code>RequestMatcher</code></a> to a set of <code>Listener</code>s.</li>
<li><strong>Firewall</strong>: Integrates the <code>FirewallMap</code> with <code>EventDispatcher</code> and <code>HttpKernel</code> components.</li>
</ul>


<h2>Example of usage</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$exceptionListener</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExceptionListener</span><span class="p">(</span> <span class="err">…</span> <span class="p">);</span>
</span><span class='line'><span class="nv">$matcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RequestMatcher</span><span class="p">(</span><span class="s1">&#39;^/admin/&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$listeners</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="k">new</span> <span class="nx">AnonymousAuthenticationListener</span><span class="p">(</span> <span class="err">…</span> <span class="p">),</span>
</span><span class='line'>  <span class="k">new</span> <span class="nx">LogoutListener</span><span class="p">(</span> <span class="err">…</span> <span class="p">),</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$firewallMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FirewallMap</span><span class="p">();</span>
</span><span class='line'><span class="nv">$firewallMap</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$matcher</span><span class="p">,</span> <span class="nv">$listeners</span><span class="p">,</span> <span class="nv">$exceptionListener</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$firewall</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Firewall</span><span class="p">(</span><span class="nv">$firewallMap</span><span class="p">,</span> <span class="nv">$dispatcher</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Other classes</h2>

<ul>
<li><strong>UserProvider</strong>: Finds a user given his credentials.</li>
<li><strong>AutheticationEntryPoint</strong>: When a match is found but no authentication info can be extracted by the request, this has the chance to return a specific response asking for credentials. For example, the <a href="https://github.com/symfony/Security/blob/master/Http/EntryPoint/FormAuthenticationEntryPoint.php">FormAuthenticationEntryPoint</a> redirects to a login form.</li>
</ul>


<h2>In Symfony2 framework</h2>

<p>The <a href="https://github.com/symfony/SecurityBundle"><code>SecurityBundle</code></a> integrates this component into Symfony2, reading configuration from <code>security.yml</code> and adding some sane defaults.</p>

<h2>In Elcodi</h2>

<p><a href="https://github.com/elcodi/User"><code>Elcodi/User</code></a> depends on the <code>Security</code>  component for authentication. The main implementation of the <code>CustomerWrapper</code> extracts the current user from the <code>SecurityContext</code>. Also, in <a href="http://bamboo.elcodi.com/">our example application, Bamboo</a>, we depend on the excelent <a href="https://github.com/hwi/HWIOAuthBundle"><code>hwi/oauth-bundle</code></a>, which is a good example of extending this component, for OAuth authentication.</p>

<h2>Conclusion</h2>

<p>Almost every non-trivial application requires some kind of authentication. The <code>Security</code> component gives you all the power you should need, although it may be hard to use standalone. The integration with the framework makes for a much more enjoyable experience. We&rsquo;re already using this component! And you?</p>

<p>Have fun!</p>

<h2>Urls</h2>

<ul>
<li><a href="https://github.com/symfony/Security">Repository</a></li>
<li><a href="http://symfony.com/doc/current/components/security">Documentation</a></li>
<li><a href="https://packagist.org/packages/symfony/security">Packagist</a></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://symfony.com/blog/new-in-symfony-2-6-security-component-improvements"><strong>SecurityContext</strong> is deprecated since Symfony 2.6 in favor of <strong>TokenStorage</strong></a>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Routing Component]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/11/18/the-routing-component/"/>
    <updated>2014-11-18T22:39:54+01:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/11/18/the-routing-component</id>
    <content type="html"><![CDATA[<p>As a complement to the <a href="http://mmoreram.com/blog/2014/08/07/symfony-walk-zaragoza-madrid/">#SymfonyWalk</a> we start <a href="http://elcodi-blog.github.io/blog/categories/one-section-one-component/">&ldquo;One section, one component&rdquo;</a>, a series of posts about some of the symfony components. Let&rsquo;s start with routing!</p>

<h2>Description</h2>

<p>As each component does, the <a href="https://github.com/symfony/Routing">Routing component</a> focuses and solves a small problem, in this case, matching urls to routes, so we can extract related information, and vice versa.</p>

<p>Things you can do with this component:</p>

<ul>
<li>Load your routes from anywhere into a collection.</li>
<li>Check if a request matches any of the routes.</li>
<li>Extract route-specific info from the request.</li>
<li>Generate a url from a route and route specific info.</li>
</ul>


<h2>Basic classes</h2>

<p>The cast of this component is:</p>

<ul>
<li><strong><code>Route</code></strong>: definition of a route, with path, requirements, options and conditions…</li>
<li><strong><code>RouteCollection</code></strong>: this bundles one or more <code>Routes</code> and allows to configure all of them at once.</li>
<li><strong><code>Matcher</code></strong>: Searches a <code>RouteCollection</code> for a matching uri.</li>
<li><strong><code>RequestContext</code></strong>: Context from the current request.</li>
</ul>


<h2>Example of usage</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$route</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Route</span><span class="p">(</span><span class="s1">&#39;/{name}&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$route</span><span class="o">-&gt;</span><span class="na">setDefaults</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;_controller&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;GreeterController&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'><span class="nv">$route</span><span class="o">-&gt;</span><span class="na">setRequirements</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;[a-z]+&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$routes</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RouteCollection</span><span class="p">();</span>
</span><span class='line'><span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;greet&#39;</span><span class="p">,</span> <span class="nv">$route</span><span class="p">);</span>
</span><span class='line'><span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">addPrefix</span><span class="p">(</span><span class="s1">&#39;/hello&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$context</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RequestContext</span><span class="p">();</span>
</span><span class='line'><span class="nv">$matcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UrlMatcher</span><span class="p">(</span><span class="nv">$routes</span><span class="p">,</span> <span class="nv">$context</span><span class="p">);</span>
</span><span class='line'><span class="nv">$parameters</span> <span class="o">=</span> <span class="nv">$matcher</span><span class="o">-&gt;</span><span class="na">match</span><span class="p">(</span><span class="s1">&#39;/hello/fabien&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * $parameters === [</span>
</span><span class='line'><span class="cm"> *   &#39;_route&#39; =&gt; &#39;greet&#39;,</span>
</span><span class='line'><span class="cm"> *   &#39;_controller&#39; =&gt; &#39;GreeterController&#39;,</span>
</span><span class='line'><span class="cm"> *   &#39;name&#39; =&gt; &#39;fabien&#39;,</span>
</span><span class='line'><span class="cm"> * ]</span>
</span><span class='line'><span class="cm"> */</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Other classes</h2>

<p>Other supporting actors:</p>

<ul>
<li><strong>Loader</strong>: Loads a <code>RouteCollection</code> from a source.</li>
<li><strong>Generator</strong>: The opposite of <code>Matcher</code>, given a route name and route-specific information, generates the uri.</li>
<li><strong>Dumper</strong>: The opposite of <code>Loader</code>, dumps a <code>RouteCollection</code> in different formats.</li>
<li><strong>Router</strong>: basically a <a href="http://en.wikipedia.org/wiki/Facade_pattern">facade</a> to <code>Matcher</code> and <code>Generator</code>.</li>
</ul>


<h2>In Symfony2 framework</h2>

<p>Symfony2 framework reads routes from routing files with this component, matches the current <code>Request</code> and chooses which <code>Controller</code> and action to run. It also extends the <code>Router</code> so you can use parameter placeholders from <a href="https://github.com/symfony/DependencyInjection"><code>DependencyInjection</code></a> and integrates with the <a href="https://github.com/symfony/Config"><code>Config</code></a> component to allow caching.</p>

<h2>In Elcodi</h2>

<p>In Elcodi, as a library, we try not to couple our very few controllers to a specific route and we leave that responsibility to the layers above. For more complex scenarios, like the <a href="https://github.com/elcodi/MediaBundle"><code>MediaBundle</code></a> and the forthcoming <a href="https://github.com/elcodi/elcodi/tree/ec8fabe99489ae9dd1ef671eefaaa7ac89e24cdb/src/Elcodi/Bundle/PageBundle"><code>PageBundle</code></a>, we implement our own custom <code>Loader</code> so we can route through them.</p>

<h2>Conclusion</h2>

<p>This component deals with the next step just after getting your <a href="http://symfony.com/doc/current/components/http_foundation">HTTP Request</a> and gives you great power and flexibility to split your application into several routes.</p>

<p>I hope you find this component useful!</p>

<h2>Urls</h2>

<ul>
<li><a href="https://github.com/symfony/Routing">Repository</a></li>
<li><a href="http://symfony.com/doc/current/components/routing">Documentation</a></li>
<li><a href="https://packagist.org/packages/symfony/routing">Packagist</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A week of Elcodi #3 (10/11 - 17/11)]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/11/17/a-week-of-elcodi-number-3/"/>
    <updated>2014-11-17T17:25:20+01:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/11/17/a-week-of-elcodi-number-3</id>
    <content type="html"><![CDATA[<p>This last week we were working hard on our next milestone: our presentation at the <a href="http://madrid2014.symfony.com">#SymfonyCon</a> on November 27th. <a href="https://github.com/mmoreram">@mmoreram</a> and <a href="https://github.com/alch">@alch</a> will speak about how we&rsquo;re building a flexible e-commerce library on top of best practices. We&rsquo;ll dig into the guts of <a href="http://elcodi.io">Elcodi</a> and talk about the tecnologies we&rsquo;ve been using to decouple and allow our users to customize everything to suit their business needs.</p>

<p>Also, @mmoream started walking this Sunday what he calls the <a href="http://mmoreram.com/blog/2014/08/07/symfony-walk-zaragoza-madrid">#SymfonyWalk</a>, a road-trip between Zaragoza and Madrid that will last for 10 days. All this on foot! We wish Marc good health and good luck in that journey!</p>

<p>In the more technical side, we&rsquo;ve been integrating <a href="https://github.com/elcodi/elcodi/tree/feature/page-component">our soon-to-be-released Elcodi&rsquo;s <code>PageBundle</code></a> into <code>bamboo-admin</code>, so you can add content pages to your stores. This will appear in the next release for sure, so… stay tuned!</p>

<p>Also, our <a href="https://github.com/hwi/HWIOAuthBundle/pull/677">PR for PayPal authentication</a> finally made it into HWI/OAuthBundle. Nice!</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A week of Elcodi #2 (3/11 - 10/11)]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/11/11/a-week-of-elcodi-number-2/"/>
    <updated>2014-11-11T12:22:31+01:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/11/11/a-week-of-elcodi-number-2</id>
    <content type="html"><![CDATA[<p>We&rsquo;ve been putting efforts into making better issues and PRs and closing older ones for a better GitHub experience for our contributors and users.</p>

<p>The PayPal web checkout has been reintegrated into the <a href="https://github.com/elcodi/bamboo-store/pull/56">bamboo store</a> meaning that the frontend store is able to receive real payments, other than integrating a <a href="https://github.com/elcodi/bamboo-store/pull/56">dummy payment module</a> for testing purposes. Next step is to integrate <a href="https://github.com/PaymentSuite/StripeBundle">stripe</a> or <a href="https://github.com/PaymentSuite/PaymillBundle">paymill</a>, which are much more developer-friendly. Stay tuned with the <a href="https://github.com/PaymentSuite">PaymentSuite</a> updates to see what&rsquo;s coming from there too!</p>

<p>Also, there&rsquo;s a <a href="https://github.com/hwi/HWIOAuthBundle/pull/677">new PR in HWI/OAuth</a> from our team to add PayPal login support.</p>

<p>We&rsquo;ve done our first hackaton. We met with some friends to talk about the project, about our implementations and about how to approach the development of our Page Component. It has definitely been the first of many more events like this.</p>

<p>And finally, as you may know, Elcodi will speak at the <a href="http://madrid2014.symfony.com/">SymfonyCon</a> at the end of November. We will talk about some cool things we&rsquo;ve been working on during last months and since we want to celebrate this, part of the team will be walking the <em>330km route</em> between Zaragoza and Madrid. You can read more about this adventure in these posts:</p>

<ul>
<li><a href="http://mmoreram.com/blog/2014/08/07/symfony-walk-zaragoza-madrid/">Symfony Walk</a></li>
<li><a href="http://mmoreram.com/blog/2014/08/12/one-section-one-component/">One section, one component</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A week of Elcodi #1 (27/10 - 3/11)]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/11/04/a-week-of-elcodi-number-1/"/>
    <updated>2014-11-04T09:32:57+01:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/11/04/a-week-of-elcodi-number-1</id>
    <content type="html"><![CDATA[<p>It is time to be more vocal about what we are doing and share with the community how we are moving forward along our roadmap and the progress we are making.</p>

<p>Inspired by the <a href="http://symfony.com/blog/category/a-week-of-symfony">famous symfony weekly bulletin</a>, we would like to do something similar: <em>A week of Elcodi</em>, a series of post assembled in turn by each member of the team.</p>

<p>This week we&rsquo;ve been working on <a href="https://github.com/elcodi/bamboo-store/issues/44">social connectivity for our bamboo store</a>, allowing our users to log in from a variety of OAuth services through integration of <a href="https://github.com/hwi/HWIOAuthBundle">HWI/OAuthBundle</a> in our project.
A thin layer and a new entity <a href="https://github.com/elcodi/bamboo-store/blob/2134302656ae13768ab8e82e54053d01f105d861/src/Elcodi/StoreConnectBundle/Entity/Authorization.php#L31"><code>Authorization</code></a> stores and retrieves links between our <a href="https://github.com/elcodi/elcodi/blob/master/src/Elcodi/Component/User/Entity/Interfaces/CustomerInterface.php"><code>CustomerInterface</code></a> and the OAuth token. And voilà! You can login with your GitHub account in two clicks!</p>

<p>Sticking with our bamboo store, we prepared a feature branch with PayPal <a href="https://developer.paypal.com/docs/integration/web/web-checkout/">web checkout</a> integration. It has been developed on top of the <a href="https://github.com/PaymentSuite">PaymentSuite</a> project. You can check out the changes <a href="https://github.com/elcodi/bamboo-store/compare/features/paypal-payment?expand=1">here</a>.</p>

<p>We have also been working on a <em>Finite-state machine</em>. Until now we were managing <a href="https://github.com/elcodi/elcodi/blob/master/src/Elcodi/Component/Cart/Entity/Order.php#L38"><code>Order</code></a> and <a href="https://github.com/elcodi/elcodi/blob/master/src/Elcodi/Component/Cart/Entity/OrderLine.php#L34"><code>OrderLine</code></a> state changes using an <a href="https://github.com/elcodi/elcodi/blob/master/src/Elcodi/Component/Cart/Services/OrderStateManager.php#L28">hardwired implementation</a> which was very specific to the <code>Cart</code> component, while any logic implementing a FSM should be reusable. While waiting for Symfony to implement its own state machine in the near futire, we wrote a very simple and useful component that can be used in any project. You can check and review the <a href="https://github.com/elcodi/elcodi/pull/354">pull request</a></p>

<p>In terms of specific e-commerce features, we just merged some improvements to the Shipping component and Bundle. See the <a href="https://github.com/elcodi/elcodi/pull/309">Pull Request</a>.</p>

<p>Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The family grows]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/10/16/welcome-berny/"/>
    <updated>2014-10-16T16:09:40+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/10/16/welcome-berny</id>
    <content type="html"><![CDATA[<p>Today a new friend has join the team, meet Berny Cantos!</p>

<p>Berny is a seasoned web developer and of course a Symfony lover. He is one of those great old-school coders that forged
their stamina the <em>hard way</em>, out of C/C++ development, before diving into the LAMP world.</p>

<p>He will be helping step up our commitment with the open source community and harden the foundations of our codebase.</p>

<p><img src="http://s3-eu-west-1.amazonaws.com/elcodi-static-assets/images/people/berny.jpg" alt="All Right!" /></p>

<p>You can reach him on <a href="https://github.com/xphere">GitHub</a>, Twitter at <a href="https://twitter.com/xphere">@xphere</a> and
<a href="https://www.linkedin.com/in/bernycantos">LinkedIn</a></p>

<p>Welcome Berny!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We have evolved]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/28/we-have-evolved/"/>
    <updated>2014-08-28T11:42:47+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/28/we-have-evolved</id>
    <content type="html"><![CDATA[<p>You might say that we&rsquo;ve evolved.</p>

<p>An evolution ought to be seen as a positive thing, and ours is no exception.
At first, we had serious doubts about the nature of our project. One of the
questions we kept asking ourselves was what factors should we consider in
choosing whether and when to engage external projects or libraries, and we
believe we made the right decision. In fact, that decision brought us forward in
a big way toward defining ourselves.</p>

<p>Flexible e-commerce components for Symfony2</p>

<p>Anyway, this phrase is actually very ambiguous, as we could be referring to
Symfony as a set of PHP components or as the Framework (I&rsquo;ve always wondered
why they have the same name&hellip; it causes a lot of confusion).</p>

<p>That&rsquo;s why we wanted to reflect a bit, starting from the code itself. Do we want
to use the Symfony Framework or the Symfony Components? The answer seemed to
emerge spontaneously. We want to work with the Symfony components, but we also
want to propose bundles that use the framework.</p>

<p>This was the origin of this commit.</p>

<p><a href="https://github.com/elcodi/elcodi/pull/239">https://github.com/elcodi/elcodi/pull/239</a></p>

<p>We have only just planted the seed with this refactoring. We have realized, even
more, the importance of having both functional testing and unit testing (unit
tests are almost all for the components, while functional tests are for the
bundles). This needs more work, but at least we have lifted this project to a
level at which we truly feel comfortable. It&rsquo;s an excellent starting point for
a long and exciting path ahead.</p>

<p>This change has resulted in some collateral damage, as it has changed the path
of our bundles, meaning that the &ldquo;subtree split&rdquo; has resulted in totally new
repositories beginning with the first commit after refactoring. This means that
all tags prior to version 0.3.0 have been lost, so we apologize to those who
have started to tinkle with our new bundles. You&rsquo;ll now need to adapt to version
~0.3 and check that everything&rsquo;s working.</p>

<p>We are available for any questions or concerns.</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elcodi team]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/14/elcodi-team/"/>
    <updated>2014-08-14T10:28:08+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/14/elcodi-team</id>
    <content type="html"><![CDATA[<h5>This is the follow-up of a series of posts</h5>

<ul>
<li><a href="http://elcodi-blog.github.io/blog/2014/08/11/a-short-break-for-meditation/">A short break for meditation</a></li>
<li><a href="http://elcodi-blog.github.io/blog/2014/08/12/our-roadmap/">Our roadmap</a>.</li>
<li><a href="http://elcodi-blog.github.io/blog/2014/08/13/our-goals/">Our goals</a></li>
</ul>


<p>As a final point for what we shared in previous posts, the last but definitely not least element to consider is the <em>team</em>.</p>

<p>Such an ambitious venture needs a committed and visionary crew, and obviously more <em>heads</em> and <em>hands</em>. This is why we are opening job positions for a couple of skilled software artisans willing to join the journey with us. We will soon post the complete description. The company is located in Barcelona, Spain.</p>

<p>We are looking for passionate and inspired artisans that love to craft products to be used by fellow developers and that believe in the potential of a community that grows around an <em>opensource</em> project.</p>

<h2>Community</h2>

<p>The final word is a big <strong>thank you</strong> to all the people that have been supporting us &ndash; by contributing in different forms &ndash; and to whom will do it someday.</p>

<p>We really seek to build something useful for the community and to receive the necessary feedback and support in order to speed up the development and deliver the sound, reliable, flexible product that we have in mind.</p>

<p>As for now, the Elcodi team hopes that you&rsquo;ll get involved with the project and wishes you a great summer break.</p>

<p>Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Our goals]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/13/our-goals/"/>
    <updated>2014-08-13T10:26:56+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/13/our-goals</id>
    <content type="html"><![CDATA[<h5>This is the follow-up of a series of posts</h5>

<ul>
<li><a href="http://elcodi-blog.github.io/blog/2014/08/11/a-short-break-for-meditation/">A short break for meditation</a></li>
<li><a href="http://elcodi-blog.github.io/blog/2014/08/12/our-roadmap/">Our roadmap</a>.</li>
</ul>


<p>In the folowing weeks we would like to get to a first community stable version. Though last week we placed the initial milestone it is important to define a release plan for the following steps.</p>

<p>We set up a list of <a href="https://github.com/elcodi/elcodi/milestones">milestones</a> to show a proposed roadmap:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Version 0.3
</span><span class='line'>    - Closed 8 days ago
</span><span class='line'>    - 100% complete  0 open  11 closed
</span><span class='line'>
</span><span class='line'>Version 0.4
</span><span class='line'>    - Due by August 15, 2014
</span><span class='line'>    - 0% complete  0 open  0 closed
</span><span class='line'>
</span><span class='line'>Version 0.5
</span><span class='line'>    - Due by August 29, 2014
</span><span class='line'>    - 17% complete  5 open  1 closed
</span><span class='line'>
</span><span class='line'>Version 0.6
</span><span class='line'>    - Due by September 11, 2014
</span><span class='line'>    - 0% complete  2 open  0 closed</span></code></pre></td></tr></table></div></figure>


<p>This means we will be working on fine-tune our general roadmap and on fixing and refining what we have &ndash; no new features will be developed until we improve stability &ndash; in the hope of clearing things up a bit for developers interested in working with Elcodi foundations.</p>

<p>At this stage, it is possible for new commits to introduce <em>BC breaks</em>. There is an open <a href="https://github.com/elcodi/elcodi/issues/34">issue</a> regarding <code>@api</code> tagging in phpdoc but as suggests in the discussion it is not really needed in the absence of a frozen stable release.</p>

<p>We won&rsquo;t be following strict <a href="http://semver.org/">semantic versioning</a> until we reach a stable release, though we are using <em>patch version</em> for small fixes that do not cause incompatibilities and <em>minor version</em> for changes that <em>could</em> cause BC.</p>

<p>Of course this will change once we approach <code>v1.0</code>, when we will <code>@api</code> freeze core components and enforce full semantic versioning.</p>

<p>Reaching the <code>stable</code> version also means we will release the <em>Market</em>, so that plugins and components can be developed with no fears of major version breaks.</p>

<p>We are on our way there, things look good!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Our roadmap]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/12/our-roadmap/"/>
    <updated>2014-08-12T09:55:48+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/12/our-roadmap</id>
    <content type="html"><![CDATA[<h5>This is the second part of a <a href="http://elcodi-blog.github.io/blog/2014/08/11/a-short-break-for-meditation/">previous post</a></h5>

<p>We can proudly state we have a lot to do in the following months.</p>

<p>Question is, what now? Maybe we are 1% done along our path, although &ldquo;done&rdquo; in our world sounds a bit odd since there is always room for improvement.
As long as our issue tracker list gets fed, we will stay hungry for enhancing our code.</p>

<h3>GeoBundle</h3>

<p>One of the most recurring challenges in e-commerce development is the modeling of geographic and administrative divisions. We will put our efforts in designing a simple yet extensible set of entities and relations as well as strategies to implement custom tree structures.</p>

<h3>Rule management</h3>

<p>Rule-based decision logic is ubiquitous in e-commerce applications. A few examples:</p>

<ul>
<li>Which discount coupon can be automatically applied upon entering the checkout process?</li>
<li>Can a particular discount code be applied?</li>
<li>Can two specific products be added to the same cart?</li>
<li>Can a specific product combination trigger a discount, an up-sell or a different offer?</li>
<li>When is it possible to use a specific carrier or payment method?</li>
</ul>


<p>Elcodi <a href="https://github.com/elcodi/rulebundle">RuleBundle</a> aims at solving these kinds of issue.</p>

<h3>Ports and Adapters</h3>

<p>We surely want to promote high-cohesion, loose-coupled software components. Right now we are halfway, as described in the <a href="http://elcodi-blog.github.io/blog/2014/08/11/a-short-break-for-meditation/">previous post</a>, but we want to keep improving. A typical usage of P&amp;A would be to decouple Symfony bundles from other significant objects in the domain, or to be able to use Elcodi Cart component without depending on the CustomerBundle.</p>

<h3>Tests</h3>

<p>A great deal of credibility for an open source project is earned by instilling a thorough and sound test methodology. We assume that we&rsquo;ve been lacking on this specific subject, doing our homeworks halfway. This will be addressed both for Elcodi core repository and web applications (<a href="https://github.com/elcodi/bamboo-store">BambooStore</a> and <a href="https://github.com/elcodi/bamboo-admin">BambooAdmin</a>) by raising the coverage of unit and functional tests and start working with acceptance tests for the web apps.</p>

<p>We have not decided yet which toolset we will be using, surely one between <a href="http://docs.behat.org/">Behat3</a> and <a href="http://www.phpspec.net/">PHPSpec2</a>. As always, suggestions are more than welcome!</p>

<h3>PaymentSuite</h3>

<p>The <a href="http://github.com/PaymentSuite">PaymentSuite</a> was conceived and grown inside Elcodi.</p>

<p>It is a payment processing suite developed in Symfony2 which follows our vision of extensibility using adapters and dispatched events to give maximum flexibility to implementers and to decouple specific <code>Cart</code> or <code>Order</code> implementations. It promotes easy and sensible defaults for configurations.</p>

<p>We will take care of the project and will evolve it as the default payment platform. The <a href="http://bamboo.elcodi.com">BambooStore</a> is already using a dummy <a href="https://github.com/PaymentSuite/FreePaymentBundle">free payment</a> method.</p>

<h3>ShippingSuite</h3>

<p>We would like to follow a similar path as the PaymentSuite: a separated and parallel project that does not depend on Elcodi and that can be easy integrated in web applications. Same vision, same resilience philosophy: work with <code>Order</code> or <code>Carrier</code> as <em>adaptees</em>.</p>

<h3>Documentation</h3>

<p>Akin to the phisolophers&#8217; stone, sibling of the Holy Grail, the documentation is the most precious gemstone that an open source project should strive to shape. As Symfony2 author <a href="https://twitter.com/fabpot">@fabpot</a> once said, it is the most challenging part of any project.</p>

<p>We are working on the foundation of an <a href="http://elcodi.readthedocs.org">english documentation</a>, localized and translated version will follow later on. This is a list of topics that we will elaborate further:</p>

<ul>
<li>Implementation guidelines. General vision and coding philosophy, style and everything needed for developers wishing to contribute.</li>
<li>Customizations. Craft a project using only Elcodi core. Architectural constraints to keep in mind. Recipes and examples.</li>
<li>Core bundles documentation, including

<ul>
<li>Provisioned Model</li>
<li>Event system rationale and taxonomies</li>
<li>Services</li>
<li>Configuration</li>
<li>Controllers and extensions, where it may apply</li>
</ul>
</li>
<li><a href="https://github.com/elcodi/bamboo-store">Bamboo</a> <a href="https://github.com/elcodi/bamboo-admin">web applications</a> documentation for Symfony and front-end developers: the starting point to develop your e-commerce site.</li>
</ul>


<p>This is going to be an epic effort and the real main entrance to the project for the community. No matter the size of your codebase is, documentation is a key measure of a project success.</p>

<h2>Community</h2>

<p>If documentation should be our <em>diamond</em>, the community should be our <em>propellant</em>. A good community makes a project good.</p>

<p>We started as a small project and we know how demanding it can be to get involved and contribute to the development of an open source based product.</p>

<p>We will take special care of this particular topic, since motivating people and get them involved is essential for our vision: Elcodi was never mean to be a mere code repository, it is a group of visionary people with a clear view in their minds, working together to work out a specific problem.</p>

<p>Taking care of the code means caring for the people that make it possible for the code to be crafted. We are especially interested in helping those who want to learn, so we will soon arrange training and learning mechanisms, both for Symfony and Elcodi.</p>

<p>Get ready to be effective!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A short break for meditation]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/11/a-short-break-for-meditation/"/>
    <updated>2014-08-11T09:05:38+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/11/a-short-break-for-meditation</id>
    <content type="html"><![CDATA[<h5>Puedes encontrar la versión en castellano de este post <a href="http://elcodi-blog.github.io/blog/2014/08/04/un-momento-para-reflexionar/">aqui</a>.</h5>

<p>Some of you already know Elcodi, a suite of components built on Symfony2 and Doctrine, aiming to provide maximum flexibility and soundness to e-commerce projects.</p>

<p>We believe that coding should always be entertaining and fun.</p>

<p>This has been our main mission since the beginning and as every ambitious goal you cannot forget that along the journey you might discover an equally important path.</p>

<p>I think that we reached the point where it is important to take a breath, so that in the following days we will publish some posts regarding our views and what we&rsquo;ve been learning, where we will talk about what we have developed so far, our expectations and how we would like to drive the development of each part of the project in the following months.</p>

<h1>The path so far</h1>

<p>Elcodi was born a few months ago in a nice workplace located in Barcelona, Spain. We started designing the platform at the beginning of the year, developed and refactored the pieces up the present day where in my opinion we reached a fairly good balanced point, which is the growing seed of our natural direction.</p>

<h3>ProductBundle, AttributeBundle</h3>

<p>Those components are the home for everything regarding products, categories, manufacturers. Product attribute and options were added in a separate bundle and are the dimensions for working in the product variants space, which is one of the latest features developed and is a required trait for almost every e-commerce software implementation.</p>

<p>Multi-category is also supported for products.</p>

<h3>UserBundle</h3>

<p>Contains the models and tools necessary for working with front-end customers or back-end administrators. A basic authentication &amp; authorization definition was also added, exploiting Symfony Security component.</p>

<h3>CartBundle</h3>

<p>It handles the purchase process, carts and orders. Undoubtedly one of the core pillars of any e-commerce, it has been designed to be simple to get a grasp of and to be overridden almost completely by custom logic. You can read about its internal in the <a href="http://elcodi.readthedocs.org/en/latest/bundles/CartBundle/index.html">official documentation</a>.
Point-in-time snapshots of order states or cart to order transitions are examples of what is provided in CartBundle core services default implementation.</p>

<h3>GeoBundle</h3>

<p>Basic building block for a complete hierarchical aggregation of administrative entities. Due to lack of time, at the present day only <code>Country</code> is modeled as a mapped class, leaving <code>State</code>, <code>Province</code> or <code>City</code> as text fields.</p>

<h3>MediaBundle</h3>

<p>Allows the storage-agnostic handling of media files, such as images. It also controls image resizing and consolidates HTTP headers for media files.</p>

<p>Other bundles are:</p>

<ul>
<li>BannerBundle</li>
<li>LanguageBundle</li>
<li>CurrencyBundle</li>
<li>MenuBundle</li>
<li>NewsletterBundle</li>
<li>ReferralProgramBundle</li>
<li>RuleBundle</li>
</ul>


<h3>BambooStore</h3>

<p>We developed a prototype of a front-end store, the <a href="http://bamboo.elcodi.com/">Bamboo</a>. It is a showcase of Elcodi core features and uses <a href="https://github.com/PaymentSuite">PaymentSuite</a> <a href="https://github.com/PaymentSuite/FreePaymentBundle">FreePaymentBundle</a> as payment method.</p>

<h3>BambooAdmin</h3>

<p>Something we just published. An initial release of a <a href="https://github.com/elcodi/bamboo-admin">backoffice application</a>, providing basic features yet usable. Likewise Elcodi core and the Bamboo frontend, it will be in constant development. Versions and releases of the three projects will stay synchronized, not to break dependencies.</p>

<h3>Implementation</h3>

<p>We know that unfortunately, at least at this stage, our design choices and implementation cannot satisfy everyone. Trying to do it would require a massive effort and can lead to a loss of focus and direction. We prefer stick with our vision despite the errors we would make.</p>

<p>A question we are frequently asked is why we are coupling with Symfony and Doctrine: this is a trade-off we had to settle for trying to maximize acceptance from both developers and end users by enforcing clean, coherent, structured and documented code.</p>

<p>Right now we don&rsquo;t think it is feasable to assemble more layers of indirection to achieve this decoupling. The goal is to involve the Symfony community and work on the feedbacks we will receive from developers who want to build applications with Elcodi. Mind you that Symfony decoupling <em>is</em> possible, since we are trying to follow the <strong>SOLID</strong> path, but the eternal struggle between being different and effective flows to a point of balance that surely will benefit both the project and our users.</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[El equipo de Elcodi]]></title>
    <link href="http://elcodi-blog.github.io/blog/2014/08/08/equipo/"/>
    <updated>2014-08-08T16:23:48+02:00</updated>
    <id>http://elcodi-blog.github.io/blog/2014/08/08/equipo</id>
    <content type="html"><![CDATA[<h2>Este post es la continuación de tres posts anteriores</h2>

<ul>
<li><a href="http://elcodi-blog.github.io/blog/2014/08/04/un-momento-para-reflexionar/">Un momento para reflexionar</a>.</li>
<li><a href="http://elcodi-blog.github.io/blog/2014/08/05/nuestro-roadmap/">Nuestro roadmap</a>.</li>
<li><a href="http://elcodi-blog.github.io/blog/2014/08/06/objetivos/">Objetivos</a>.</li>
</ul>


<p>Equipo&hellip; Punto interesante.</p>

<p>Desde hoy mismo buscamos dos perfiles que nos ayuden a crecer de forma
exponencial. Este post no trata de esto, por lo que en su momento ya vamos a
sacar las ofertas pertinentes, pero solo a nivel informativo, estamos buscando a
dos seniors de alto nivel para trabajar en nuestras oficinas de Barcelona.</p>

<p>Dado que buscamos perfiles muy concretos, con capacidad para trabajar en un
proyecto <strong><em>opensource</em></strong>, consideramos que es importante tener un compromiso
como empresa con la gente que venga con nosotros a formar parte de nuestro
equipo. Ya nos entendemos :)</p>

<h1>Comunidad</h1>

<p>Finalmente no nos queda más opción que dar las gracias a las personas que hasta
ahora nos han apoyado y nos han aportado, de alguna forma u otra, y aquellas que
lo harán en un futuro.</p>

<p>Consideramos que las menciones especiales se dan por supuestas, así que,
compañeros, muchas gracias.</p>

<p>Esperamos que, y siguiendo de cerca con la problemática que expresaba Javier
Eguiluz en su
<a href="http://symfony.es/noticias/2014/07/24/los-errores-de-la-pagina-28/">blog</a>
podamos llegar a ser útiles para la comunidad, y recibamos el soporte y la ayuda
para crecer a más velocidad. De esta forma nuestro producto será de calidad más
rápido y podremos crecer en robustez, fiabilidad y ejecución.</p>

<p>Dicho esto, el equipo de Elcodi os manda un saludo a todos desde y os desea un
feliz fín de semana.</p>
]]></content>
  </entry>
  
</feed>
